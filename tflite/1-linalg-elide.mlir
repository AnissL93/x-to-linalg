#map = affine_map<(d0, d1) -> (0, d1)>
#map1 = affine_map<(d0, d1) -> (d0, d1)>
#map2 = affine_map<(d0, d1, d2) -> (d0, d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map4 = affine_map<(d0, d1, d2) -> (0, 0, d2)>
#map5 = affine_map<(d0, d1, d2) -> (0, d1, 0)>
#map6 = affine_map<(d0, d1, d2) -> (0, d1, d2)>
#map7 = affine_map<(d0, d1, d2) -> (0, 0, 0)>
#map8 = affine_map<(d0, d1) -> (d1)>
#map9 = affine_map<(d0, d1, d2, d3) -> (0, d1, d2, d3)>
#map10 = affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>
#map11 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map12 = affine_map<(d0, d1, d2, d3) -> (0, d1, d2, 0)>
module attributes {tfl.description = "TOCO Converted.", tfl.schema_version = 3 : i32} {
  func.func @main(%arg0: tensor<1x384xi32>, %arg1: tensor<1x384xi32>, %arg2: tensor<1x384xi32>) -> (tensor<1x384xf32>, tensor<1x384xf32>) attributes {tf.entry_function = {inputs = "input_ids,input_mask,segment_ids", outputs = "end_logits,start_logits"}} {
    %cst = arith.constant dense_resource<__elided__> : tensor<4xi32>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<f32>
    %cst_1 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_2 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_3 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_4 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_5 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_6 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_7 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_8 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_9 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_10 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_11 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_12 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_13 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_14 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_15 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_16 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_17 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_18 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_19 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_20 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_21 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_22 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_23 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_24 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_25 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_26 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_27 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_28 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_29 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_30 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_31 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_32 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_33 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_34 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_35 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_36 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_37 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_38 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_39 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_40 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_41 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_42 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_43 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_44 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_45 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_46 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_47 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_48 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_49 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_50 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_51 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_52 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_53 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_54 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_55 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_56 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_57 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_58 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_59 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_60 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_61 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_62 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_63 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_64 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_65 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_66 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_67 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_68 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_69 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_70 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_71 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_72 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_73 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_74 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_75 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_76 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_77 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_78 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_79 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_80 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_81 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_82 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_83 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_84 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_85 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_86 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_87 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_88 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_89 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_90 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_91 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_92 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_93 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_94 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_95 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_96 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_97 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_98 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_99 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_100 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_101 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_102 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_103 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_104 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_105 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_106 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_107 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_108 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_109 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_110 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_111 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_112 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_113 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_114 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_115 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_116 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_117 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_118 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_119 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_120 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_121 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_122 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_123 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_124 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_125 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_126 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_127 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_128 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_129 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_130 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_131 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_132 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_133 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_134 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_135 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_136 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_137 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_138 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_139 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_140 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_141 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_142 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_143 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_144 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_145 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_146 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_147 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_148 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_149 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_150 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_151 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_152 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_153 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_154 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_155 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_156 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_157 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_158 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_159 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_160 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_161 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_162 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_163 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_164 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_165 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_166 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_167 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_168 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_169 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_170 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_171 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_172 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_173 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_174 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_175 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_176 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_177 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_178 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_179 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_180 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_181 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_182 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_183 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_184 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_185 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_186 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_187 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_188 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_189 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_190 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_191 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_192 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_193 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_194 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_195 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_196 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_197 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_198 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_199 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_200 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_201 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_202 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_203 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_204 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_205 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_206 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_207 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_208 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_209 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_210 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_211 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_212 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_213 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_214 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_215 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_216 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_217 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_218 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_219 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_220 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_221 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_222 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_223 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_224 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_225 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_226 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_227 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_228 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_229 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_230 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_231 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_232 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_233 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_234 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_235 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_236 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_237 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_238 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_239 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_240 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_241 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_242 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_243 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_244 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_245 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_246 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_247 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_248 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_249 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_250 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_251 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_252 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_253 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_254 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_255 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_256 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_257 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_258 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_259 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_260 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_261 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_262 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_263 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_264 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_265 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_266 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_267 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_268 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_269 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_270 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_271 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_272 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_273 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_274 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_275 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_276 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_277 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_278 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_279 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_280 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_281 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_282 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_283 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_284 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_285 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_286 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_287 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_288 = arith.constant dense_resource<__elided__> : tensor<1x1x128xf32>
    %cst_289 = arith.constant dense<0.176776692> : tensor<1x1x1xf32>
    %cst_290 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_291 = arith.constant dense_resource<__elided__> : tensor<1x1x512xf32>
    %cst_292 = arith.constant dense<-1.000000e+04> : tensor<1x1x1xf32>
    %cst_293 = arith.constant dense<1.000000e+00> : tensor<1x1x1xf32>
    %cst_294 = arith.constant dense<0.000000e+00> : tensor<32xf32>
    %cst_295 = arith.constant dense<0.000000e+00> : tensor<384xf32>
    %cst_296 = arith.constant dense_resource<__elided__> : tensor<1x30522x128xf32>
    %cst_297 = arith.constant dense_resource<__elided__> : tensor<1x2x512xf32>
    %cst_298 = arith.constant dense_resource<__elided__> : tensor<2xi32>
    %cst_299 = arith.constant dense_resource<__elided__> : tensor<2xf32>
    %cst_300 = arith.constant dense_resource<__elided__> : tensor<2x512xf32>
    %cst_301 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_302 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_303 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_304 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_305 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_306 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_307 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_308 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_309 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_310 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_311 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_312 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_313 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_314 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_315 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_316 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_317 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_318 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_319 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_320 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_321 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_322 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_323 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_324 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_325 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_326 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_327 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_328 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_329 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_330 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_331 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_332 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_333 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_334 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_335 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_336 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_337 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_338 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_339 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_340 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_341 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_342 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_343 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_344 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_345 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_346 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_347 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_348 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_349 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_350 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_351 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_352 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_353 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_354 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_355 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_356 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_357 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_358 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_359 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_360 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_361 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_362 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_363 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_364 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_365 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_366 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_367 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_368 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_369 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_370 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_371 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_372 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_373 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_374 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_375 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_376 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_377 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_378 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_379 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_380 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_381 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_382 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_383 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_384 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_385 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_386 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_387 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_388 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_389 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_390 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_391 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_392 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_393 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_394 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_395 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_396 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_397 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_398 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_399 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_400 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_401 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_402 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_403 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_404 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_405 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_406 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_407 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_408 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_409 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_410 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_411 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_412 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_413 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_414 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_415 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_416 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_417 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_418 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_419 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_420 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_421 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_422 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_423 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_424 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_425 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_426 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_427 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_428 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_429 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_430 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_431 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_432 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_433 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_434 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_435 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_436 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_437 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_438 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_439 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_440 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_441 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_442 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_443 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_444 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_445 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_446 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_447 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_448 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_449 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_450 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_451 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_452 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_453 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_454 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_455 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_456 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_457 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_458 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_459 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_460 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_461 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_462 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_463 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_464 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_465 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_466 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_467 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_468 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_469 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_470 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_471 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_472 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_473 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_474 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_475 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_476 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_477 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_478 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_479 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_480 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_481 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_482 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_483 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_484 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_485 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_486 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_487 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_488 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_489 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_490 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_491 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_492 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_493 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_494 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_495 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_496 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_497 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_498 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_499 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_500 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_501 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_502 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_503 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_504 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_505 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_506 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_507 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_508 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_509 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_510 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_511 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_512 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_513 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_514 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_515 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_516 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_517 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_518 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_519 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_520 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_521 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_522 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_523 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_524 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_525 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_526 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_527 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_528 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_529 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_530 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_531 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_532 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_533 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_534 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_535 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_536 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_537 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_538 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_539 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_540 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_541 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_542 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_543 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_544 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_545 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_546 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_547 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_548 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_549 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_550 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_551 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_552 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_553 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_554 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_555 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_556 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_557 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_558 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_559 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_560 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_561 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_562 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_563 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_564 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_565 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_566 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_567 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_568 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_569 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_570 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_571 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_572 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_573 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_574 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_575 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_576 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_577 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_578 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_579 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_580 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_581 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_582 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_583 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_584 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_585 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_586 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_587 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_588 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_589 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_590 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_591 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_592 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_593 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_594 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_595 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_596 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_597 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_598 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_599 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_600 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_601 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_602 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_603 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_604 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_605 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_606 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_607 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_608 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_609 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_610 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_611 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_612 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_613 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_614 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_615 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_616 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_617 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_618 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_619 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_620 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_621 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_622 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_623 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_624 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_625 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_626 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_627 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_628 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_629 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_630 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_631 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_632 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_633 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_634 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_635 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_636 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_637 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_638 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_639 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_640 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_641 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_642 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_643 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_644 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_645 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_646 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_647 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_648 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_649 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_650 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_651 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_652 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_653 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_654 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_655 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_656 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_657 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_658 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_659 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_660 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_661 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_662 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_663 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_664 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_665 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_666 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_667 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_668 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_669 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_670 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_671 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_672 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_673 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_674 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_675 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_676 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_677 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_678 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_679 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_680 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_681 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_682 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_683 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_684 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_685 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_686 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_687 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_688 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_689 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_690 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_691 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_692 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_693 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_694 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_695 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_696 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_697 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_698 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_699 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_700 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_701 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_702 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_703 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_704 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_705 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_706 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_707 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_708 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_709 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_710 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_711 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_712 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_713 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_714 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_715 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_716 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_717 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_718 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_719 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_720 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_721 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_722 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_723 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_724 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_725 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_726 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_727 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_728 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_729 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_730 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_731 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_732 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_733 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_734 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_735 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_736 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_737 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_738 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_739 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_740 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_741 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_742 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_743 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_744 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_745 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_746 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_747 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_748 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_749 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_750 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_751 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_752 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_753 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_754 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_755 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_756 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_757 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_758 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_759 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_760 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_761 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_762 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_763 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_764 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_765 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_766 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_767 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_768 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_769 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_770 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_771 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_772 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_773 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_774 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_775 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_776 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_777 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_778 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_779 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_780 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_781 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_782 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_783 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_784 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_785 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_786 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_787 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_788 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_789 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_790 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_791 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_792 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_793 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_794 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_795 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_796 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_797 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_798 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_799 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_800 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_801 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_802 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_803 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_804 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_805 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_806 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_807 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_808 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_809 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_810 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_811 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_812 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_813 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_814 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_815 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_816 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_817 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_818 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_819 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_820 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_821 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_822 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_823 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_824 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_825 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_826 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_827 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_828 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_829 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_830 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_831 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_832 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_833 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_834 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_835 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_836 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_837 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_838 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_839 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_840 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_841 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_842 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_843 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_844 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_845 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_846 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_847 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_848 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_849 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_850 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_851 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_852 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_853 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_854 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_855 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_856 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_857 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_858 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_859 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_860 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_861 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_862 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_863 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_864 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_865 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_866 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_867 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_868 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_869 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_870 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_871 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_872 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_873 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_874 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_875 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_876 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_877 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_878 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_879 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_880 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_881 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_882 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_883 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_884 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_885 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_886 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_887 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_888 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_889 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_890 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_891 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_892 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_893 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_894 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_895 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_896 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_897 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_898 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_899 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_900 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_901 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_902 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_903 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_904 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_905 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_906 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_907 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_908 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_909 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_910 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_911 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_912 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_913 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_914 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_915 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_916 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_917 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_918 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_919 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_920 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_921 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_922 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_923 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_924 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_925 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_926 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_927 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_928 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_929 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_930 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_931 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_932 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_933 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_934 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_935 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_936 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_937 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_938 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_939 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_940 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_941 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_942 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_943 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_944 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_945 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_946 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_947 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_948 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_949 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_950 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_951 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_952 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_953 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_954 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_955 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_956 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_957 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_958 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_959 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_960 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_961 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_962 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_963 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_964 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_965 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_966 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_967 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_968 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_969 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_970 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_971 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_972 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_973 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_974 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_975 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_976 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_977 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_978 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_979 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_980 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_981 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_982 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_983 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_984 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_985 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_986 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_987 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_988 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_989 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_990 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_991 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_992 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_993 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_994 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_995 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_996 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_997 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_998 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_999 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1000 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1001 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1002 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1003 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1004 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1005 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1006 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1007 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1008 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1009 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1010 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1011 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1012 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1013 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1014 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1015 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1016 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1017 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1018 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1019 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1020 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1021 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1022 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1023 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1024 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1025 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1026 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1027 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1028 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1029 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1030 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1031 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1032 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1033 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1034 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1035 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1036 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1037 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1038 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1039 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1040 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1041 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1042 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1043 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1044 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1045 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1046 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1047 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1048 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1049 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1050 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1051 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1052 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1053 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1054 = arith.constant dense_resource<__elided__> : tensor<512x128xf32>
    %cst_1055 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1056 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1057 = arith.constant dense_resource<__elided__> : tensor<3xi32>
    %cst_1058 = arith.constant dense_resource<__elided__> : tensor<3xi32>
    %cst_1059 = arith.constant dense_resource<__elided__> : tensor<4xi32>
    %cst_1060 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1061 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1062 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1063 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1064 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1065 = arith.constant dense_resource<__elided__> : tensor<128x128xf32>
    %cst_1066 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1067 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1068 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1069 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1070 = arith.constant dense_resource<__elided__> : tensor<128xf32>
    %cst_1071 = arith.constant dense_resource<__elided__> : tensor<128x512xf32>
    %cst_1072 = arith.constant dense_resource<__elided__> : tensor<512xf32>
    %cst_1073 = arith.constant dense_resource<__elided__> : tensor<512x384xf32>
    %cst_1074 = arith.constant dense_resource<__elided__> : tensor<3x2xi32>
    %cst_1075 = arith.constant dense_resource<__elided__> : tensor<3x2xi32>
    %cst_1076 = arith.constant dense_resource<__elided__> : tensor<1x384x512xf32>
    %cst_1077 = arith.constant dense<1.000000e+00> : tensor<1x384x1xf32>
    %0 = tensor.empty() : tensor<1x384xf32>
    %1 = linalg.generic {indexing_maps = [#map, #map1], iterator_types = ["parallel", "parallel"]} ins(%arg1 : tensor<1x384xi32>) outs(%0 : tensor<1x384xf32>) {
    ^bb0(%in: i32, %out: f32):
      %4110 = arith.sitofp %in : i32 to f32
      linalg.yield %4110 : f32
    } -> tensor<1x384xf32>
    %2 = tensor.empty() : tensor<1x384x512xf32>
    %3 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg2 : tensor<1x384xi32>) outs(%2 : tensor<1x384x512xf32>) {
    ^bb0(%in: i32, %out: f32):
      %4110 = linalg.index 0 : index
      %4111 = arith.index_cast %in : i32 to index
      %4112 = linalg.index 2 : index
      %extracted = tensor.extract %cst_297[%4110, %4111, %4112] : tensor<1x2x512xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x384x512xf32>
    %expanded = tensor.expand_shape %1 [[0, 1], [2]] : tensor<1x384xf32> into tensor<1x1x384xf32>
    %4 = tensor.empty() : tensor<1x384x128xf32>
    %5 = linalg.generic {indexing_maps = [#map2, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%arg0 : tensor<1x384xi32>) outs(%4 : tensor<1x384x128xf32>) {
    ^bb0(%in: i32, %out: f32):
      %4110 = linalg.index 0 : index
      %4111 = arith.index_cast %in : i32 to index
      %4112 = linalg.index 2 : index
      %extracted = tensor.extract %cst_296[%4110, %4111, %4112] : tensor<1x30522x128xf32>
      linalg.yield %extracted : f32
    } -> tensor<1x384x128xf32>
    %6 = tensor.empty() : tensor<1x384x384xf32>
    %7 = linalg.generic {indexing_maps = [#map4, #map5, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded, %cst_1077 : tensor<1x1x384xf32>, tensor<1x384x1xf32>) outs(%6 : tensor<1x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x384xf32>
    %8 = tensor.empty() : tensor<1x384x512xf32>
    %9 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3, %cst_1076 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%8 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %10 = tensor.empty() : tensor<1x384x384xf32>
    %11 = linalg.generic {indexing_maps = [#map7, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%cst_293, %7 : tensor<1x1x1xf32>, tensor<1x384x384xf32>) outs(%10 : tensor<1x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x384xf32>
    %12 = tensor.empty() : tensor<1x384x384xf32>
    %13 = linalg.generic {indexing_maps = [#map6, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%11, %cst_292 : tensor<1x384x384xf32>, tensor<1x1x1xf32>) outs(%12 : tensor<1x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x384xf32>
    %extracted_slice = tensor.extract_slice %5[0, 1, 0] [1, 383, 128] [1, 1, 1] : tensor<1x384x128xf32> to tensor<1x383x128xf32>
    %extracted_slice_1078 = tensor.extract_slice %5[0, 0, 0] [1, 383, 128] [1, 1, 1] : tensor<1x384x128xf32> to tensor<1x383x128xf32>
    %expanded_1079 = tensor.expand_shape %13 [[0, 1], [2], [3]] : tensor<1x384x384xf32> into tensor<1x1x384x384xf32>
    %cst_1080 = arith.constant 0.000000e+00 : f32
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c0_1081 = arith.constant 0 : index
    %c0_i32 = arith.constant 0 : i32
    %c0_i32_1082 = arith.constant 0 : i32
    %c0_1083 = arith.constant 0 : index
    %c0_1084 = arith.constant 0 : index
    %c1_1085 = arith.constant 1 : index
    %c0_i32_1086 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %c0_1087 = arith.constant 0 : index
    %c1_1088 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0_i32_1089 = arith.constant 0 : i32
    %c0_i32_1090 = arith.constant 0 : i32
    %c0_1091 = arith.constant 0 : index
    %c0_1092 = arith.constant 0 : index
    %padded = tensor.pad %extracted_slice low[%c0_1083, %c0_1087, %c0_1091] high[%c0_1084, %c1_1088, %c0_1092] {
    ^bb0(%arg3: index, %arg4: index, %arg5: index):
      tensor.yield %cst_1080 : f32
    } : tensor<1x383x128xf32> to tensor<1x384x128xf32>
    %cst_1093 = arith.constant 0.000000e+00 : f32
    %c0_1094 = arith.constant 0 : index
    %c1_1095 = arith.constant 1 : index
    %c0_1096 = arith.constant 0 : index
    %c0_i32_1097 = arith.constant 0 : i32
    %c0_i32_1098 = arith.constant 0 : i32
    %c0_1099 = arith.constant 0 : index
    %c0_1100 = arith.constant 0 : index
    %c1_1101 = arith.constant 1 : index
    %c1_i32_1102 = arith.constant 1 : i32
    %c0_i32_1103 = arith.constant 0 : i32
    %c1_1104 = arith.constant 1 : index
    %c0_1105 = arith.constant 0 : index
    %c2_1106 = arith.constant 2 : index
    %c0_i32_1107 = arith.constant 0 : i32
    %c0_i32_1108 = arith.constant 0 : i32
    %c0_1109 = arith.constant 0 : index
    %c0_1110 = arith.constant 0 : index
    %padded_1111 = tensor.pad %extracted_slice_1078 low[%c0_1099, %c1_1104, %c0_1109] high[%c0_1100, %c0_1105, %c0_1110] {
    ^bb0(%arg3: index, %arg4: index, %arg5: index):
      tensor.yield %cst_1093 : f32
    } : tensor<1x383x128xf32> to tensor<1x384x128xf32>
    %c2_1112 = arith.constant 2 : index
    %c128 = arith.constant 128 : index
    %c128_1113 = arith.constant 128 : index
    %c256 = arith.constant 256 : index
    %c128_1114 = arith.constant 128 : index
    %c256_1115 = arith.constant 256 : index
    %c384 = arith.constant 384 : index
    %14 = tensor.empty() : tensor<1x384x384xf32>
    %inserted_slice = tensor.insert_slice %padded into %14[0, 0, 0] [1, 384, 128] [1, 1, 1] : tensor<1x384x128xf32> into tensor<1x384x384xf32>
    %inserted_slice_1116 = tensor.insert_slice %5 into %inserted_slice[0, 0, 128] [1, 384, 128] [1, 1, 1] : tensor<1x384x128xf32> into tensor<1x384x384xf32>
    %inserted_slice_1117 = tensor.insert_slice %padded_1111 into %inserted_slice_1116[0, 0, 256] [1, 384, 128] [1, 1, 1] : tensor<1x384x128xf32> into tensor<1x384x384xf32>
    %collapsed = tensor.collapse_shape %inserted_slice_1117 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1118 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %15 = tensor.empty() : tensor<384x512xf32>
    %transposed = linalg.transpose ins(%cst_1073 : tensor<512x384xf32>) outs(%15 : tensor<384x512xf32>) permutation = [1, 0] 
    %16 = tensor.empty() : tensor<384x512xf32>
    %17 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1072 : tensor<512xf32>) outs(%16 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %18 = linalg.matmul ins(%collapsed, %transposed : tensor<384x384xf32>, tensor<384x512xf32>) outs(%17 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_1119 = tensor.expand_shape %18 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %19 = tensor.empty() : tensor<1x384x512xf32>
    %20 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1119, %9 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%19 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %21 = tensor.empty() : tensor<1x384x512xf32>
    %22 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%20, %cst_291 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%21 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %23 = tensor.empty() : tensor<1x384x512xf32>
    %24 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%22, %cst_290 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%23 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1120 = tensor.collapse_shape %24 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1121 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %25 = tensor.empty() : tensor<512x128xf32>
    %transposed_1122 = linalg.transpose ins(%cst_1071 : tensor<128x512xf32>) outs(%25 : tensor<512x128xf32>) permutation = [1, 0] 
    %26 = tensor.empty() : tensor<384x128xf32>
    %27 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1070 : tensor<128xf32>) outs(%26 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %28 = linalg.matmul ins(%collapsed_1120, %transposed_1122 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%27 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1123 = tensor.collapse_shape %24 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1124 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %29 = tensor.empty() : tensor<512x128xf32>
    %transposed_1125 = linalg.transpose ins(%cst_1069 : tensor<128x512xf32>) outs(%29 : tensor<512x128xf32>) permutation = [1, 0] 
    %30 = tensor.empty() : tensor<384x128xf32>
    %31 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1068 : tensor<128xf32>) outs(%30 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %32 = linalg.matmul ins(%collapsed_1123, %transposed_1125 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%31 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1126 = tensor.collapse_shape %24 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1127 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %33 = tensor.empty() : tensor<512x128xf32>
    %transposed_1128 = linalg.transpose ins(%cst_1067 : tensor<128x512xf32>) outs(%33 : tensor<512x128xf32>) permutation = [1, 0] 
    %34 = tensor.empty() : tensor<384x128xf32>
    %35 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1066 : tensor<128xf32>) outs(%34 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %36 = linalg.matmul ins(%collapsed_1126, %transposed_1128 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%35 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1129 = tensor.expand_shape %28 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_1130 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %37 = tensor.empty() : tensor<128x128xf32>
    %transposed_1131 = linalg.transpose ins(%cst_1065 : tensor<128x128xf32>) outs(%37 : tensor<128x128xf32>) permutation = [1, 0] 
    %38 = tensor.empty() : tensor<384x128xf32>
    %39 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1064 : tensor<128xf32>) outs(%38 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %40 = linalg.matmul ins(%32, %transposed_1131 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%39 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1132 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %41 = tensor.empty() : tensor<128x128xf32>
    %transposed_1133 = linalg.transpose ins(%cst_1063 : tensor<128x128xf32>) outs(%41 : tensor<128x128xf32>) permutation = [1, 0] 
    %42 = tensor.empty() : tensor<384x128xf32>
    %43 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1062 : tensor<128xf32>) outs(%42 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %44 = linalg.matmul ins(%32, %transposed_1133 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%43 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1134 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %45 = tensor.empty() : tensor<128x128xf32>
    %transposed_1135 = linalg.transpose ins(%cst_1061 : tensor<128x128xf32>) outs(%45 : tensor<128x128xf32>) permutation = [1, 0] 
    %46 = tensor.empty() : tensor<384x128xf32>
    %47 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1060 : tensor<128xf32>) outs(%46 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %48 = linalg.matmul ins(%36, %transposed_1135 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%47 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1136 = tensor.expand_shape %40 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1137 = tensor.expand_shape %44 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1138 = tensor.expand_shape %48 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %49 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1139 = linalg.transpose ins(%expanded_1136 : tensor<1x384x4x32xf32>) outs(%49 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %50 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1140 = linalg.transpose ins(%expanded_1138 : tensor<1x384x4x32xf32>) outs(%50 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %51 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_1141 = linalg.transpose ins(%expanded_1137 : tensor<1x384x4x32xf32>) outs(%51 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_1142 = tensor.collapse_shape %transposed_1139 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1143 = tensor.extract_slice %collapsed_1142[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1144 = tensor.extract_slice %collapsed_1142[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1145 = tensor.extract_slice %collapsed_1142[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1146 = tensor.extract_slice %collapsed_1142[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1147 = tensor.collapse_shape %transposed_1141 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1148 = tensor.extract_slice %collapsed_1147[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %52 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1149 = linalg.transpose ins(%extracted_slice_1148 : tensor<1x32x384xf32>) outs(%52 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1150 = tensor.extract_slice %collapsed_1147[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %53 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1151 = linalg.transpose ins(%extracted_slice_1150 : tensor<1x32x384xf32>) outs(%53 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1152 = tensor.extract_slice %collapsed_1147[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %54 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1153 = linalg.transpose ins(%extracted_slice_1152 : tensor<1x32x384xf32>) outs(%54 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1154 = tensor.extract_slice %collapsed_1147[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %55 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1155 = linalg.transpose ins(%extracted_slice_1154 : tensor<1x32x384xf32>) outs(%55 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1156 = tensor.collapse_shape %transposed_1149 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1157 = tensor.collapse_shape %extracted_slice_1143 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1158 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %56 = tensor.empty() : tensor<32x384xf32>
    %transposed_1159 = linalg.transpose ins(%collapsed_1156 : tensor<384x32xf32>) outs(%56 : tensor<32x384xf32>) permutation = [1, 0] 
    %57 = tensor.empty() : tensor<384x384xf32>
    %58 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%57 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %59 = linalg.matmul ins(%collapsed_1157, %transposed_1159 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%58 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1160 = tensor.collapse_shape %transposed_1151 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1161 = tensor.collapse_shape %extracted_slice_1144 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1162 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %60 = tensor.empty() : tensor<32x384xf32>
    %transposed_1163 = linalg.transpose ins(%collapsed_1160 : tensor<384x32xf32>) outs(%60 : tensor<32x384xf32>) permutation = [1, 0] 
    %61 = tensor.empty() : tensor<384x384xf32>
    %62 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%61 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %63 = linalg.matmul ins(%collapsed_1161, %transposed_1163 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%62 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1164 = tensor.collapse_shape %transposed_1153 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1165 = tensor.collapse_shape %extracted_slice_1145 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1166 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %64 = tensor.empty() : tensor<32x384xf32>
    %transposed_1167 = linalg.transpose ins(%collapsed_1164 : tensor<384x32xf32>) outs(%64 : tensor<32x384xf32>) permutation = [1, 0] 
    %65 = tensor.empty() : tensor<384x384xf32>
    %66 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%65 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %67 = linalg.matmul ins(%collapsed_1165, %transposed_1167 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%66 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1168 = tensor.collapse_shape %transposed_1155 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1169 = tensor.collapse_shape %extracted_slice_1146 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1170 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %68 = tensor.empty() : tensor<32x384xf32>
    %transposed_1171 = linalg.transpose ins(%collapsed_1168 : tensor<384x32xf32>) outs(%68 : tensor<32x384xf32>) permutation = [1, 0] 
    %69 = tensor.empty() : tensor<384x384xf32>
    %70 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%69 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %71 = linalg.matmul ins(%collapsed_1169, %transposed_1171 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%70 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_1172 = arith.constant 0 : index
    %c384_1173 = arith.constant 384 : index
    %c384_1174 = arith.constant 384 : index
    %c768 = arith.constant 768 : index
    %c384_1175 = arith.constant 384 : index
    %c768_1176 = arith.constant 768 : index
    %c1152 = arith.constant 1152 : index
    %c384_1177 = arith.constant 384 : index
    %c1152_1178 = arith.constant 1152 : index
    %c1536 = arith.constant 1536 : index
    %72 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1179 = tensor.insert_slice %59 into %72[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1180 = tensor.insert_slice %63 into %inserted_slice_1179[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1181 = tensor.insert_slice %67 into %inserted_slice_1180[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1182 = tensor.insert_slice %71 into %inserted_slice_1181[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1183 = tensor.expand_shape %inserted_slice_1182 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %73 = tensor.empty() : tensor<4x384x384xf32>
    %74 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1183, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%73 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_1184 = tensor.expand_shape %74 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %75 = tensor.empty() : tensor<1x4x384x384xf32>
    %76 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1184, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%75 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %77 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1185 = arith.constant -3.40282347E+38 : f32
    %78 = linalg.fill ins(%cst_1185 : f32) outs(%77 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced = linalg.reduce ins(%76 : tensor<1x4x384x384xf32>) outs(%78 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1186 = tensor.expand_shape %reduced [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %79 = tensor.empty() : tensor<1x4x384x384xf32>
    %80 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%76, %expanded_1186 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%79 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %81 = tensor.empty() : tensor<1x4x384x384xf32>
    %82 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%80 : tensor<1x4x384x384xf32>) outs(%81 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %83 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1187 = arith.constant 0.000000e+00 : f32
    %84 = linalg.fill ins(%cst_1187 : f32) outs(%83 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1188 = linalg.reduce ins(%82 : tensor<1x4x384x384xf32>) outs(%84 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1189 = tensor.expand_shape %reduced_1188 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %85 = tensor.empty() : tensor<1x4x384x1xf32>
    %86 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1189 : tensor<1x4x384x1xf32>) outs(%85 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %87 = tensor.empty() : tensor<1x4x384x384xf32>
    %88 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%82, %86 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%87 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_1190 = tensor.collapse_shape %88 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1191 = tensor.extract_slice %collapsed_1190[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1192 = tensor.extract_slice %collapsed_1190[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1193 = tensor.extract_slice %collapsed_1190[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1194 = tensor.extract_slice %collapsed_1190[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1195 = tensor.collapse_shape %transposed_1140 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1196 = tensor.extract_slice %collapsed_1195[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %89 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1197 = linalg.transpose ins(%extracted_slice_1196 : tensor<1x384x32xf32>) outs(%89 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1198 = tensor.extract_slice %collapsed_1195[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %90 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1199 = linalg.transpose ins(%extracted_slice_1198 : tensor<1x384x32xf32>) outs(%90 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1200 = tensor.extract_slice %collapsed_1195[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %91 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1201 = linalg.transpose ins(%extracted_slice_1200 : tensor<1x384x32xf32>) outs(%91 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1202 = tensor.extract_slice %collapsed_1195[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %92 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1203 = linalg.transpose ins(%extracted_slice_1202 : tensor<1x384x32xf32>) outs(%92 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1204 = tensor.collapse_shape %transposed_1197 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1205 = tensor.collapse_shape %extracted_slice_1191 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1206 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %93 = tensor.empty() : tensor<384x32xf32>
    %transposed_1207 = linalg.transpose ins(%collapsed_1204 : tensor<32x384xf32>) outs(%93 : tensor<384x32xf32>) permutation = [1, 0] 
    %94 = tensor.empty() : tensor<384x32xf32>
    %95 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%94 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %96 = linalg.matmul ins(%collapsed_1205, %transposed_1207 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%95 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1208 = tensor.collapse_shape %transposed_1199 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1209 = tensor.collapse_shape %extracted_slice_1192 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1210 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %97 = tensor.empty() : tensor<384x32xf32>
    %transposed_1211 = linalg.transpose ins(%collapsed_1208 : tensor<32x384xf32>) outs(%97 : tensor<384x32xf32>) permutation = [1, 0] 
    %98 = tensor.empty() : tensor<384x32xf32>
    %99 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%98 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %100 = linalg.matmul ins(%collapsed_1209, %transposed_1211 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%99 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1212 = tensor.collapse_shape %transposed_1201 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1213 = tensor.collapse_shape %extracted_slice_1193 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1214 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %101 = tensor.empty() : tensor<384x32xf32>
    %transposed_1215 = linalg.transpose ins(%collapsed_1212 : tensor<32x384xf32>) outs(%101 : tensor<384x32xf32>) permutation = [1, 0] 
    %102 = tensor.empty() : tensor<384x32xf32>
    %103 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%102 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %104 = linalg.matmul ins(%collapsed_1213, %transposed_1215 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%103 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1216 = tensor.collapse_shape %transposed_1203 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1217 = tensor.collapse_shape %extracted_slice_1194 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1218 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %105 = tensor.empty() : tensor<384x32xf32>
    %transposed_1219 = linalg.transpose ins(%collapsed_1216 : tensor<32x384xf32>) outs(%105 : tensor<384x32xf32>) permutation = [1, 0] 
    %106 = tensor.empty() : tensor<384x32xf32>
    %107 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%106 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %108 = linalg.matmul ins(%collapsed_1217, %transposed_1219 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%107 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_1220 = arith.constant 0 : index
    %c384_1221 = arith.constant 384 : index
    %c384_1222 = arith.constant 384 : index
    %c768_1223 = arith.constant 768 : index
    %c384_1224 = arith.constant 384 : index
    %c768_1225 = arith.constant 768 : index
    %c1152_1226 = arith.constant 1152 : index
    %c384_1227 = arith.constant 384 : index
    %c1152_1228 = arith.constant 1152 : index
    %c1536_1229 = arith.constant 1536 : index
    %109 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1230 = tensor.insert_slice %96 into %109[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1231 = tensor.insert_slice %100 into %inserted_slice_1230[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1232 = tensor.insert_slice %104 into %inserted_slice_1231[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1233 = tensor.insert_slice %108 into %inserted_slice_1232[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1234 = tensor.expand_shape %inserted_slice_1233 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %110 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_1235 = linalg.transpose ins(%expanded_1234 : tensor<4x384x32xf32>) outs(%110 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_1236 = tensor.collapse_shape %transposed_1235 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_1237 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %111 = tensor.empty() : tensor<128x128xf32>
    %transposed_1238 = linalg.transpose ins(%cst_1056 : tensor<128x128xf32>) outs(%111 : tensor<128x128xf32>) permutation = [1, 0] 
    %112 = tensor.empty() : tensor<384x128xf32>
    %113 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1055 : tensor<128xf32>) outs(%112 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %114 = linalg.matmul ins(%collapsed_1236, %transposed_1238 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%113 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1239 = tensor.expand_shape %114 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %115 = tensor.empty() : tensor<1x384x128xf32>
    %116 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1239, %expanded_1129 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%115 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %117 = tensor.empty() : tensor<1x384x128xf32>
    %118 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%116, %cst_288 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%117 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %119 = tensor.empty() : tensor<1x384x128xf32>
    %120 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%118, %cst_287 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%119 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1240 = tensor.collapse_shape %120 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1241 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %121 = tensor.empty() : tensor<128x512xf32>
    %transposed_1242 = linalg.transpose ins(%cst_1054 : tensor<512x128xf32>) outs(%121 : tensor<128x512xf32>) permutation = [1, 0] 
    %122 = tensor.empty() : tensor<384x512xf32>
    %123 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1053 : tensor<512xf32>) outs(%122 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %124 = linalg.matmul ins(%collapsed_1240, %transposed_1242 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%123 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %125 = tensor.empty() : tensor<384x512xf32>
    %126 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%124 : tensor<384x512xf32>) outs(%125 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1243 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %127 = tensor.empty() : tensor<512x128xf32>
    %transposed_1244 = linalg.transpose ins(%cst_1052 : tensor<128x512xf32>) outs(%127 : tensor<512x128xf32>) permutation = [1, 0] 
    %128 = tensor.empty() : tensor<384x128xf32>
    %129 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1051 : tensor<128xf32>) outs(%128 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %130 = linalg.matmul ins(%126, %transposed_1244 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%129 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1245 = tensor.expand_shape %130 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %131 = tensor.empty() : tensor<1x384x128xf32>
    %132 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1245, %120 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%131 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %133 = tensor.empty() : tensor<1x384x128xf32>
    %134 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%132, %cst_286 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%133 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %135 = tensor.empty() : tensor<1x384x128xf32>
    %136 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%134, %cst_285 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%135 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1246 = tensor.collapse_shape %136 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1247 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %137 = tensor.empty() : tensor<128x512xf32>
    %transposed_1248 = linalg.transpose ins(%cst_1050 : tensor<512x128xf32>) outs(%137 : tensor<128x512xf32>) permutation = [1, 0] 
    %138 = tensor.empty() : tensor<384x512xf32>
    %139 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1049 : tensor<512xf32>) outs(%138 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %140 = linalg.matmul ins(%collapsed_1246, %transposed_1248 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%139 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %141 = tensor.empty() : tensor<384x512xf32>
    %142 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%140 : tensor<384x512xf32>) outs(%141 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1249 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %143 = tensor.empty() : tensor<512x128xf32>
    %transposed_1250 = linalg.transpose ins(%cst_1048 : tensor<128x512xf32>) outs(%143 : tensor<512x128xf32>) permutation = [1, 0] 
    %144 = tensor.empty() : tensor<384x128xf32>
    %145 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1047 : tensor<128xf32>) outs(%144 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %146 = linalg.matmul ins(%142, %transposed_1250 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%145 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1251 = tensor.expand_shape %146 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %147 = tensor.empty() : tensor<1x384x128xf32>
    %148 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1251, %136 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%147 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %149 = tensor.empty() : tensor<1x384x128xf32>
    %150 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%148, %cst_284 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%149 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %151 = tensor.empty() : tensor<1x384x128xf32>
    %152 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%150, %cst_283 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%151 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1252 = tensor.collapse_shape %152 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1253 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %153 = tensor.empty() : tensor<128x512xf32>
    %transposed_1254 = linalg.transpose ins(%cst_1046 : tensor<512x128xf32>) outs(%153 : tensor<128x512xf32>) permutation = [1, 0] 
    %154 = tensor.empty() : tensor<384x512xf32>
    %155 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1045 : tensor<512xf32>) outs(%154 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %156 = linalg.matmul ins(%collapsed_1252, %transposed_1254 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%155 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %157 = tensor.empty() : tensor<384x512xf32>
    %158 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%156 : tensor<384x512xf32>) outs(%157 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1255 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %159 = tensor.empty() : tensor<512x128xf32>
    %transposed_1256 = linalg.transpose ins(%cst_1044 : tensor<128x512xf32>) outs(%159 : tensor<512x128xf32>) permutation = [1, 0] 
    %160 = tensor.empty() : tensor<384x128xf32>
    %161 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1043 : tensor<128xf32>) outs(%160 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %162 = linalg.matmul ins(%158, %transposed_1256 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%161 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1257 = tensor.expand_shape %162 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %163 = tensor.empty() : tensor<1x384x128xf32>
    %164 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1257, %152 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%163 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %165 = tensor.empty() : tensor<1x384x128xf32>
    %166 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%164, %cst_282 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%165 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %167 = tensor.empty() : tensor<1x384x128xf32>
    %168 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%166, %cst_281 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%167 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1258 = tensor.collapse_shape %168 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1259 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %169 = tensor.empty() : tensor<128x512xf32>
    %transposed_1260 = linalg.transpose ins(%cst_1042 : tensor<512x128xf32>) outs(%169 : tensor<128x512xf32>) permutation = [1, 0] 
    %170 = tensor.empty() : tensor<384x512xf32>
    %171 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1041 : tensor<512xf32>) outs(%170 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %172 = linalg.matmul ins(%collapsed_1258, %transposed_1260 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%171 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %173 = tensor.empty() : tensor<384x512xf32>
    %174 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%172 : tensor<384x512xf32>) outs(%173 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1261 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %175 = tensor.empty() : tensor<512x128xf32>
    %transposed_1262 = linalg.transpose ins(%cst_1040 : tensor<128x512xf32>) outs(%175 : tensor<512x128xf32>) permutation = [1, 0] 
    %176 = tensor.empty() : tensor<384x128xf32>
    %177 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1039 : tensor<128xf32>) outs(%176 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %178 = linalg.matmul ins(%174, %transposed_1262 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%177 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1263 = tensor.expand_shape %178 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %179 = tensor.empty() : tensor<1x384x128xf32>
    %180 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1263, %168 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%179 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %181 = tensor.empty() : tensor<1x384x128xf32>
    %182 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%180, %cst_280 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%181 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %183 = tensor.empty() : tensor<1x384x128xf32>
    %184 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%182, %cst_279 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%183 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1264 = tensor.collapse_shape %184 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1265 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %185 = tensor.empty() : tensor<128x512xf32>
    %transposed_1266 = linalg.transpose ins(%cst_1038 : tensor<512x128xf32>) outs(%185 : tensor<128x512xf32>) permutation = [1, 0] 
    %186 = tensor.empty() : tensor<384x512xf32>
    %187 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1037 : tensor<512xf32>) outs(%186 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %188 = linalg.matmul ins(%collapsed_1264, %transposed_1266 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%187 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_1267 = tensor.expand_shape %188 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %189 = tensor.empty() : tensor<1x384x512xf32>
    %190 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1267, %24 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%189 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %191 = tensor.empty() : tensor<1x384x512xf32>
    %192 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%190, %cst_278 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%191 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %193 = tensor.empty() : tensor<1x384x512xf32>
    %194 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%192, %cst_277 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%193 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1268 = tensor.collapse_shape %194 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1269 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %195 = tensor.empty() : tensor<512x128xf32>
    %transposed_1270 = linalg.transpose ins(%cst_1036 : tensor<128x512xf32>) outs(%195 : tensor<512x128xf32>) permutation = [1, 0] 
    %196 = tensor.empty() : tensor<384x128xf32>
    %197 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1035 : tensor<128xf32>) outs(%196 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %198 = linalg.matmul ins(%collapsed_1268, %transposed_1270 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%197 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1271 = tensor.collapse_shape %194 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1272 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %199 = tensor.empty() : tensor<512x128xf32>
    %transposed_1273 = linalg.transpose ins(%cst_1034 : tensor<128x512xf32>) outs(%199 : tensor<512x128xf32>) permutation = [1, 0] 
    %200 = tensor.empty() : tensor<384x128xf32>
    %201 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1033 : tensor<128xf32>) outs(%200 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %202 = linalg.matmul ins(%collapsed_1271, %transposed_1273 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%201 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1274 = tensor.collapse_shape %194 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1275 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %203 = tensor.empty() : tensor<512x128xf32>
    %transposed_1276 = linalg.transpose ins(%cst_1032 : tensor<128x512xf32>) outs(%203 : tensor<512x128xf32>) permutation = [1, 0] 
    %204 = tensor.empty() : tensor<384x128xf32>
    %205 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1031 : tensor<128xf32>) outs(%204 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %206 = linalg.matmul ins(%collapsed_1274, %transposed_1276 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%205 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1277 = tensor.expand_shape %198 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_1278 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %207 = tensor.empty() : tensor<128x128xf32>
    %transposed_1279 = linalg.transpose ins(%cst_1030 : tensor<128x128xf32>) outs(%207 : tensor<128x128xf32>) permutation = [1, 0] 
    %208 = tensor.empty() : tensor<384x128xf32>
    %209 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1029 : tensor<128xf32>) outs(%208 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %210 = linalg.matmul ins(%202, %transposed_1279 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%209 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1280 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %211 = tensor.empty() : tensor<128x128xf32>
    %transposed_1281 = linalg.transpose ins(%cst_1028 : tensor<128x128xf32>) outs(%211 : tensor<128x128xf32>) permutation = [1, 0] 
    %212 = tensor.empty() : tensor<384x128xf32>
    %213 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1027 : tensor<128xf32>) outs(%212 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %214 = linalg.matmul ins(%202, %transposed_1281 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%213 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1282 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %215 = tensor.empty() : tensor<128x128xf32>
    %transposed_1283 = linalg.transpose ins(%cst_1026 : tensor<128x128xf32>) outs(%215 : tensor<128x128xf32>) permutation = [1, 0] 
    %216 = tensor.empty() : tensor<384x128xf32>
    %217 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1025 : tensor<128xf32>) outs(%216 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %218 = linalg.matmul ins(%206, %transposed_1283 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%217 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1284 = tensor.expand_shape %210 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1285 = tensor.expand_shape %214 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1286 = tensor.expand_shape %218 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %219 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1287 = linalg.transpose ins(%expanded_1284 : tensor<1x384x4x32xf32>) outs(%219 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %220 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1288 = linalg.transpose ins(%expanded_1286 : tensor<1x384x4x32xf32>) outs(%220 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %221 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_1289 = linalg.transpose ins(%expanded_1285 : tensor<1x384x4x32xf32>) outs(%221 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_1290 = tensor.collapse_shape %transposed_1287 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1291 = tensor.extract_slice %collapsed_1290[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1292 = tensor.extract_slice %collapsed_1290[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1293 = tensor.extract_slice %collapsed_1290[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1294 = tensor.extract_slice %collapsed_1290[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1295 = tensor.collapse_shape %transposed_1289 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1296 = tensor.extract_slice %collapsed_1295[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %222 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1297 = linalg.transpose ins(%extracted_slice_1296 : tensor<1x32x384xf32>) outs(%222 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1298 = tensor.extract_slice %collapsed_1295[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %223 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1299 = linalg.transpose ins(%extracted_slice_1298 : tensor<1x32x384xf32>) outs(%223 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1300 = tensor.extract_slice %collapsed_1295[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %224 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1301 = linalg.transpose ins(%extracted_slice_1300 : tensor<1x32x384xf32>) outs(%224 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1302 = tensor.extract_slice %collapsed_1295[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %225 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1303 = linalg.transpose ins(%extracted_slice_1302 : tensor<1x32x384xf32>) outs(%225 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1304 = tensor.collapse_shape %transposed_1297 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1305 = tensor.collapse_shape %extracted_slice_1291 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1306 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %226 = tensor.empty() : tensor<32x384xf32>
    %transposed_1307 = linalg.transpose ins(%collapsed_1304 : tensor<384x32xf32>) outs(%226 : tensor<32x384xf32>) permutation = [1, 0] 
    %227 = tensor.empty() : tensor<384x384xf32>
    %228 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%227 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %229 = linalg.matmul ins(%collapsed_1305, %transposed_1307 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%228 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1308 = tensor.collapse_shape %transposed_1299 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1309 = tensor.collapse_shape %extracted_slice_1292 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1310 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %230 = tensor.empty() : tensor<32x384xf32>
    %transposed_1311 = linalg.transpose ins(%collapsed_1308 : tensor<384x32xf32>) outs(%230 : tensor<32x384xf32>) permutation = [1, 0] 
    %231 = tensor.empty() : tensor<384x384xf32>
    %232 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%231 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %233 = linalg.matmul ins(%collapsed_1309, %transposed_1311 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%232 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1312 = tensor.collapse_shape %transposed_1301 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1313 = tensor.collapse_shape %extracted_slice_1293 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1314 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %234 = tensor.empty() : tensor<32x384xf32>
    %transposed_1315 = linalg.transpose ins(%collapsed_1312 : tensor<384x32xf32>) outs(%234 : tensor<32x384xf32>) permutation = [1, 0] 
    %235 = tensor.empty() : tensor<384x384xf32>
    %236 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%235 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %237 = linalg.matmul ins(%collapsed_1313, %transposed_1315 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%236 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1316 = tensor.collapse_shape %transposed_1303 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1317 = tensor.collapse_shape %extracted_slice_1294 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1318 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %238 = tensor.empty() : tensor<32x384xf32>
    %transposed_1319 = linalg.transpose ins(%collapsed_1316 : tensor<384x32xf32>) outs(%238 : tensor<32x384xf32>) permutation = [1, 0] 
    %239 = tensor.empty() : tensor<384x384xf32>
    %240 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%239 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %241 = linalg.matmul ins(%collapsed_1317, %transposed_1319 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%240 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_1320 = arith.constant 0 : index
    %c384_1321 = arith.constant 384 : index
    %c384_1322 = arith.constant 384 : index
    %c768_1323 = arith.constant 768 : index
    %c384_1324 = arith.constant 384 : index
    %c768_1325 = arith.constant 768 : index
    %c1152_1326 = arith.constant 1152 : index
    %c384_1327 = arith.constant 384 : index
    %c1152_1328 = arith.constant 1152 : index
    %c1536_1329 = arith.constant 1536 : index
    %242 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1330 = tensor.insert_slice %229 into %242[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1331 = tensor.insert_slice %233 into %inserted_slice_1330[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1332 = tensor.insert_slice %237 into %inserted_slice_1331[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1333 = tensor.insert_slice %241 into %inserted_slice_1332[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1334 = tensor.expand_shape %inserted_slice_1333 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %243 = tensor.empty() : tensor<4x384x384xf32>
    %244 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1334, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%243 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_1335 = tensor.expand_shape %244 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %245 = tensor.empty() : tensor<1x4x384x384xf32>
    %246 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1335, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%245 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %247 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1336 = arith.constant -3.40282347E+38 : f32
    %248 = linalg.fill ins(%cst_1336 : f32) outs(%247 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1337 = linalg.reduce ins(%246 : tensor<1x4x384x384xf32>) outs(%248 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1338 = tensor.expand_shape %reduced_1337 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %249 = tensor.empty() : tensor<1x4x384x384xf32>
    %250 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%246, %expanded_1338 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%249 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %251 = tensor.empty() : tensor<1x4x384x384xf32>
    %252 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%250 : tensor<1x4x384x384xf32>) outs(%251 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %253 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1339 = arith.constant 0.000000e+00 : f32
    %254 = linalg.fill ins(%cst_1339 : f32) outs(%253 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1340 = linalg.reduce ins(%252 : tensor<1x4x384x384xf32>) outs(%254 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1341 = tensor.expand_shape %reduced_1340 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %255 = tensor.empty() : tensor<1x4x384x1xf32>
    %256 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1341 : tensor<1x4x384x1xf32>) outs(%255 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %257 = tensor.empty() : tensor<1x4x384x384xf32>
    %258 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%252, %256 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%257 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_1342 = tensor.collapse_shape %258 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1343 = tensor.extract_slice %collapsed_1342[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1344 = tensor.extract_slice %collapsed_1342[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1345 = tensor.extract_slice %collapsed_1342[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1346 = tensor.extract_slice %collapsed_1342[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1347 = tensor.collapse_shape %transposed_1288 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1348 = tensor.extract_slice %collapsed_1347[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %259 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1349 = linalg.transpose ins(%extracted_slice_1348 : tensor<1x384x32xf32>) outs(%259 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1350 = tensor.extract_slice %collapsed_1347[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %260 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1351 = linalg.transpose ins(%extracted_slice_1350 : tensor<1x384x32xf32>) outs(%260 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1352 = tensor.extract_slice %collapsed_1347[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %261 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1353 = linalg.transpose ins(%extracted_slice_1352 : tensor<1x384x32xf32>) outs(%261 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1354 = tensor.extract_slice %collapsed_1347[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %262 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1355 = linalg.transpose ins(%extracted_slice_1354 : tensor<1x384x32xf32>) outs(%262 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1356 = tensor.collapse_shape %transposed_1349 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1357 = tensor.collapse_shape %extracted_slice_1343 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1358 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %263 = tensor.empty() : tensor<384x32xf32>
    %transposed_1359 = linalg.transpose ins(%collapsed_1356 : tensor<32x384xf32>) outs(%263 : tensor<384x32xf32>) permutation = [1, 0] 
    %264 = tensor.empty() : tensor<384x32xf32>
    %265 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%264 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %266 = linalg.matmul ins(%collapsed_1357, %transposed_1359 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%265 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1360 = tensor.collapse_shape %transposed_1351 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1361 = tensor.collapse_shape %extracted_slice_1344 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1362 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %267 = tensor.empty() : tensor<384x32xf32>
    %transposed_1363 = linalg.transpose ins(%collapsed_1360 : tensor<32x384xf32>) outs(%267 : tensor<384x32xf32>) permutation = [1, 0] 
    %268 = tensor.empty() : tensor<384x32xf32>
    %269 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%268 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %270 = linalg.matmul ins(%collapsed_1361, %transposed_1363 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%269 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1364 = tensor.collapse_shape %transposed_1353 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1365 = tensor.collapse_shape %extracted_slice_1345 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1366 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %271 = tensor.empty() : tensor<384x32xf32>
    %transposed_1367 = linalg.transpose ins(%collapsed_1364 : tensor<32x384xf32>) outs(%271 : tensor<384x32xf32>) permutation = [1, 0] 
    %272 = tensor.empty() : tensor<384x32xf32>
    %273 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%272 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %274 = linalg.matmul ins(%collapsed_1365, %transposed_1367 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%273 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1368 = tensor.collapse_shape %transposed_1355 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1369 = tensor.collapse_shape %extracted_slice_1346 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1370 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %275 = tensor.empty() : tensor<384x32xf32>
    %transposed_1371 = linalg.transpose ins(%collapsed_1368 : tensor<32x384xf32>) outs(%275 : tensor<384x32xf32>) permutation = [1, 0] 
    %276 = tensor.empty() : tensor<384x32xf32>
    %277 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%276 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %278 = linalg.matmul ins(%collapsed_1369, %transposed_1371 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%277 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_1372 = arith.constant 0 : index
    %c384_1373 = arith.constant 384 : index
    %c384_1374 = arith.constant 384 : index
    %c768_1375 = arith.constant 768 : index
    %c384_1376 = arith.constant 384 : index
    %c768_1377 = arith.constant 768 : index
    %c1152_1378 = arith.constant 1152 : index
    %c384_1379 = arith.constant 384 : index
    %c1152_1380 = arith.constant 1152 : index
    %c1536_1381 = arith.constant 1536 : index
    %279 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1382 = tensor.insert_slice %266 into %279[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1383 = tensor.insert_slice %270 into %inserted_slice_1382[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1384 = tensor.insert_slice %274 into %inserted_slice_1383[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1385 = tensor.insert_slice %278 into %inserted_slice_1384[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1386 = tensor.expand_shape %inserted_slice_1385 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %280 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_1387 = linalg.transpose ins(%expanded_1386 : tensor<4x384x32xf32>) outs(%280 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_1388 = tensor.collapse_shape %transposed_1387 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_1389 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %281 = tensor.empty() : tensor<128x128xf32>
    %transposed_1390 = linalg.transpose ins(%cst_1024 : tensor<128x128xf32>) outs(%281 : tensor<128x128xf32>) permutation = [1, 0] 
    %282 = tensor.empty() : tensor<384x128xf32>
    %283 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1023 : tensor<128xf32>) outs(%282 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %284 = linalg.matmul ins(%collapsed_1388, %transposed_1390 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%283 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1391 = tensor.expand_shape %284 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %285 = tensor.empty() : tensor<1x384x128xf32>
    %286 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1391, %expanded_1277 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%285 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %287 = tensor.empty() : tensor<1x384x128xf32>
    %288 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%286, %cst_276 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%287 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %289 = tensor.empty() : tensor<1x384x128xf32>
    %290 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%288, %cst_275 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%289 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1392 = tensor.collapse_shape %290 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1393 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %291 = tensor.empty() : tensor<128x512xf32>
    %transposed_1394 = linalg.transpose ins(%cst_1022 : tensor<512x128xf32>) outs(%291 : tensor<128x512xf32>) permutation = [1, 0] 
    %292 = tensor.empty() : tensor<384x512xf32>
    %293 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1021 : tensor<512xf32>) outs(%292 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %294 = linalg.matmul ins(%collapsed_1392, %transposed_1394 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%293 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %295 = tensor.empty() : tensor<384x512xf32>
    %296 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%294 : tensor<384x512xf32>) outs(%295 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1395 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %297 = tensor.empty() : tensor<512x128xf32>
    %transposed_1396 = linalg.transpose ins(%cst_1020 : tensor<128x512xf32>) outs(%297 : tensor<512x128xf32>) permutation = [1, 0] 
    %298 = tensor.empty() : tensor<384x128xf32>
    %299 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1019 : tensor<128xf32>) outs(%298 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %300 = linalg.matmul ins(%296, %transposed_1396 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%299 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1397 = tensor.expand_shape %300 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %301 = tensor.empty() : tensor<1x384x128xf32>
    %302 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1397, %290 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%301 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %303 = tensor.empty() : tensor<1x384x128xf32>
    %304 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%302, %cst_274 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%303 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %305 = tensor.empty() : tensor<1x384x128xf32>
    %306 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%304, %cst_273 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%305 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1398 = tensor.collapse_shape %306 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1399 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %307 = tensor.empty() : tensor<128x512xf32>
    %transposed_1400 = linalg.transpose ins(%cst_1018 : tensor<512x128xf32>) outs(%307 : tensor<128x512xf32>) permutation = [1, 0] 
    %308 = tensor.empty() : tensor<384x512xf32>
    %309 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1017 : tensor<512xf32>) outs(%308 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %310 = linalg.matmul ins(%collapsed_1398, %transposed_1400 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%309 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %311 = tensor.empty() : tensor<384x512xf32>
    %312 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%310 : tensor<384x512xf32>) outs(%311 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1401 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %313 = tensor.empty() : tensor<512x128xf32>
    %transposed_1402 = linalg.transpose ins(%cst_1016 : tensor<128x512xf32>) outs(%313 : tensor<512x128xf32>) permutation = [1, 0] 
    %314 = tensor.empty() : tensor<384x128xf32>
    %315 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1015 : tensor<128xf32>) outs(%314 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %316 = linalg.matmul ins(%312, %transposed_1402 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%315 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1403 = tensor.expand_shape %316 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %317 = tensor.empty() : tensor<1x384x128xf32>
    %318 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1403, %306 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%317 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %319 = tensor.empty() : tensor<1x384x128xf32>
    %320 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%318, %cst_272 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%319 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %321 = tensor.empty() : tensor<1x384x128xf32>
    %322 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%320, %cst_271 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%321 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1404 = tensor.collapse_shape %322 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1405 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %323 = tensor.empty() : tensor<128x512xf32>
    %transposed_1406 = linalg.transpose ins(%cst_1014 : tensor<512x128xf32>) outs(%323 : tensor<128x512xf32>) permutation = [1, 0] 
    %324 = tensor.empty() : tensor<384x512xf32>
    %325 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1013 : tensor<512xf32>) outs(%324 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %326 = linalg.matmul ins(%collapsed_1404, %transposed_1406 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%325 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %327 = tensor.empty() : tensor<384x512xf32>
    %328 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%326 : tensor<384x512xf32>) outs(%327 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1407 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %329 = tensor.empty() : tensor<512x128xf32>
    %transposed_1408 = linalg.transpose ins(%cst_1012 : tensor<128x512xf32>) outs(%329 : tensor<512x128xf32>) permutation = [1, 0] 
    %330 = tensor.empty() : tensor<384x128xf32>
    %331 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1011 : tensor<128xf32>) outs(%330 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %332 = linalg.matmul ins(%328, %transposed_1408 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%331 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1409 = tensor.expand_shape %332 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %333 = tensor.empty() : tensor<1x384x128xf32>
    %334 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1409, %322 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%333 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %335 = tensor.empty() : tensor<1x384x128xf32>
    %336 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%334, %cst_270 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%335 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %337 = tensor.empty() : tensor<1x384x128xf32>
    %338 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%336, %cst_269 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%337 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1410 = tensor.collapse_shape %338 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1411 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %339 = tensor.empty() : tensor<128x512xf32>
    %transposed_1412 = linalg.transpose ins(%cst_1010 : tensor<512x128xf32>) outs(%339 : tensor<128x512xf32>) permutation = [1, 0] 
    %340 = tensor.empty() : tensor<384x512xf32>
    %341 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1009 : tensor<512xf32>) outs(%340 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %342 = linalg.matmul ins(%collapsed_1410, %transposed_1412 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%341 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %343 = tensor.empty() : tensor<384x512xf32>
    %344 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%342 : tensor<384x512xf32>) outs(%343 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1413 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %345 = tensor.empty() : tensor<512x128xf32>
    %transposed_1414 = linalg.transpose ins(%cst_1008 : tensor<128x512xf32>) outs(%345 : tensor<512x128xf32>) permutation = [1, 0] 
    %346 = tensor.empty() : tensor<384x128xf32>
    %347 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1007 : tensor<128xf32>) outs(%346 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %348 = linalg.matmul ins(%344, %transposed_1414 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%347 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1415 = tensor.expand_shape %348 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %349 = tensor.empty() : tensor<1x384x128xf32>
    %350 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1415, %338 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%349 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %351 = tensor.empty() : tensor<1x384x128xf32>
    %352 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%350, %cst_268 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%351 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %353 = tensor.empty() : tensor<1x384x128xf32>
    %354 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%352, %cst_267 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%353 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1416 = tensor.collapse_shape %354 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1417 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %355 = tensor.empty() : tensor<128x512xf32>
    %transposed_1418 = linalg.transpose ins(%cst_1006 : tensor<512x128xf32>) outs(%355 : tensor<128x512xf32>) permutation = [1, 0] 
    %356 = tensor.empty() : tensor<384x512xf32>
    %357 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1005 : tensor<512xf32>) outs(%356 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %358 = linalg.matmul ins(%collapsed_1416, %transposed_1418 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%357 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_1419 = tensor.expand_shape %358 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %359 = tensor.empty() : tensor<1x384x512xf32>
    %360 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1419, %194 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%359 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %361 = tensor.empty() : tensor<1x384x512xf32>
    %362 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%360, %cst_266 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%361 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %363 = tensor.empty() : tensor<1x384x512xf32>
    %364 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%362, %cst_265 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%363 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1420 = tensor.collapse_shape %364 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1421 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %365 = tensor.empty() : tensor<512x128xf32>
    %transposed_1422 = linalg.transpose ins(%cst_1004 : tensor<128x512xf32>) outs(%365 : tensor<512x128xf32>) permutation = [1, 0] 
    %366 = tensor.empty() : tensor<384x128xf32>
    %367 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1003 : tensor<128xf32>) outs(%366 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %368 = linalg.matmul ins(%collapsed_1420, %transposed_1422 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%367 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1423 = tensor.collapse_shape %364 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1424 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %369 = tensor.empty() : tensor<512x128xf32>
    %transposed_1425 = linalg.transpose ins(%cst_1002 : tensor<128x512xf32>) outs(%369 : tensor<512x128xf32>) permutation = [1, 0] 
    %370 = tensor.empty() : tensor<384x128xf32>
    %371 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_1001 : tensor<128xf32>) outs(%370 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %372 = linalg.matmul ins(%collapsed_1423, %transposed_1425 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%371 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1426 = tensor.collapse_shape %364 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1427 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %373 = tensor.empty() : tensor<512x128xf32>
    %transposed_1428 = linalg.transpose ins(%cst_1000 : tensor<128x512xf32>) outs(%373 : tensor<512x128xf32>) permutation = [1, 0] 
    %374 = tensor.empty() : tensor<384x128xf32>
    %375 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_999 : tensor<128xf32>) outs(%374 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %376 = linalg.matmul ins(%collapsed_1426, %transposed_1428 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%375 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1429 = tensor.expand_shape %368 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_1430 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %377 = tensor.empty() : tensor<128x128xf32>
    %transposed_1431 = linalg.transpose ins(%cst_998 : tensor<128x128xf32>) outs(%377 : tensor<128x128xf32>) permutation = [1, 0] 
    %378 = tensor.empty() : tensor<384x128xf32>
    %379 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_997 : tensor<128xf32>) outs(%378 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %380 = linalg.matmul ins(%372, %transposed_1431 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%379 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1432 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %381 = tensor.empty() : tensor<128x128xf32>
    %transposed_1433 = linalg.transpose ins(%cst_996 : tensor<128x128xf32>) outs(%381 : tensor<128x128xf32>) permutation = [1, 0] 
    %382 = tensor.empty() : tensor<384x128xf32>
    %383 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_995 : tensor<128xf32>) outs(%382 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %384 = linalg.matmul ins(%372, %transposed_1433 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%383 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1434 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %385 = tensor.empty() : tensor<128x128xf32>
    %transposed_1435 = linalg.transpose ins(%cst_994 : tensor<128x128xf32>) outs(%385 : tensor<128x128xf32>) permutation = [1, 0] 
    %386 = tensor.empty() : tensor<384x128xf32>
    %387 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_993 : tensor<128xf32>) outs(%386 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %388 = linalg.matmul ins(%376, %transposed_1435 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%387 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1436 = tensor.expand_shape %380 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1437 = tensor.expand_shape %384 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1438 = tensor.expand_shape %388 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %389 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1439 = linalg.transpose ins(%expanded_1436 : tensor<1x384x4x32xf32>) outs(%389 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %390 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1440 = linalg.transpose ins(%expanded_1438 : tensor<1x384x4x32xf32>) outs(%390 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %391 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_1441 = linalg.transpose ins(%expanded_1437 : tensor<1x384x4x32xf32>) outs(%391 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_1442 = tensor.collapse_shape %transposed_1439 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1443 = tensor.extract_slice %collapsed_1442[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1444 = tensor.extract_slice %collapsed_1442[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1445 = tensor.extract_slice %collapsed_1442[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1446 = tensor.extract_slice %collapsed_1442[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1447 = tensor.collapse_shape %transposed_1441 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1448 = tensor.extract_slice %collapsed_1447[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %392 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1449 = linalg.transpose ins(%extracted_slice_1448 : tensor<1x32x384xf32>) outs(%392 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1450 = tensor.extract_slice %collapsed_1447[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %393 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1451 = linalg.transpose ins(%extracted_slice_1450 : tensor<1x32x384xf32>) outs(%393 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1452 = tensor.extract_slice %collapsed_1447[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %394 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1453 = linalg.transpose ins(%extracted_slice_1452 : tensor<1x32x384xf32>) outs(%394 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1454 = tensor.extract_slice %collapsed_1447[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %395 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1455 = linalg.transpose ins(%extracted_slice_1454 : tensor<1x32x384xf32>) outs(%395 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1456 = tensor.collapse_shape %transposed_1449 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1457 = tensor.collapse_shape %extracted_slice_1443 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1458 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %396 = tensor.empty() : tensor<32x384xf32>
    %transposed_1459 = linalg.transpose ins(%collapsed_1456 : tensor<384x32xf32>) outs(%396 : tensor<32x384xf32>) permutation = [1, 0] 
    %397 = tensor.empty() : tensor<384x384xf32>
    %398 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%397 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %399 = linalg.matmul ins(%collapsed_1457, %transposed_1459 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%398 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1460 = tensor.collapse_shape %transposed_1451 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1461 = tensor.collapse_shape %extracted_slice_1444 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1462 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %400 = tensor.empty() : tensor<32x384xf32>
    %transposed_1463 = linalg.transpose ins(%collapsed_1460 : tensor<384x32xf32>) outs(%400 : tensor<32x384xf32>) permutation = [1, 0] 
    %401 = tensor.empty() : tensor<384x384xf32>
    %402 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%401 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %403 = linalg.matmul ins(%collapsed_1461, %transposed_1463 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%402 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1464 = tensor.collapse_shape %transposed_1453 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1465 = tensor.collapse_shape %extracted_slice_1445 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1466 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %404 = tensor.empty() : tensor<32x384xf32>
    %transposed_1467 = linalg.transpose ins(%collapsed_1464 : tensor<384x32xf32>) outs(%404 : tensor<32x384xf32>) permutation = [1, 0] 
    %405 = tensor.empty() : tensor<384x384xf32>
    %406 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%405 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %407 = linalg.matmul ins(%collapsed_1465, %transposed_1467 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%406 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1468 = tensor.collapse_shape %transposed_1455 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1469 = tensor.collapse_shape %extracted_slice_1446 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1470 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %408 = tensor.empty() : tensor<32x384xf32>
    %transposed_1471 = linalg.transpose ins(%collapsed_1468 : tensor<384x32xf32>) outs(%408 : tensor<32x384xf32>) permutation = [1, 0] 
    %409 = tensor.empty() : tensor<384x384xf32>
    %410 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%409 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %411 = linalg.matmul ins(%collapsed_1469, %transposed_1471 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%410 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_1472 = arith.constant 0 : index
    %c384_1473 = arith.constant 384 : index
    %c384_1474 = arith.constant 384 : index
    %c768_1475 = arith.constant 768 : index
    %c384_1476 = arith.constant 384 : index
    %c768_1477 = arith.constant 768 : index
    %c1152_1478 = arith.constant 1152 : index
    %c384_1479 = arith.constant 384 : index
    %c1152_1480 = arith.constant 1152 : index
    %c1536_1481 = arith.constant 1536 : index
    %412 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1482 = tensor.insert_slice %399 into %412[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1483 = tensor.insert_slice %403 into %inserted_slice_1482[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1484 = tensor.insert_slice %407 into %inserted_slice_1483[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1485 = tensor.insert_slice %411 into %inserted_slice_1484[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1486 = tensor.expand_shape %inserted_slice_1485 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %413 = tensor.empty() : tensor<4x384x384xf32>
    %414 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1486, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%413 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_1487 = tensor.expand_shape %414 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %415 = tensor.empty() : tensor<1x4x384x384xf32>
    %416 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1487, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%415 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %417 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1488 = arith.constant -3.40282347E+38 : f32
    %418 = linalg.fill ins(%cst_1488 : f32) outs(%417 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1489 = linalg.reduce ins(%416 : tensor<1x4x384x384xf32>) outs(%418 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1490 = tensor.expand_shape %reduced_1489 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %419 = tensor.empty() : tensor<1x4x384x384xf32>
    %420 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%416, %expanded_1490 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%419 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %421 = tensor.empty() : tensor<1x4x384x384xf32>
    %422 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%420 : tensor<1x4x384x384xf32>) outs(%421 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %423 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1491 = arith.constant 0.000000e+00 : f32
    %424 = linalg.fill ins(%cst_1491 : f32) outs(%423 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1492 = linalg.reduce ins(%422 : tensor<1x4x384x384xf32>) outs(%424 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1493 = tensor.expand_shape %reduced_1492 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %425 = tensor.empty() : tensor<1x4x384x1xf32>
    %426 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1493 : tensor<1x4x384x1xf32>) outs(%425 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %427 = tensor.empty() : tensor<1x4x384x384xf32>
    %428 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%422, %426 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%427 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_1494 = tensor.collapse_shape %428 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1495 = tensor.extract_slice %collapsed_1494[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1496 = tensor.extract_slice %collapsed_1494[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1497 = tensor.extract_slice %collapsed_1494[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1498 = tensor.extract_slice %collapsed_1494[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1499 = tensor.collapse_shape %transposed_1440 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1500 = tensor.extract_slice %collapsed_1499[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %429 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1501 = linalg.transpose ins(%extracted_slice_1500 : tensor<1x384x32xf32>) outs(%429 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1502 = tensor.extract_slice %collapsed_1499[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %430 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1503 = linalg.transpose ins(%extracted_slice_1502 : tensor<1x384x32xf32>) outs(%430 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1504 = tensor.extract_slice %collapsed_1499[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %431 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1505 = linalg.transpose ins(%extracted_slice_1504 : tensor<1x384x32xf32>) outs(%431 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1506 = tensor.extract_slice %collapsed_1499[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %432 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1507 = linalg.transpose ins(%extracted_slice_1506 : tensor<1x384x32xf32>) outs(%432 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1508 = tensor.collapse_shape %transposed_1501 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1509 = tensor.collapse_shape %extracted_slice_1495 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1510 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %433 = tensor.empty() : tensor<384x32xf32>
    %transposed_1511 = linalg.transpose ins(%collapsed_1508 : tensor<32x384xf32>) outs(%433 : tensor<384x32xf32>) permutation = [1, 0] 
    %434 = tensor.empty() : tensor<384x32xf32>
    %435 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%434 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %436 = linalg.matmul ins(%collapsed_1509, %transposed_1511 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%435 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1512 = tensor.collapse_shape %transposed_1503 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1513 = tensor.collapse_shape %extracted_slice_1496 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1514 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %437 = tensor.empty() : tensor<384x32xf32>
    %transposed_1515 = linalg.transpose ins(%collapsed_1512 : tensor<32x384xf32>) outs(%437 : tensor<384x32xf32>) permutation = [1, 0] 
    %438 = tensor.empty() : tensor<384x32xf32>
    %439 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%438 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %440 = linalg.matmul ins(%collapsed_1513, %transposed_1515 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%439 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1516 = tensor.collapse_shape %transposed_1505 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1517 = tensor.collapse_shape %extracted_slice_1497 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1518 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %441 = tensor.empty() : tensor<384x32xf32>
    %transposed_1519 = linalg.transpose ins(%collapsed_1516 : tensor<32x384xf32>) outs(%441 : tensor<384x32xf32>) permutation = [1, 0] 
    %442 = tensor.empty() : tensor<384x32xf32>
    %443 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%442 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %444 = linalg.matmul ins(%collapsed_1517, %transposed_1519 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%443 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1520 = tensor.collapse_shape %transposed_1507 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1521 = tensor.collapse_shape %extracted_slice_1498 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1522 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %445 = tensor.empty() : tensor<384x32xf32>
    %transposed_1523 = linalg.transpose ins(%collapsed_1520 : tensor<32x384xf32>) outs(%445 : tensor<384x32xf32>) permutation = [1, 0] 
    %446 = tensor.empty() : tensor<384x32xf32>
    %447 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%446 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %448 = linalg.matmul ins(%collapsed_1521, %transposed_1523 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%447 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_1524 = arith.constant 0 : index
    %c384_1525 = arith.constant 384 : index
    %c384_1526 = arith.constant 384 : index
    %c768_1527 = arith.constant 768 : index
    %c384_1528 = arith.constant 384 : index
    %c768_1529 = arith.constant 768 : index
    %c1152_1530 = arith.constant 1152 : index
    %c384_1531 = arith.constant 384 : index
    %c1152_1532 = arith.constant 1152 : index
    %c1536_1533 = arith.constant 1536 : index
    %449 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1534 = tensor.insert_slice %436 into %449[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1535 = tensor.insert_slice %440 into %inserted_slice_1534[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1536 = tensor.insert_slice %444 into %inserted_slice_1535[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1537 = tensor.insert_slice %448 into %inserted_slice_1536[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1538 = tensor.expand_shape %inserted_slice_1537 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %450 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_1539 = linalg.transpose ins(%expanded_1538 : tensor<4x384x32xf32>) outs(%450 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_1540 = tensor.collapse_shape %transposed_1539 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_1541 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %451 = tensor.empty() : tensor<128x128xf32>
    %transposed_1542 = linalg.transpose ins(%cst_992 : tensor<128x128xf32>) outs(%451 : tensor<128x128xf32>) permutation = [1, 0] 
    %452 = tensor.empty() : tensor<384x128xf32>
    %453 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_991 : tensor<128xf32>) outs(%452 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %454 = linalg.matmul ins(%collapsed_1540, %transposed_1542 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%453 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1543 = tensor.expand_shape %454 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %455 = tensor.empty() : tensor<1x384x128xf32>
    %456 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1543, %expanded_1429 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%455 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %457 = tensor.empty() : tensor<1x384x128xf32>
    %458 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%456, %cst_264 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%457 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %459 = tensor.empty() : tensor<1x384x128xf32>
    %460 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%458, %cst_263 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%459 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1544 = tensor.collapse_shape %460 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1545 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %461 = tensor.empty() : tensor<128x512xf32>
    %transposed_1546 = linalg.transpose ins(%cst_990 : tensor<512x128xf32>) outs(%461 : tensor<128x512xf32>) permutation = [1, 0] 
    %462 = tensor.empty() : tensor<384x512xf32>
    %463 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_989 : tensor<512xf32>) outs(%462 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %464 = linalg.matmul ins(%collapsed_1544, %transposed_1546 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%463 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %465 = tensor.empty() : tensor<384x512xf32>
    %466 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%464 : tensor<384x512xf32>) outs(%465 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1547 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %467 = tensor.empty() : tensor<512x128xf32>
    %transposed_1548 = linalg.transpose ins(%cst_988 : tensor<128x512xf32>) outs(%467 : tensor<512x128xf32>) permutation = [1, 0] 
    %468 = tensor.empty() : tensor<384x128xf32>
    %469 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_987 : tensor<128xf32>) outs(%468 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %470 = linalg.matmul ins(%466, %transposed_1548 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%469 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1549 = tensor.expand_shape %470 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %471 = tensor.empty() : tensor<1x384x128xf32>
    %472 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1549, %460 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%471 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %473 = tensor.empty() : tensor<1x384x128xf32>
    %474 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%472, %cst_262 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%473 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %475 = tensor.empty() : tensor<1x384x128xf32>
    %476 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%474, %cst_261 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%475 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1550 = tensor.collapse_shape %476 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1551 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %477 = tensor.empty() : tensor<128x512xf32>
    %transposed_1552 = linalg.transpose ins(%cst_986 : tensor<512x128xf32>) outs(%477 : tensor<128x512xf32>) permutation = [1, 0] 
    %478 = tensor.empty() : tensor<384x512xf32>
    %479 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_985 : tensor<512xf32>) outs(%478 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %480 = linalg.matmul ins(%collapsed_1550, %transposed_1552 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%479 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %481 = tensor.empty() : tensor<384x512xf32>
    %482 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%480 : tensor<384x512xf32>) outs(%481 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1553 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %483 = tensor.empty() : tensor<512x128xf32>
    %transposed_1554 = linalg.transpose ins(%cst_984 : tensor<128x512xf32>) outs(%483 : tensor<512x128xf32>) permutation = [1, 0] 
    %484 = tensor.empty() : tensor<384x128xf32>
    %485 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_983 : tensor<128xf32>) outs(%484 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %486 = linalg.matmul ins(%482, %transposed_1554 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%485 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1555 = tensor.expand_shape %486 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %487 = tensor.empty() : tensor<1x384x128xf32>
    %488 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1555, %476 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%487 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %489 = tensor.empty() : tensor<1x384x128xf32>
    %490 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%488, %cst_260 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%489 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %491 = tensor.empty() : tensor<1x384x128xf32>
    %492 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%490, %cst_259 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%491 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1556 = tensor.collapse_shape %492 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1557 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %493 = tensor.empty() : tensor<128x512xf32>
    %transposed_1558 = linalg.transpose ins(%cst_982 : tensor<512x128xf32>) outs(%493 : tensor<128x512xf32>) permutation = [1, 0] 
    %494 = tensor.empty() : tensor<384x512xf32>
    %495 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_981 : tensor<512xf32>) outs(%494 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %496 = linalg.matmul ins(%collapsed_1556, %transposed_1558 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%495 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %497 = tensor.empty() : tensor<384x512xf32>
    %498 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%496 : tensor<384x512xf32>) outs(%497 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1559 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %499 = tensor.empty() : tensor<512x128xf32>
    %transposed_1560 = linalg.transpose ins(%cst_980 : tensor<128x512xf32>) outs(%499 : tensor<512x128xf32>) permutation = [1, 0] 
    %500 = tensor.empty() : tensor<384x128xf32>
    %501 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_979 : tensor<128xf32>) outs(%500 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %502 = linalg.matmul ins(%498, %transposed_1560 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%501 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1561 = tensor.expand_shape %502 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %503 = tensor.empty() : tensor<1x384x128xf32>
    %504 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1561, %492 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%503 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %505 = tensor.empty() : tensor<1x384x128xf32>
    %506 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%504, %cst_258 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%505 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %507 = tensor.empty() : tensor<1x384x128xf32>
    %508 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%506, %cst_257 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%507 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1562 = tensor.collapse_shape %508 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1563 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %509 = tensor.empty() : tensor<128x512xf32>
    %transposed_1564 = linalg.transpose ins(%cst_978 : tensor<512x128xf32>) outs(%509 : tensor<128x512xf32>) permutation = [1, 0] 
    %510 = tensor.empty() : tensor<384x512xf32>
    %511 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_977 : tensor<512xf32>) outs(%510 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %512 = linalg.matmul ins(%collapsed_1562, %transposed_1564 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%511 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %513 = tensor.empty() : tensor<384x512xf32>
    %514 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%512 : tensor<384x512xf32>) outs(%513 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1565 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %515 = tensor.empty() : tensor<512x128xf32>
    %transposed_1566 = linalg.transpose ins(%cst_976 : tensor<128x512xf32>) outs(%515 : tensor<512x128xf32>) permutation = [1, 0] 
    %516 = tensor.empty() : tensor<384x128xf32>
    %517 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_975 : tensor<128xf32>) outs(%516 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %518 = linalg.matmul ins(%514, %transposed_1566 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%517 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1567 = tensor.expand_shape %518 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %519 = tensor.empty() : tensor<1x384x128xf32>
    %520 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1567, %508 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%519 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %521 = tensor.empty() : tensor<1x384x128xf32>
    %522 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%520, %cst_256 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%521 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %523 = tensor.empty() : tensor<1x384x128xf32>
    %524 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%522, %cst_255 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%523 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1568 = tensor.collapse_shape %524 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1569 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %525 = tensor.empty() : tensor<128x512xf32>
    %transposed_1570 = linalg.transpose ins(%cst_974 : tensor<512x128xf32>) outs(%525 : tensor<128x512xf32>) permutation = [1, 0] 
    %526 = tensor.empty() : tensor<384x512xf32>
    %527 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_973 : tensor<512xf32>) outs(%526 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %528 = linalg.matmul ins(%collapsed_1568, %transposed_1570 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%527 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_1571 = tensor.expand_shape %528 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %529 = tensor.empty() : tensor<1x384x512xf32>
    %530 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1571, %364 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%529 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %531 = tensor.empty() : tensor<1x384x512xf32>
    %532 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%530, %cst_254 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%531 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %533 = tensor.empty() : tensor<1x384x512xf32>
    %534 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%532, %cst_253 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%533 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1572 = tensor.collapse_shape %534 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1573 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %535 = tensor.empty() : tensor<512x128xf32>
    %transposed_1574 = linalg.transpose ins(%cst_972 : tensor<128x512xf32>) outs(%535 : tensor<512x128xf32>) permutation = [1, 0] 
    %536 = tensor.empty() : tensor<384x128xf32>
    %537 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_971 : tensor<128xf32>) outs(%536 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %538 = linalg.matmul ins(%collapsed_1572, %transposed_1574 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%537 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1575 = tensor.collapse_shape %534 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1576 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %539 = tensor.empty() : tensor<512x128xf32>
    %transposed_1577 = linalg.transpose ins(%cst_970 : tensor<128x512xf32>) outs(%539 : tensor<512x128xf32>) permutation = [1, 0] 
    %540 = tensor.empty() : tensor<384x128xf32>
    %541 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_969 : tensor<128xf32>) outs(%540 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %542 = linalg.matmul ins(%collapsed_1575, %transposed_1577 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%541 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1578 = tensor.collapse_shape %534 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1579 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %543 = tensor.empty() : tensor<512x128xf32>
    %transposed_1580 = linalg.transpose ins(%cst_968 : tensor<128x512xf32>) outs(%543 : tensor<512x128xf32>) permutation = [1, 0] 
    %544 = tensor.empty() : tensor<384x128xf32>
    %545 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_967 : tensor<128xf32>) outs(%544 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %546 = linalg.matmul ins(%collapsed_1578, %transposed_1580 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%545 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1581 = tensor.expand_shape %538 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_1582 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %547 = tensor.empty() : tensor<128x128xf32>
    %transposed_1583 = linalg.transpose ins(%cst_966 : tensor<128x128xf32>) outs(%547 : tensor<128x128xf32>) permutation = [1, 0] 
    %548 = tensor.empty() : tensor<384x128xf32>
    %549 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_965 : tensor<128xf32>) outs(%548 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %550 = linalg.matmul ins(%542, %transposed_1583 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%549 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1584 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %551 = tensor.empty() : tensor<128x128xf32>
    %transposed_1585 = linalg.transpose ins(%cst_964 : tensor<128x128xf32>) outs(%551 : tensor<128x128xf32>) permutation = [1, 0] 
    %552 = tensor.empty() : tensor<384x128xf32>
    %553 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_963 : tensor<128xf32>) outs(%552 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %554 = linalg.matmul ins(%542, %transposed_1585 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%553 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1586 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %555 = tensor.empty() : tensor<128x128xf32>
    %transposed_1587 = linalg.transpose ins(%cst_962 : tensor<128x128xf32>) outs(%555 : tensor<128x128xf32>) permutation = [1, 0] 
    %556 = tensor.empty() : tensor<384x128xf32>
    %557 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_961 : tensor<128xf32>) outs(%556 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %558 = linalg.matmul ins(%546, %transposed_1587 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%557 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1588 = tensor.expand_shape %550 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1589 = tensor.expand_shape %554 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1590 = tensor.expand_shape %558 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %559 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1591 = linalg.transpose ins(%expanded_1588 : tensor<1x384x4x32xf32>) outs(%559 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %560 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1592 = linalg.transpose ins(%expanded_1590 : tensor<1x384x4x32xf32>) outs(%560 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %561 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_1593 = linalg.transpose ins(%expanded_1589 : tensor<1x384x4x32xf32>) outs(%561 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_1594 = tensor.collapse_shape %transposed_1591 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1595 = tensor.extract_slice %collapsed_1594[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1596 = tensor.extract_slice %collapsed_1594[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1597 = tensor.extract_slice %collapsed_1594[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1598 = tensor.extract_slice %collapsed_1594[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1599 = tensor.collapse_shape %transposed_1593 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1600 = tensor.extract_slice %collapsed_1599[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %562 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1601 = linalg.transpose ins(%extracted_slice_1600 : tensor<1x32x384xf32>) outs(%562 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1602 = tensor.extract_slice %collapsed_1599[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %563 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1603 = linalg.transpose ins(%extracted_slice_1602 : tensor<1x32x384xf32>) outs(%563 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1604 = tensor.extract_slice %collapsed_1599[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %564 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1605 = linalg.transpose ins(%extracted_slice_1604 : tensor<1x32x384xf32>) outs(%564 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1606 = tensor.extract_slice %collapsed_1599[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %565 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1607 = linalg.transpose ins(%extracted_slice_1606 : tensor<1x32x384xf32>) outs(%565 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1608 = tensor.collapse_shape %transposed_1601 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1609 = tensor.collapse_shape %extracted_slice_1595 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1610 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %566 = tensor.empty() : tensor<32x384xf32>
    %transposed_1611 = linalg.transpose ins(%collapsed_1608 : tensor<384x32xf32>) outs(%566 : tensor<32x384xf32>) permutation = [1, 0] 
    %567 = tensor.empty() : tensor<384x384xf32>
    %568 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%567 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %569 = linalg.matmul ins(%collapsed_1609, %transposed_1611 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%568 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1612 = tensor.collapse_shape %transposed_1603 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1613 = tensor.collapse_shape %extracted_slice_1596 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1614 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %570 = tensor.empty() : tensor<32x384xf32>
    %transposed_1615 = linalg.transpose ins(%collapsed_1612 : tensor<384x32xf32>) outs(%570 : tensor<32x384xf32>) permutation = [1, 0] 
    %571 = tensor.empty() : tensor<384x384xf32>
    %572 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%571 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %573 = linalg.matmul ins(%collapsed_1613, %transposed_1615 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%572 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1616 = tensor.collapse_shape %transposed_1605 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1617 = tensor.collapse_shape %extracted_slice_1597 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1618 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %574 = tensor.empty() : tensor<32x384xf32>
    %transposed_1619 = linalg.transpose ins(%collapsed_1616 : tensor<384x32xf32>) outs(%574 : tensor<32x384xf32>) permutation = [1, 0] 
    %575 = tensor.empty() : tensor<384x384xf32>
    %576 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%575 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %577 = linalg.matmul ins(%collapsed_1617, %transposed_1619 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%576 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1620 = tensor.collapse_shape %transposed_1607 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1621 = tensor.collapse_shape %extracted_slice_1598 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1622 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %578 = tensor.empty() : tensor<32x384xf32>
    %transposed_1623 = linalg.transpose ins(%collapsed_1620 : tensor<384x32xf32>) outs(%578 : tensor<32x384xf32>) permutation = [1, 0] 
    %579 = tensor.empty() : tensor<384x384xf32>
    %580 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%579 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %581 = linalg.matmul ins(%collapsed_1621, %transposed_1623 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%580 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_1624 = arith.constant 0 : index
    %c384_1625 = arith.constant 384 : index
    %c384_1626 = arith.constant 384 : index
    %c768_1627 = arith.constant 768 : index
    %c384_1628 = arith.constant 384 : index
    %c768_1629 = arith.constant 768 : index
    %c1152_1630 = arith.constant 1152 : index
    %c384_1631 = arith.constant 384 : index
    %c1152_1632 = arith.constant 1152 : index
    %c1536_1633 = arith.constant 1536 : index
    %582 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1634 = tensor.insert_slice %569 into %582[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1635 = tensor.insert_slice %573 into %inserted_slice_1634[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1636 = tensor.insert_slice %577 into %inserted_slice_1635[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1637 = tensor.insert_slice %581 into %inserted_slice_1636[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1638 = tensor.expand_shape %inserted_slice_1637 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %583 = tensor.empty() : tensor<4x384x384xf32>
    %584 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1638, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%583 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_1639 = tensor.expand_shape %584 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %585 = tensor.empty() : tensor<1x4x384x384xf32>
    %586 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1639, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%585 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %587 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1640 = arith.constant -3.40282347E+38 : f32
    %588 = linalg.fill ins(%cst_1640 : f32) outs(%587 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1641 = linalg.reduce ins(%586 : tensor<1x4x384x384xf32>) outs(%588 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1642 = tensor.expand_shape %reduced_1641 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %589 = tensor.empty() : tensor<1x4x384x384xf32>
    %590 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%586, %expanded_1642 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%589 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %591 = tensor.empty() : tensor<1x4x384x384xf32>
    %592 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%590 : tensor<1x4x384x384xf32>) outs(%591 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %593 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1643 = arith.constant 0.000000e+00 : f32
    %594 = linalg.fill ins(%cst_1643 : f32) outs(%593 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1644 = linalg.reduce ins(%592 : tensor<1x4x384x384xf32>) outs(%594 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1645 = tensor.expand_shape %reduced_1644 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %595 = tensor.empty() : tensor<1x4x384x1xf32>
    %596 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1645 : tensor<1x4x384x1xf32>) outs(%595 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %597 = tensor.empty() : tensor<1x4x384x384xf32>
    %598 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%592, %596 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%597 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_1646 = tensor.collapse_shape %598 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1647 = tensor.extract_slice %collapsed_1646[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1648 = tensor.extract_slice %collapsed_1646[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1649 = tensor.extract_slice %collapsed_1646[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1650 = tensor.extract_slice %collapsed_1646[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1651 = tensor.collapse_shape %transposed_1592 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1652 = tensor.extract_slice %collapsed_1651[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %599 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1653 = linalg.transpose ins(%extracted_slice_1652 : tensor<1x384x32xf32>) outs(%599 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1654 = tensor.extract_slice %collapsed_1651[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %600 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1655 = linalg.transpose ins(%extracted_slice_1654 : tensor<1x384x32xf32>) outs(%600 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1656 = tensor.extract_slice %collapsed_1651[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %601 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1657 = linalg.transpose ins(%extracted_slice_1656 : tensor<1x384x32xf32>) outs(%601 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1658 = tensor.extract_slice %collapsed_1651[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %602 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1659 = linalg.transpose ins(%extracted_slice_1658 : tensor<1x384x32xf32>) outs(%602 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1660 = tensor.collapse_shape %transposed_1653 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1661 = tensor.collapse_shape %extracted_slice_1647 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1662 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %603 = tensor.empty() : tensor<384x32xf32>
    %transposed_1663 = linalg.transpose ins(%collapsed_1660 : tensor<32x384xf32>) outs(%603 : tensor<384x32xf32>) permutation = [1, 0] 
    %604 = tensor.empty() : tensor<384x32xf32>
    %605 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%604 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %606 = linalg.matmul ins(%collapsed_1661, %transposed_1663 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%605 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1664 = tensor.collapse_shape %transposed_1655 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1665 = tensor.collapse_shape %extracted_slice_1648 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1666 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %607 = tensor.empty() : tensor<384x32xf32>
    %transposed_1667 = linalg.transpose ins(%collapsed_1664 : tensor<32x384xf32>) outs(%607 : tensor<384x32xf32>) permutation = [1, 0] 
    %608 = tensor.empty() : tensor<384x32xf32>
    %609 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%608 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %610 = linalg.matmul ins(%collapsed_1665, %transposed_1667 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%609 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1668 = tensor.collapse_shape %transposed_1657 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1669 = tensor.collapse_shape %extracted_slice_1649 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1670 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %611 = tensor.empty() : tensor<384x32xf32>
    %transposed_1671 = linalg.transpose ins(%collapsed_1668 : tensor<32x384xf32>) outs(%611 : tensor<384x32xf32>) permutation = [1, 0] 
    %612 = tensor.empty() : tensor<384x32xf32>
    %613 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%612 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %614 = linalg.matmul ins(%collapsed_1669, %transposed_1671 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%613 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1672 = tensor.collapse_shape %transposed_1659 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1673 = tensor.collapse_shape %extracted_slice_1650 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1674 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %615 = tensor.empty() : tensor<384x32xf32>
    %transposed_1675 = linalg.transpose ins(%collapsed_1672 : tensor<32x384xf32>) outs(%615 : tensor<384x32xf32>) permutation = [1, 0] 
    %616 = tensor.empty() : tensor<384x32xf32>
    %617 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%616 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %618 = linalg.matmul ins(%collapsed_1673, %transposed_1675 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%617 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_1676 = arith.constant 0 : index
    %c384_1677 = arith.constant 384 : index
    %c384_1678 = arith.constant 384 : index
    %c768_1679 = arith.constant 768 : index
    %c384_1680 = arith.constant 384 : index
    %c768_1681 = arith.constant 768 : index
    %c1152_1682 = arith.constant 1152 : index
    %c384_1683 = arith.constant 384 : index
    %c1152_1684 = arith.constant 1152 : index
    %c1536_1685 = arith.constant 1536 : index
    %619 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1686 = tensor.insert_slice %606 into %619[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1687 = tensor.insert_slice %610 into %inserted_slice_1686[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1688 = tensor.insert_slice %614 into %inserted_slice_1687[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1689 = tensor.insert_slice %618 into %inserted_slice_1688[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1690 = tensor.expand_shape %inserted_slice_1689 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %620 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_1691 = linalg.transpose ins(%expanded_1690 : tensor<4x384x32xf32>) outs(%620 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_1692 = tensor.collapse_shape %transposed_1691 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_1693 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %621 = tensor.empty() : tensor<128x128xf32>
    %transposed_1694 = linalg.transpose ins(%cst_960 : tensor<128x128xf32>) outs(%621 : tensor<128x128xf32>) permutation = [1, 0] 
    %622 = tensor.empty() : tensor<384x128xf32>
    %623 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_959 : tensor<128xf32>) outs(%622 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %624 = linalg.matmul ins(%collapsed_1692, %transposed_1694 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%623 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1695 = tensor.expand_shape %624 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %625 = tensor.empty() : tensor<1x384x128xf32>
    %626 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1695, %expanded_1581 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%625 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %627 = tensor.empty() : tensor<1x384x128xf32>
    %628 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%626, %cst_252 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%627 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %629 = tensor.empty() : tensor<1x384x128xf32>
    %630 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%628, %cst_251 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%629 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1696 = tensor.collapse_shape %630 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1697 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %631 = tensor.empty() : tensor<128x512xf32>
    %transposed_1698 = linalg.transpose ins(%cst_958 : tensor<512x128xf32>) outs(%631 : tensor<128x512xf32>) permutation = [1, 0] 
    %632 = tensor.empty() : tensor<384x512xf32>
    %633 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_957 : tensor<512xf32>) outs(%632 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %634 = linalg.matmul ins(%collapsed_1696, %transposed_1698 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%633 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %635 = tensor.empty() : tensor<384x512xf32>
    %636 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%634 : tensor<384x512xf32>) outs(%635 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1699 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %637 = tensor.empty() : tensor<512x128xf32>
    %transposed_1700 = linalg.transpose ins(%cst_956 : tensor<128x512xf32>) outs(%637 : tensor<512x128xf32>) permutation = [1, 0] 
    %638 = tensor.empty() : tensor<384x128xf32>
    %639 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_955 : tensor<128xf32>) outs(%638 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %640 = linalg.matmul ins(%636, %transposed_1700 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%639 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1701 = tensor.expand_shape %640 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %641 = tensor.empty() : tensor<1x384x128xf32>
    %642 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1701, %630 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%641 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %643 = tensor.empty() : tensor<1x384x128xf32>
    %644 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%642, %cst_250 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%643 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %645 = tensor.empty() : tensor<1x384x128xf32>
    %646 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%644, %cst_249 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%645 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1702 = tensor.collapse_shape %646 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1703 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %647 = tensor.empty() : tensor<128x512xf32>
    %transposed_1704 = linalg.transpose ins(%cst_954 : tensor<512x128xf32>) outs(%647 : tensor<128x512xf32>) permutation = [1, 0] 
    %648 = tensor.empty() : tensor<384x512xf32>
    %649 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_953 : tensor<512xf32>) outs(%648 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %650 = linalg.matmul ins(%collapsed_1702, %transposed_1704 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%649 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %651 = tensor.empty() : tensor<384x512xf32>
    %652 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%650 : tensor<384x512xf32>) outs(%651 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1705 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %653 = tensor.empty() : tensor<512x128xf32>
    %transposed_1706 = linalg.transpose ins(%cst_952 : tensor<128x512xf32>) outs(%653 : tensor<512x128xf32>) permutation = [1, 0] 
    %654 = tensor.empty() : tensor<384x128xf32>
    %655 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_951 : tensor<128xf32>) outs(%654 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %656 = linalg.matmul ins(%652, %transposed_1706 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%655 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1707 = tensor.expand_shape %656 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %657 = tensor.empty() : tensor<1x384x128xf32>
    %658 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1707, %646 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%657 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %659 = tensor.empty() : tensor<1x384x128xf32>
    %660 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%658, %cst_248 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%659 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %661 = tensor.empty() : tensor<1x384x128xf32>
    %662 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%660, %cst_247 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%661 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1708 = tensor.collapse_shape %662 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1709 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %663 = tensor.empty() : tensor<128x512xf32>
    %transposed_1710 = linalg.transpose ins(%cst_950 : tensor<512x128xf32>) outs(%663 : tensor<128x512xf32>) permutation = [1, 0] 
    %664 = tensor.empty() : tensor<384x512xf32>
    %665 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_949 : tensor<512xf32>) outs(%664 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %666 = linalg.matmul ins(%collapsed_1708, %transposed_1710 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%665 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %667 = tensor.empty() : tensor<384x512xf32>
    %668 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%666 : tensor<384x512xf32>) outs(%667 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1711 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %669 = tensor.empty() : tensor<512x128xf32>
    %transposed_1712 = linalg.transpose ins(%cst_948 : tensor<128x512xf32>) outs(%669 : tensor<512x128xf32>) permutation = [1, 0] 
    %670 = tensor.empty() : tensor<384x128xf32>
    %671 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_947 : tensor<128xf32>) outs(%670 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %672 = linalg.matmul ins(%668, %transposed_1712 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%671 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1713 = tensor.expand_shape %672 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %673 = tensor.empty() : tensor<1x384x128xf32>
    %674 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1713, %662 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%673 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %675 = tensor.empty() : tensor<1x384x128xf32>
    %676 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%674, %cst_246 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%675 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %677 = tensor.empty() : tensor<1x384x128xf32>
    %678 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%676, %cst_245 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%677 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1714 = tensor.collapse_shape %678 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1715 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %679 = tensor.empty() : tensor<128x512xf32>
    %transposed_1716 = linalg.transpose ins(%cst_946 : tensor<512x128xf32>) outs(%679 : tensor<128x512xf32>) permutation = [1, 0] 
    %680 = tensor.empty() : tensor<384x512xf32>
    %681 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_945 : tensor<512xf32>) outs(%680 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %682 = linalg.matmul ins(%collapsed_1714, %transposed_1716 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%681 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %683 = tensor.empty() : tensor<384x512xf32>
    %684 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%682 : tensor<384x512xf32>) outs(%683 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1717 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %685 = tensor.empty() : tensor<512x128xf32>
    %transposed_1718 = linalg.transpose ins(%cst_944 : tensor<128x512xf32>) outs(%685 : tensor<512x128xf32>) permutation = [1, 0] 
    %686 = tensor.empty() : tensor<384x128xf32>
    %687 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_943 : tensor<128xf32>) outs(%686 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %688 = linalg.matmul ins(%684, %transposed_1718 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%687 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1719 = tensor.expand_shape %688 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %689 = tensor.empty() : tensor<1x384x128xf32>
    %690 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1719, %678 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%689 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %691 = tensor.empty() : tensor<1x384x128xf32>
    %692 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%690, %cst_244 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%691 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %693 = tensor.empty() : tensor<1x384x128xf32>
    %694 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%692, %cst_243 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%693 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1720 = tensor.collapse_shape %694 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1721 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %695 = tensor.empty() : tensor<128x512xf32>
    %transposed_1722 = linalg.transpose ins(%cst_942 : tensor<512x128xf32>) outs(%695 : tensor<128x512xf32>) permutation = [1, 0] 
    %696 = tensor.empty() : tensor<384x512xf32>
    %697 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_941 : tensor<512xf32>) outs(%696 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %698 = linalg.matmul ins(%collapsed_1720, %transposed_1722 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%697 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_1723 = tensor.expand_shape %698 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %699 = tensor.empty() : tensor<1x384x512xf32>
    %700 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1723, %534 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%699 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %701 = tensor.empty() : tensor<1x384x512xf32>
    %702 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%700, %cst_242 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%701 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %703 = tensor.empty() : tensor<1x384x512xf32>
    %704 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%702, %cst_241 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%703 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1724 = tensor.collapse_shape %704 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1725 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %705 = tensor.empty() : tensor<512x128xf32>
    %transposed_1726 = linalg.transpose ins(%cst_940 : tensor<128x512xf32>) outs(%705 : tensor<512x128xf32>) permutation = [1, 0] 
    %706 = tensor.empty() : tensor<384x128xf32>
    %707 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_939 : tensor<128xf32>) outs(%706 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %708 = linalg.matmul ins(%collapsed_1724, %transposed_1726 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%707 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1727 = tensor.collapse_shape %704 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1728 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %709 = tensor.empty() : tensor<512x128xf32>
    %transposed_1729 = linalg.transpose ins(%cst_938 : tensor<128x512xf32>) outs(%709 : tensor<512x128xf32>) permutation = [1, 0] 
    %710 = tensor.empty() : tensor<384x128xf32>
    %711 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_937 : tensor<128xf32>) outs(%710 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %712 = linalg.matmul ins(%collapsed_1727, %transposed_1729 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%711 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1730 = tensor.collapse_shape %704 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1731 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %713 = tensor.empty() : tensor<512x128xf32>
    %transposed_1732 = linalg.transpose ins(%cst_936 : tensor<128x512xf32>) outs(%713 : tensor<512x128xf32>) permutation = [1, 0] 
    %714 = tensor.empty() : tensor<384x128xf32>
    %715 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_935 : tensor<128xf32>) outs(%714 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %716 = linalg.matmul ins(%collapsed_1730, %transposed_1732 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%715 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1733 = tensor.expand_shape %708 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_1734 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %717 = tensor.empty() : tensor<128x128xf32>
    %transposed_1735 = linalg.transpose ins(%cst_934 : tensor<128x128xf32>) outs(%717 : tensor<128x128xf32>) permutation = [1, 0] 
    %718 = tensor.empty() : tensor<384x128xf32>
    %719 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_933 : tensor<128xf32>) outs(%718 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %720 = linalg.matmul ins(%712, %transposed_1735 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%719 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1736 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %721 = tensor.empty() : tensor<128x128xf32>
    %transposed_1737 = linalg.transpose ins(%cst_932 : tensor<128x128xf32>) outs(%721 : tensor<128x128xf32>) permutation = [1, 0] 
    %722 = tensor.empty() : tensor<384x128xf32>
    %723 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_931 : tensor<128xf32>) outs(%722 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %724 = linalg.matmul ins(%712, %transposed_1737 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%723 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1738 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %725 = tensor.empty() : tensor<128x128xf32>
    %transposed_1739 = linalg.transpose ins(%cst_930 : tensor<128x128xf32>) outs(%725 : tensor<128x128xf32>) permutation = [1, 0] 
    %726 = tensor.empty() : tensor<384x128xf32>
    %727 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_929 : tensor<128xf32>) outs(%726 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %728 = linalg.matmul ins(%716, %transposed_1739 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%727 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1740 = tensor.expand_shape %720 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1741 = tensor.expand_shape %724 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1742 = tensor.expand_shape %728 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %729 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1743 = linalg.transpose ins(%expanded_1740 : tensor<1x384x4x32xf32>) outs(%729 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %730 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1744 = linalg.transpose ins(%expanded_1742 : tensor<1x384x4x32xf32>) outs(%730 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %731 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_1745 = linalg.transpose ins(%expanded_1741 : tensor<1x384x4x32xf32>) outs(%731 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_1746 = tensor.collapse_shape %transposed_1743 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1747 = tensor.extract_slice %collapsed_1746[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1748 = tensor.extract_slice %collapsed_1746[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1749 = tensor.extract_slice %collapsed_1746[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1750 = tensor.extract_slice %collapsed_1746[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1751 = tensor.collapse_shape %transposed_1745 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1752 = tensor.extract_slice %collapsed_1751[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %732 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1753 = linalg.transpose ins(%extracted_slice_1752 : tensor<1x32x384xf32>) outs(%732 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1754 = tensor.extract_slice %collapsed_1751[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %733 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1755 = linalg.transpose ins(%extracted_slice_1754 : tensor<1x32x384xf32>) outs(%733 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1756 = tensor.extract_slice %collapsed_1751[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %734 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1757 = linalg.transpose ins(%extracted_slice_1756 : tensor<1x32x384xf32>) outs(%734 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1758 = tensor.extract_slice %collapsed_1751[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %735 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1759 = linalg.transpose ins(%extracted_slice_1758 : tensor<1x32x384xf32>) outs(%735 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1760 = tensor.collapse_shape %transposed_1753 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1761 = tensor.collapse_shape %extracted_slice_1747 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1762 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %736 = tensor.empty() : tensor<32x384xf32>
    %transposed_1763 = linalg.transpose ins(%collapsed_1760 : tensor<384x32xf32>) outs(%736 : tensor<32x384xf32>) permutation = [1, 0] 
    %737 = tensor.empty() : tensor<384x384xf32>
    %738 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%737 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %739 = linalg.matmul ins(%collapsed_1761, %transposed_1763 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%738 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1764 = tensor.collapse_shape %transposed_1755 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1765 = tensor.collapse_shape %extracted_slice_1748 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1766 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %740 = tensor.empty() : tensor<32x384xf32>
    %transposed_1767 = linalg.transpose ins(%collapsed_1764 : tensor<384x32xf32>) outs(%740 : tensor<32x384xf32>) permutation = [1, 0] 
    %741 = tensor.empty() : tensor<384x384xf32>
    %742 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%741 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %743 = linalg.matmul ins(%collapsed_1765, %transposed_1767 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%742 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1768 = tensor.collapse_shape %transposed_1757 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1769 = tensor.collapse_shape %extracted_slice_1749 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1770 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %744 = tensor.empty() : tensor<32x384xf32>
    %transposed_1771 = linalg.transpose ins(%collapsed_1768 : tensor<384x32xf32>) outs(%744 : tensor<32x384xf32>) permutation = [1, 0] 
    %745 = tensor.empty() : tensor<384x384xf32>
    %746 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%745 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %747 = linalg.matmul ins(%collapsed_1769, %transposed_1771 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%746 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1772 = tensor.collapse_shape %transposed_1759 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1773 = tensor.collapse_shape %extracted_slice_1750 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1774 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %748 = tensor.empty() : tensor<32x384xf32>
    %transposed_1775 = linalg.transpose ins(%collapsed_1772 : tensor<384x32xf32>) outs(%748 : tensor<32x384xf32>) permutation = [1, 0] 
    %749 = tensor.empty() : tensor<384x384xf32>
    %750 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%749 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %751 = linalg.matmul ins(%collapsed_1773, %transposed_1775 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%750 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_1776 = arith.constant 0 : index
    %c384_1777 = arith.constant 384 : index
    %c384_1778 = arith.constant 384 : index
    %c768_1779 = arith.constant 768 : index
    %c384_1780 = arith.constant 384 : index
    %c768_1781 = arith.constant 768 : index
    %c1152_1782 = arith.constant 1152 : index
    %c384_1783 = arith.constant 384 : index
    %c1152_1784 = arith.constant 1152 : index
    %c1536_1785 = arith.constant 1536 : index
    %752 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1786 = tensor.insert_slice %739 into %752[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1787 = tensor.insert_slice %743 into %inserted_slice_1786[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1788 = tensor.insert_slice %747 into %inserted_slice_1787[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1789 = tensor.insert_slice %751 into %inserted_slice_1788[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1790 = tensor.expand_shape %inserted_slice_1789 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %753 = tensor.empty() : tensor<4x384x384xf32>
    %754 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1790, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%753 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_1791 = tensor.expand_shape %754 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %755 = tensor.empty() : tensor<1x4x384x384xf32>
    %756 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1791, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%755 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %757 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1792 = arith.constant -3.40282347E+38 : f32
    %758 = linalg.fill ins(%cst_1792 : f32) outs(%757 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1793 = linalg.reduce ins(%756 : tensor<1x4x384x384xf32>) outs(%758 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1794 = tensor.expand_shape %reduced_1793 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %759 = tensor.empty() : tensor<1x4x384x384xf32>
    %760 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%756, %expanded_1794 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%759 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %761 = tensor.empty() : tensor<1x4x384x384xf32>
    %762 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%760 : tensor<1x4x384x384xf32>) outs(%761 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %763 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1795 = arith.constant 0.000000e+00 : f32
    %764 = linalg.fill ins(%cst_1795 : f32) outs(%763 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1796 = linalg.reduce ins(%762 : tensor<1x4x384x384xf32>) outs(%764 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1797 = tensor.expand_shape %reduced_1796 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %765 = tensor.empty() : tensor<1x4x384x1xf32>
    %766 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1797 : tensor<1x4x384x1xf32>) outs(%765 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %767 = tensor.empty() : tensor<1x4x384x384xf32>
    %768 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%762, %766 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%767 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_1798 = tensor.collapse_shape %768 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1799 = tensor.extract_slice %collapsed_1798[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1800 = tensor.extract_slice %collapsed_1798[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1801 = tensor.extract_slice %collapsed_1798[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1802 = tensor.extract_slice %collapsed_1798[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1803 = tensor.collapse_shape %transposed_1744 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1804 = tensor.extract_slice %collapsed_1803[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %769 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1805 = linalg.transpose ins(%extracted_slice_1804 : tensor<1x384x32xf32>) outs(%769 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1806 = tensor.extract_slice %collapsed_1803[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %770 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1807 = linalg.transpose ins(%extracted_slice_1806 : tensor<1x384x32xf32>) outs(%770 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1808 = tensor.extract_slice %collapsed_1803[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %771 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1809 = linalg.transpose ins(%extracted_slice_1808 : tensor<1x384x32xf32>) outs(%771 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1810 = tensor.extract_slice %collapsed_1803[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %772 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1811 = linalg.transpose ins(%extracted_slice_1810 : tensor<1x384x32xf32>) outs(%772 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1812 = tensor.collapse_shape %transposed_1805 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1813 = tensor.collapse_shape %extracted_slice_1799 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1814 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %773 = tensor.empty() : tensor<384x32xf32>
    %transposed_1815 = linalg.transpose ins(%collapsed_1812 : tensor<32x384xf32>) outs(%773 : tensor<384x32xf32>) permutation = [1, 0] 
    %774 = tensor.empty() : tensor<384x32xf32>
    %775 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%774 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %776 = linalg.matmul ins(%collapsed_1813, %transposed_1815 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%775 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1816 = tensor.collapse_shape %transposed_1807 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1817 = tensor.collapse_shape %extracted_slice_1800 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1818 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %777 = tensor.empty() : tensor<384x32xf32>
    %transposed_1819 = linalg.transpose ins(%collapsed_1816 : tensor<32x384xf32>) outs(%777 : tensor<384x32xf32>) permutation = [1, 0] 
    %778 = tensor.empty() : tensor<384x32xf32>
    %779 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%778 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %780 = linalg.matmul ins(%collapsed_1817, %transposed_1819 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%779 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1820 = tensor.collapse_shape %transposed_1809 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1821 = tensor.collapse_shape %extracted_slice_1801 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1822 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %781 = tensor.empty() : tensor<384x32xf32>
    %transposed_1823 = linalg.transpose ins(%collapsed_1820 : tensor<32x384xf32>) outs(%781 : tensor<384x32xf32>) permutation = [1, 0] 
    %782 = tensor.empty() : tensor<384x32xf32>
    %783 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%782 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %784 = linalg.matmul ins(%collapsed_1821, %transposed_1823 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%783 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1824 = tensor.collapse_shape %transposed_1811 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1825 = tensor.collapse_shape %extracted_slice_1802 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1826 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %785 = tensor.empty() : tensor<384x32xf32>
    %transposed_1827 = linalg.transpose ins(%collapsed_1824 : tensor<32x384xf32>) outs(%785 : tensor<384x32xf32>) permutation = [1, 0] 
    %786 = tensor.empty() : tensor<384x32xf32>
    %787 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%786 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %788 = linalg.matmul ins(%collapsed_1825, %transposed_1827 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%787 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_1828 = arith.constant 0 : index
    %c384_1829 = arith.constant 384 : index
    %c384_1830 = arith.constant 384 : index
    %c768_1831 = arith.constant 768 : index
    %c384_1832 = arith.constant 384 : index
    %c768_1833 = arith.constant 768 : index
    %c1152_1834 = arith.constant 1152 : index
    %c384_1835 = arith.constant 384 : index
    %c1152_1836 = arith.constant 1152 : index
    %c1536_1837 = arith.constant 1536 : index
    %789 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1838 = tensor.insert_slice %776 into %789[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1839 = tensor.insert_slice %780 into %inserted_slice_1838[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1840 = tensor.insert_slice %784 into %inserted_slice_1839[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1841 = tensor.insert_slice %788 into %inserted_slice_1840[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1842 = tensor.expand_shape %inserted_slice_1841 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %790 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_1843 = linalg.transpose ins(%expanded_1842 : tensor<4x384x32xf32>) outs(%790 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_1844 = tensor.collapse_shape %transposed_1843 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_1845 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %791 = tensor.empty() : tensor<128x128xf32>
    %transposed_1846 = linalg.transpose ins(%cst_928 : tensor<128x128xf32>) outs(%791 : tensor<128x128xf32>) permutation = [1, 0] 
    %792 = tensor.empty() : tensor<384x128xf32>
    %793 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_927 : tensor<128xf32>) outs(%792 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %794 = linalg.matmul ins(%collapsed_1844, %transposed_1846 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%793 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1847 = tensor.expand_shape %794 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %795 = tensor.empty() : tensor<1x384x128xf32>
    %796 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1847, %expanded_1733 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%795 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %797 = tensor.empty() : tensor<1x384x128xf32>
    %798 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%796, %cst_240 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%797 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %799 = tensor.empty() : tensor<1x384x128xf32>
    %800 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%798, %cst_239 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%799 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1848 = tensor.collapse_shape %800 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1849 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %801 = tensor.empty() : tensor<128x512xf32>
    %transposed_1850 = linalg.transpose ins(%cst_926 : tensor<512x128xf32>) outs(%801 : tensor<128x512xf32>) permutation = [1, 0] 
    %802 = tensor.empty() : tensor<384x512xf32>
    %803 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_925 : tensor<512xf32>) outs(%802 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %804 = linalg.matmul ins(%collapsed_1848, %transposed_1850 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%803 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %805 = tensor.empty() : tensor<384x512xf32>
    %806 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%804 : tensor<384x512xf32>) outs(%805 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1851 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %807 = tensor.empty() : tensor<512x128xf32>
    %transposed_1852 = linalg.transpose ins(%cst_924 : tensor<128x512xf32>) outs(%807 : tensor<512x128xf32>) permutation = [1, 0] 
    %808 = tensor.empty() : tensor<384x128xf32>
    %809 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_923 : tensor<128xf32>) outs(%808 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %810 = linalg.matmul ins(%806, %transposed_1852 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%809 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1853 = tensor.expand_shape %810 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %811 = tensor.empty() : tensor<1x384x128xf32>
    %812 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1853, %800 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%811 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %813 = tensor.empty() : tensor<1x384x128xf32>
    %814 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%812, %cst_238 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%813 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %815 = tensor.empty() : tensor<1x384x128xf32>
    %816 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%814, %cst_237 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%815 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1854 = tensor.collapse_shape %816 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1855 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %817 = tensor.empty() : tensor<128x512xf32>
    %transposed_1856 = linalg.transpose ins(%cst_922 : tensor<512x128xf32>) outs(%817 : tensor<128x512xf32>) permutation = [1, 0] 
    %818 = tensor.empty() : tensor<384x512xf32>
    %819 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_921 : tensor<512xf32>) outs(%818 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %820 = linalg.matmul ins(%collapsed_1854, %transposed_1856 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%819 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %821 = tensor.empty() : tensor<384x512xf32>
    %822 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%820 : tensor<384x512xf32>) outs(%821 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1857 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %823 = tensor.empty() : tensor<512x128xf32>
    %transposed_1858 = linalg.transpose ins(%cst_920 : tensor<128x512xf32>) outs(%823 : tensor<512x128xf32>) permutation = [1, 0] 
    %824 = tensor.empty() : tensor<384x128xf32>
    %825 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_919 : tensor<128xf32>) outs(%824 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %826 = linalg.matmul ins(%822, %transposed_1858 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%825 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1859 = tensor.expand_shape %826 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %827 = tensor.empty() : tensor<1x384x128xf32>
    %828 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1859, %816 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%827 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %829 = tensor.empty() : tensor<1x384x128xf32>
    %830 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%828, %cst_236 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%829 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %831 = tensor.empty() : tensor<1x384x128xf32>
    %832 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%830, %cst_235 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%831 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1860 = tensor.collapse_shape %832 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1861 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %833 = tensor.empty() : tensor<128x512xf32>
    %transposed_1862 = linalg.transpose ins(%cst_918 : tensor<512x128xf32>) outs(%833 : tensor<128x512xf32>) permutation = [1, 0] 
    %834 = tensor.empty() : tensor<384x512xf32>
    %835 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_917 : tensor<512xf32>) outs(%834 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %836 = linalg.matmul ins(%collapsed_1860, %transposed_1862 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%835 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %837 = tensor.empty() : tensor<384x512xf32>
    %838 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%836 : tensor<384x512xf32>) outs(%837 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1863 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %839 = tensor.empty() : tensor<512x128xf32>
    %transposed_1864 = linalg.transpose ins(%cst_916 : tensor<128x512xf32>) outs(%839 : tensor<512x128xf32>) permutation = [1, 0] 
    %840 = tensor.empty() : tensor<384x128xf32>
    %841 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_915 : tensor<128xf32>) outs(%840 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %842 = linalg.matmul ins(%838, %transposed_1864 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%841 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1865 = tensor.expand_shape %842 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %843 = tensor.empty() : tensor<1x384x128xf32>
    %844 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1865, %832 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%843 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %845 = tensor.empty() : tensor<1x384x128xf32>
    %846 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%844, %cst_234 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%845 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %847 = tensor.empty() : tensor<1x384x128xf32>
    %848 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%846, %cst_233 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%847 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1866 = tensor.collapse_shape %848 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1867 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %849 = tensor.empty() : tensor<128x512xf32>
    %transposed_1868 = linalg.transpose ins(%cst_914 : tensor<512x128xf32>) outs(%849 : tensor<128x512xf32>) permutation = [1, 0] 
    %850 = tensor.empty() : tensor<384x512xf32>
    %851 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_913 : tensor<512xf32>) outs(%850 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %852 = linalg.matmul ins(%collapsed_1866, %transposed_1868 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%851 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %853 = tensor.empty() : tensor<384x512xf32>
    %854 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%852 : tensor<384x512xf32>) outs(%853 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_1869 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %855 = tensor.empty() : tensor<512x128xf32>
    %transposed_1870 = linalg.transpose ins(%cst_912 : tensor<128x512xf32>) outs(%855 : tensor<512x128xf32>) permutation = [1, 0] 
    %856 = tensor.empty() : tensor<384x128xf32>
    %857 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_911 : tensor<128xf32>) outs(%856 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %858 = linalg.matmul ins(%854, %transposed_1870 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%857 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1871 = tensor.expand_shape %858 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %859 = tensor.empty() : tensor<1x384x128xf32>
    %860 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1871, %848 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%859 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %861 = tensor.empty() : tensor<1x384x128xf32>
    %862 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%860, %cst_232 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%861 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %863 = tensor.empty() : tensor<1x384x128xf32>
    %864 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%862, %cst_231 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%863 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_1872 = tensor.collapse_shape %864 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_1873 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %865 = tensor.empty() : tensor<128x512xf32>
    %transposed_1874 = linalg.transpose ins(%cst_910 : tensor<512x128xf32>) outs(%865 : tensor<128x512xf32>) permutation = [1, 0] 
    %866 = tensor.empty() : tensor<384x512xf32>
    %867 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_909 : tensor<512xf32>) outs(%866 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %868 = linalg.matmul ins(%collapsed_1872, %transposed_1874 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%867 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_1875 = tensor.expand_shape %868 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %869 = tensor.empty() : tensor<1x384x512xf32>
    %870 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1875, %704 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%869 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %871 = tensor.empty() : tensor<1x384x512xf32>
    %872 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%870, %cst_230 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%871 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %873 = tensor.empty() : tensor<1x384x512xf32>
    %874 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%872, %cst_229 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%873 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_1876 = tensor.collapse_shape %874 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1877 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %875 = tensor.empty() : tensor<512x128xf32>
    %transposed_1878 = linalg.transpose ins(%cst_908 : tensor<128x512xf32>) outs(%875 : tensor<512x128xf32>) permutation = [1, 0] 
    %876 = tensor.empty() : tensor<384x128xf32>
    %877 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_907 : tensor<128xf32>) outs(%876 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %878 = linalg.matmul ins(%collapsed_1876, %transposed_1878 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%877 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1879 = tensor.collapse_shape %874 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1880 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %879 = tensor.empty() : tensor<512x128xf32>
    %transposed_1881 = linalg.transpose ins(%cst_906 : tensor<128x512xf32>) outs(%879 : tensor<512x128xf32>) permutation = [1, 0] 
    %880 = tensor.empty() : tensor<384x128xf32>
    %881 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_905 : tensor<128xf32>) outs(%880 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %882 = linalg.matmul ins(%collapsed_1879, %transposed_1881 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%881 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_1882 = tensor.collapse_shape %874 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_1883 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %883 = tensor.empty() : tensor<512x128xf32>
    %transposed_1884 = linalg.transpose ins(%cst_904 : tensor<128x512xf32>) outs(%883 : tensor<512x128xf32>) permutation = [1, 0] 
    %884 = tensor.empty() : tensor<384x128xf32>
    %885 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_903 : tensor<128xf32>) outs(%884 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %886 = linalg.matmul ins(%collapsed_1882, %transposed_1884 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%885 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1885 = tensor.expand_shape %878 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_1886 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %887 = tensor.empty() : tensor<128x128xf32>
    %transposed_1887 = linalg.transpose ins(%cst_902 : tensor<128x128xf32>) outs(%887 : tensor<128x128xf32>) permutation = [1, 0] 
    %888 = tensor.empty() : tensor<384x128xf32>
    %889 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_901 : tensor<128xf32>) outs(%888 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %890 = linalg.matmul ins(%882, %transposed_1887 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%889 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1888 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %891 = tensor.empty() : tensor<128x128xf32>
    %transposed_1889 = linalg.transpose ins(%cst_900 : tensor<128x128xf32>) outs(%891 : tensor<128x128xf32>) permutation = [1, 0] 
    %892 = tensor.empty() : tensor<384x128xf32>
    %893 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_899 : tensor<128xf32>) outs(%892 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %894 = linalg.matmul ins(%882, %transposed_1889 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%893 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_1890 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %895 = tensor.empty() : tensor<128x128xf32>
    %transposed_1891 = linalg.transpose ins(%cst_898 : tensor<128x128xf32>) outs(%895 : tensor<128x128xf32>) permutation = [1, 0] 
    %896 = tensor.empty() : tensor<384x128xf32>
    %897 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_897 : tensor<128xf32>) outs(%896 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %898 = linalg.matmul ins(%886, %transposed_1891 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%897 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1892 = tensor.expand_shape %890 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1893 = tensor.expand_shape %894 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_1894 = tensor.expand_shape %898 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %899 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1895 = linalg.transpose ins(%expanded_1892 : tensor<1x384x4x32xf32>) outs(%899 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %900 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_1896 = linalg.transpose ins(%expanded_1894 : tensor<1x384x4x32xf32>) outs(%900 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %901 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_1897 = linalg.transpose ins(%expanded_1893 : tensor<1x384x4x32xf32>) outs(%901 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_1898 = tensor.collapse_shape %transposed_1895 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1899 = tensor.extract_slice %collapsed_1898[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1900 = tensor.extract_slice %collapsed_1898[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1901 = tensor.extract_slice %collapsed_1898[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_1902 = tensor.extract_slice %collapsed_1898[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_1903 = tensor.collapse_shape %transposed_1897 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_1904 = tensor.extract_slice %collapsed_1903[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %902 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1905 = linalg.transpose ins(%extracted_slice_1904 : tensor<1x32x384xf32>) outs(%902 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1906 = tensor.extract_slice %collapsed_1903[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %903 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1907 = linalg.transpose ins(%extracted_slice_1906 : tensor<1x32x384xf32>) outs(%903 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1908 = tensor.extract_slice %collapsed_1903[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %904 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1909 = linalg.transpose ins(%extracted_slice_1908 : tensor<1x32x384xf32>) outs(%904 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1910 = tensor.extract_slice %collapsed_1903[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %905 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_1911 = linalg.transpose ins(%extracted_slice_1910 : tensor<1x32x384xf32>) outs(%905 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1912 = tensor.collapse_shape %transposed_1905 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1913 = tensor.collapse_shape %extracted_slice_1899 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1914 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %906 = tensor.empty() : tensor<32x384xf32>
    %transposed_1915 = linalg.transpose ins(%collapsed_1912 : tensor<384x32xf32>) outs(%906 : tensor<32x384xf32>) permutation = [1, 0] 
    %907 = tensor.empty() : tensor<384x384xf32>
    %908 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%907 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %909 = linalg.matmul ins(%collapsed_1913, %transposed_1915 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%908 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1916 = tensor.collapse_shape %transposed_1907 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1917 = tensor.collapse_shape %extracted_slice_1900 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1918 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %910 = tensor.empty() : tensor<32x384xf32>
    %transposed_1919 = linalg.transpose ins(%collapsed_1916 : tensor<384x32xf32>) outs(%910 : tensor<32x384xf32>) permutation = [1, 0] 
    %911 = tensor.empty() : tensor<384x384xf32>
    %912 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%911 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %913 = linalg.matmul ins(%collapsed_1917, %transposed_1919 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%912 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1920 = tensor.collapse_shape %transposed_1909 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1921 = tensor.collapse_shape %extracted_slice_1901 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1922 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %914 = tensor.empty() : tensor<32x384xf32>
    %transposed_1923 = linalg.transpose ins(%collapsed_1920 : tensor<384x32xf32>) outs(%914 : tensor<32x384xf32>) permutation = [1, 0] 
    %915 = tensor.empty() : tensor<384x384xf32>
    %916 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%915 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %917 = linalg.matmul ins(%collapsed_1921, %transposed_1923 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%916 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_1924 = tensor.collapse_shape %transposed_1911 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_1925 = tensor.collapse_shape %extracted_slice_1902 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_1926 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %918 = tensor.empty() : tensor<32x384xf32>
    %transposed_1927 = linalg.transpose ins(%collapsed_1924 : tensor<384x32xf32>) outs(%918 : tensor<32x384xf32>) permutation = [1, 0] 
    %919 = tensor.empty() : tensor<384x384xf32>
    %920 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%919 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %921 = linalg.matmul ins(%collapsed_1925, %transposed_1927 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%920 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_1928 = arith.constant 0 : index
    %c384_1929 = arith.constant 384 : index
    %c384_1930 = arith.constant 384 : index
    %c768_1931 = arith.constant 768 : index
    %c384_1932 = arith.constant 384 : index
    %c768_1933 = arith.constant 768 : index
    %c1152_1934 = arith.constant 1152 : index
    %c384_1935 = arith.constant 384 : index
    %c1152_1936 = arith.constant 1152 : index
    %c1536_1937 = arith.constant 1536 : index
    %922 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_1938 = tensor.insert_slice %909 into %922[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1939 = tensor.insert_slice %913 into %inserted_slice_1938[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1940 = tensor.insert_slice %917 into %inserted_slice_1939[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_1941 = tensor.insert_slice %921 into %inserted_slice_1940[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_1942 = tensor.expand_shape %inserted_slice_1941 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %923 = tensor.empty() : tensor<4x384x384xf32>
    %924 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1942, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%923 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_1943 = tensor.expand_shape %924 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %925 = tensor.empty() : tensor<1x4x384x384xf32>
    %926 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1943, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%925 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %927 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1944 = arith.constant -3.40282347E+38 : f32
    %928 = linalg.fill ins(%cst_1944 : f32) outs(%927 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1945 = linalg.reduce ins(%926 : tensor<1x4x384x384xf32>) outs(%928 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1946 = tensor.expand_shape %reduced_1945 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %929 = tensor.empty() : tensor<1x4x384x384xf32>
    %930 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%926, %expanded_1946 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%929 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %931 = tensor.empty() : tensor<1x4x384x384xf32>
    %932 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%930 : tensor<1x4x384x384xf32>) outs(%931 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %933 = tensor.empty() : tensor<1x4x384xf32>
    %cst_1947 = arith.constant 0.000000e+00 : f32
    %934 = linalg.fill ins(%cst_1947 : f32) outs(%933 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_1948 = linalg.reduce ins(%932 : tensor<1x4x384x384xf32>) outs(%934 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_1949 = tensor.expand_shape %reduced_1948 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %935 = tensor.empty() : tensor<1x4x384x1xf32>
    %936 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1949 : tensor<1x4x384x1xf32>) outs(%935 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %937 = tensor.empty() : tensor<1x4x384x384xf32>
    %938 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%932, %936 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%937 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_1950 = tensor.collapse_shape %938 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_1951 = tensor.extract_slice %collapsed_1950[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1952 = tensor.extract_slice %collapsed_1950[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1953 = tensor.extract_slice %collapsed_1950[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_1954 = tensor.extract_slice %collapsed_1950[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_1955 = tensor.collapse_shape %transposed_1896 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_1956 = tensor.extract_slice %collapsed_1955[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %939 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1957 = linalg.transpose ins(%extracted_slice_1956 : tensor<1x384x32xf32>) outs(%939 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1958 = tensor.extract_slice %collapsed_1955[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %940 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1959 = linalg.transpose ins(%extracted_slice_1958 : tensor<1x384x32xf32>) outs(%940 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1960 = tensor.extract_slice %collapsed_1955[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %941 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1961 = linalg.transpose ins(%extracted_slice_1960 : tensor<1x384x32xf32>) outs(%941 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_1962 = tensor.extract_slice %collapsed_1955[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %942 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_1963 = linalg.transpose ins(%extracted_slice_1962 : tensor<1x384x32xf32>) outs(%942 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_1964 = tensor.collapse_shape %transposed_1957 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1965 = tensor.collapse_shape %extracted_slice_1951 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1966 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %943 = tensor.empty() : tensor<384x32xf32>
    %transposed_1967 = linalg.transpose ins(%collapsed_1964 : tensor<32x384xf32>) outs(%943 : tensor<384x32xf32>) permutation = [1, 0] 
    %944 = tensor.empty() : tensor<384x32xf32>
    %945 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%944 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %946 = linalg.matmul ins(%collapsed_1965, %transposed_1967 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%945 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1968 = tensor.collapse_shape %transposed_1959 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1969 = tensor.collapse_shape %extracted_slice_1952 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1970 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %947 = tensor.empty() : tensor<384x32xf32>
    %transposed_1971 = linalg.transpose ins(%collapsed_1968 : tensor<32x384xf32>) outs(%947 : tensor<384x32xf32>) permutation = [1, 0] 
    %948 = tensor.empty() : tensor<384x32xf32>
    %949 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%948 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %950 = linalg.matmul ins(%collapsed_1969, %transposed_1971 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%949 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1972 = tensor.collapse_shape %transposed_1961 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1973 = tensor.collapse_shape %extracted_slice_1953 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1974 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %951 = tensor.empty() : tensor<384x32xf32>
    %transposed_1975 = linalg.transpose ins(%collapsed_1972 : tensor<32x384xf32>) outs(%951 : tensor<384x32xf32>) permutation = [1, 0] 
    %952 = tensor.empty() : tensor<384x32xf32>
    %953 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%952 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %954 = linalg.matmul ins(%collapsed_1973, %transposed_1975 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%953 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_1976 = tensor.collapse_shape %transposed_1963 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_1977 = tensor.collapse_shape %extracted_slice_1954 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_1978 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %955 = tensor.empty() : tensor<384x32xf32>
    %transposed_1979 = linalg.transpose ins(%collapsed_1976 : tensor<32x384xf32>) outs(%955 : tensor<384x32xf32>) permutation = [1, 0] 
    %956 = tensor.empty() : tensor<384x32xf32>
    %957 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%956 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %958 = linalg.matmul ins(%collapsed_1977, %transposed_1979 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%957 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_1980 = arith.constant 0 : index
    %c384_1981 = arith.constant 384 : index
    %c384_1982 = arith.constant 384 : index
    %c768_1983 = arith.constant 768 : index
    %c384_1984 = arith.constant 384 : index
    %c768_1985 = arith.constant 768 : index
    %c1152_1986 = arith.constant 1152 : index
    %c384_1987 = arith.constant 384 : index
    %c1152_1988 = arith.constant 1152 : index
    %c1536_1989 = arith.constant 1536 : index
    %959 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_1990 = tensor.insert_slice %946 into %959[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1991 = tensor.insert_slice %950 into %inserted_slice_1990[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1992 = tensor.insert_slice %954 into %inserted_slice_1991[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_1993 = tensor.insert_slice %958 into %inserted_slice_1992[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_1994 = tensor.expand_shape %inserted_slice_1993 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %960 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_1995 = linalg.transpose ins(%expanded_1994 : tensor<4x384x32xf32>) outs(%960 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_1996 = tensor.collapse_shape %transposed_1995 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_1997 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %961 = tensor.empty() : tensor<128x128xf32>
    %transposed_1998 = linalg.transpose ins(%cst_896 : tensor<128x128xf32>) outs(%961 : tensor<128x128xf32>) permutation = [1, 0] 
    %962 = tensor.empty() : tensor<384x128xf32>
    %963 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_895 : tensor<128xf32>) outs(%962 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %964 = linalg.matmul ins(%collapsed_1996, %transposed_1998 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%963 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_1999 = tensor.expand_shape %964 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %965 = tensor.empty() : tensor<1x384x128xf32>
    %966 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1999, %expanded_1885 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%965 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %967 = tensor.empty() : tensor<1x384x128xf32>
    %968 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%966, %cst_228 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%967 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %969 = tensor.empty() : tensor<1x384x128xf32>
    %970 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%968, %cst_227 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%969 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2000 = tensor.collapse_shape %970 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2001 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %971 = tensor.empty() : tensor<128x512xf32>
    %transposed_2002 = linalg.transpose ins(%cst_894 : tensor<512x128xf32>) outs(%971 : tensor<128x512xf32>) permutation = [1, 0] 
    %972 = tensor.empty() : tensor<384x512xf32>
    %973 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_893 : tensor<512xf32>) outs(%972 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %974 = linalg.matmul ins(%collapsed_2000, %transposed_2002 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%973 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %975 = tensor.empty() : tensor<384x512xf32>
    %976 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%974 : tensor<384x512xf32>) outs(%975 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2003 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %977 = tensor.empty() : tensor<512x128xf32>
    %transposed_2004 = linalg.transpose ins(%cst_892 : tensor<128x512xf32>) outs(%977 : tensor<512x128xf32>) permutation = [1, 0] 
    %978 = tensor.empty() : tensor<384x128xf32>
    %979 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_891 : tensor<128xf32>) outs(%978 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %980 = linalg.matmul ins(%976, %transposed_2004 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%979 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2005 = tensor.expand_shape %980 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %981 = tensor.empty() : tensor<1x384x128xf32>
    %982 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2005, %970 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%981 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %983 = tensor.empty() : tensor<1x384x128xf32>
    %984 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%982, %cst_226 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%983 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %985 = tensor.empty() : tensor<1x384x128xf32>
    %986 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%984, %cst_225 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%985 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2006 = tensor.collapse_shape %986 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2007 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %987 = tensor.empty() : tensor<128x512xf32>
    %transposed_2008 = linalg.transpose ins(%cst_890 : tensor<512x128xf32>) outs(%987 : tensor<128x512xf32>) permutation = [1, 0] 
    %988 = tensor.empty() : tensor<384x512xf32>
    %989 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_889 : tensor<512xf32>) outs(%988 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %990 = linalg.matmul ins(%collapsed_2006, %transposed_2008 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%989 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %991 = tensor.empty() : tensor<384x512xf32>
    %992 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%990 : tensor<384x512xf32>) outs(%991 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2009 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %993 = tensor.empty() : tensor<512x128xf32>
    %transposed_2010 = linalg.transpose ins(%cst_888 : tensor<128x512xf32>) outs(%993 : tensor<512x128xf32>) permutation = [1, 0] 
    %994 = tensor.empty() : tensor<384x128xf32>
    %995 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_887 : tensor<128xf32>) outs(%994 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %996 = linalg.matmul ins(%992, %transposed_2010 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%995 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2011 = tensor.expand_shape %996 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %997 = tensor.empty() : tensor<1x384x128xf32>
    %998 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2011, %986 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%997 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %999 = tensor.empty() : tensor<1x384x128xf32>
    %1000 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%998, %cst_224 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%999 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1001 = tensor.empty() : tensor<1x384x128xf32>
    %1002 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1000, %cst_223 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1001 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2012 = tensor.collapse_shape %1002 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2013 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1003 = tensor.empty() : tensor<128x512xf32>
    %transposed_2014 = linalg.transpose ins(%cst_886 : tensor<512x128xf32>) outs(%1003 : tensor<128x512xf32>) permutation = [1, 0] 
    %1004 = tensor.empty() : tensor<384x512xf32>
    %1005 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_885 : tensor<512xf32>) outs(%1004 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1006 = linalg.matmul ins(%collapsed_2012, %transposed_2014 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1005 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1007 = tensor.empty() : tensor<384x512xf32>
    %1008 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1006 : tensor<384x512xf32>) outs(%1007 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2015 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1009 = tensor.empty() : tensor<512x128xf32>
    %transposed_2016 = linalg.transpose ins(%cst_884 : tensor<128x512xf32>) outs(%1009 : tensor<512x128xf32>) permutation = [1, 0] 
    %1010 = tensor.empty() : tensor<384x128xf32>
    %1011 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_883 : tensor<128xf32>) outs(%1010 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1012 = linalg.matmul ins(%1008, %transposed_2016 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1011 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2017 = tensor.expand_shape %1012 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1013 = tensor.empty() : tensor<1x384x128xf32>
    %1014 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2017, %1002 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1013 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1015 = tensor.empty() : tensor<1x384x128xf32>
    %1016 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1014, %cst_222 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1015 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1017 = tensor.empty() : tensor<1x384x128xf32>
    %1018 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1016, %cst_221 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1017 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2018 = tensor.collapse_shape %1018 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2019 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1019 = tensor.empty() : tensor<128x512xf32>
    %transposed_2020 = linalg.transpose ins(%cst_882 : tensor<512x128xf32>) outs(%1019 : tensor<128x512xf32>) permutation = [1, 0] 
    %1020 = tensor.empty() : tensor<384x512xf32>
    %1021 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_881 : tensor<512xf32>) outs(%1020 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1022 = linalg.matmul ins(%collapsed_2018, %transposed_2020 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1021 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1023 = tensor.empty() : tensor<384x512xf32>
    %1024 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1022 : tensor<384x512xf32>) outs(%1023 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2021 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1025 = tensor.empty() : tensor<512x128xf32>
    %transposed_2022 = linalg.transpose ins(%cst_880 : tensor<128x512xf32>) outs(%1025 : tensor<512x128xf32>) permutation = [1, 0] 
    %1026 = tensor.empty() : tensor<384x128xf32>
    %1027 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_879 : tensor<128xf32>) outs(%1026 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1028 = linalg.matmul ins(%1024, %transposed_2022 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1027 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2023 = tensor.expand_shape %1028 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1029 = tensor.empty() : tensor<1x384x128xf32>
    %1030 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2023, %1018 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1029 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1031 = tensor.empty() : tensor<1x384x128xf32>
    %1032 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1030, %cst_220 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1031 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1033 = tensor.empty() : tensor<1x384x128xf32>
    %1034 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1032, %cst_219 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1033 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2024 = tensor.collapse_shape %1034 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2025 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1035 = tensor.empty() : tensor<128x512xf32>
    %transposed_2026 = linalg.transpose ins(%cst_878 : tensor<512x128xf32>) outs(%1035 : tensor<128x512xf32>) permutation = [1, 0] 
    %1036 = tensor.empty() : tensor<384x512xf32>
    %1037 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_877 : tensor<512xf32>) outs(%1036 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1038 = linalg.matmul ins(%collapsed_2024, %transposed_2026 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1037 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2027 = tensor.expand_shape %1038 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1039 = tensor.empty() : tensor<1x384x512xf32>
    %1040 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2027, %874 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1039 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1041 = tensor.empty() : tensor<1x384x512xf32>
    %1042 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1040, %cst_218 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1041 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1043 = tensor.empty() : tensor<1x384x512xf32>
    %1044 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1042, %cst_217 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1043 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2028 = tensor.collapse_shape %1044 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2029 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1045 = tensor.empty() : tensor<512x128xf32>
    %transposed_2030 = linalg.transpose ins(%cst_876 : tensor<128x512xf32>) outs(%1045 : tensor<512x128xf32>) permutation = [1, 0] 
    %1046 = tensor.empty() : tensor<384x128xf32>
    %1047 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_875 : tensor<128xf32>) outs(%1046 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1048 = linalg.matmul ins(%collapsed_2028, %transposed_2030 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1047 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2031 = tensor.collapse_shape %1044 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2032 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1049 = tensor.empty() : tensor<512x128xf32>
    %transposed_2033 = linalg.transpose ins(%cst_874 : tensor<128x512xf32>) outs(%1049 : tensor<512x128xf32>) permutation = [1, 0] 
    %1050 = tensor.empty() : tensor<384x128xf32>
    %1051 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_873 : tensor<128xf32>) outs(%1050 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1052 = linalg.matmul ins(%collapsed_2031, %transposed_2033 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1051 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2034 = tensor.collapse_shape %1044 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2035 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1053 = tensor.empty() : tensor<512x128xf32>
    %transposed_2036 = linalg.transpose ins(%cst_872 : tensor<128x512xf32>) outs(%1053 : tensor<512x128xf32>) permutation = [1, 0] 
    %1054 = tensor.empty() : tensor<384x128xf32>
    %1055 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_871 : tensor<128xf32>) outs(%1054 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1056 = linalg.matmul ins(%collapsed_2034, %transposed_2036 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1055 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2037 = tensor.expand_shape %1048 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2038 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1057 = tensor.empty() : tensor<128x128xf32>
    %transposed_2039 = linalg.transpose ins(%cst_870 : tensor<128x128xf32>) outs(%1057 : tensor<128x128xf32>) permutation = [1, 0] 
    %1058 = tensor.empty() : tensor<384x128xf32>
    %1059 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_869 : tensor<128xf32>) outs(%1058 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1060 = linalg.matmul ins(%1052, %transposed_2039 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1059 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2040 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1061 = tensor.empty() : tensor<128x128xf32>
    %transposed_2041 = linalg.transpose ins(%cst_868 : tensor<128x128xf32>) outs(%1061 : tensor<128x128xf32>) permutation = [1, 0] 
    %1062 = tensor.empty() : tensor<384x128xf32>
    %1063 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_867 : tensor<128xf32>) outs(%1062 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1064 = linalg.matmul ins(%1052, %transposed_2041 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1063 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2042 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1065 = tensor.empty() : tensor<128x128xf32>
    %transposed_2043 = linalg.transpose ins(%cst_866 : tensor<128x128xf32>) outs(%1065 : tensor<128x128xf32>) permutation = [1, 0] 
    %1066 = tensor.empty() : tensor<384x128xf32>
    %1067 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_865 : tensor<128xf32>) outs(%1066 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1068 = linalg.matmul ins(%1056, %transposed_2043 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1067 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2044 = tensor.expand_shape %1060 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2045 = tensor.expand_shape %1064 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2046 = tensor.expand_shape %1068 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1069 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2047 = linalg.transpose ins(%expanded_2044 : tensor<1x384x4x32xf32>) outs(%1069 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1070 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2048 = linalg.transpose ins(%expanded_2046 : tensor<1x384x4x32xf32>) outs(%1070 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1071 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2049 = linalg.transpose ins(%expanded_2045 : tensor<1x384x4x32xf32>) outs(%1071 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2050 = tensor.collapse_shape %transposed_2047 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2051 = tensor.extract_slice %collapsed_2050[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2052 = tensor.extract_slice %collapsed_2050[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2053 = tensor.extract_slice %collapsed_2050[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2054 = tensor.extract_slice %collapsed_2050[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2055 = tensor.collapse_shape %transposed_2049 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2056 = tensor.extract_slice %collapsed_2055[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1072 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2057 = linalg.transpose ins(%extracted_slice_2056 : tensor<1x32x384xf32>) outs(%1072 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2058 = tensor.extract_slice %collapsed_2055[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1073 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2059 = linalg.transpose ins(%extracted_slice_2058 : tensor<1x32x384xf32>) outs(%1073 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2060 = tensor.extract_slice %collapsed_2055[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1074 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2061 = linalg.transpose ins(%extracted_slice_2060 : tensor<1x32x384xf32>) outs(%1074 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2062 = tensor.extract_slice %collapsed_2055[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1075 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2063 = linalg.transpose ins(%extracted_slice_2062 : tensor<1x32x384xf32>) outs(%1075 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2064 = tensor.collapse_shape %transposed_2057 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2065 = tensor.collapse_shape %extracted_slice_2051 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2066 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1076 = tensor.empty() : tensor<32x384xf32>
    %transposed_2067 = linalg.transpose ins(%collapsed_2064 : tensor<384x32xf32>) outs(%1076 : tensor<32x384xf32>) permutation = [1, 0] 
    %1077 = tensor.empty() : tensor<384x384xf32>
    %1078 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1077 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1079 = linalg.matmul ins(%collapsed_2065, %transposed_2067 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1078 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2068 = tensor.collapse_shape %transposed_2059 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2069 = tensor.collapse_shape %extracted_slice_2052 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2070 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1080 = tensor.empty() : tensor<32x384xf32>
    %transposed_2071 = linalg.transpose ins(%collapsed_2068 : tensor<384x32xf32>) outs(%1080 : tensor<32x384xf32>) permutation = [1, 0] 
    %1081 = tensor.empty() : tensor<384x384xf32>
    %1082 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1081 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1083 = linalg.matmul ins(%collapsed_2069, %transposed_2071 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1082 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2072 = tensor.collapse_shape %transposed_2061 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2073 = tensor.collapse_shape %extracted_slice_2053 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2074 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1084 = tensor.empty() : tensor<32x384xf32>
    %transposed_2075 = linalg.transpose ins(%collapsed_2072 : tensor<384x32xf32>) outs(%1084 : tensor<32x384xf32>) permutation = [1, 0] 
    %1085 = tensor.empty() : tensor<384x384xf32>
    %1086 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1085 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1087 = linalg.matmul ins(%collapsed_2073, %transposed_2075 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1086 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2076 = tensor.collapse_shape %transposed_2063 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2077 = tensor.collapse_shape %extracted_slice_2054 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2078 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1088 = tensor.empty() : tensor<32x384xf32>
    %transposed_2079 = linalg.transpose ins(%collapsed_2076 : tensor<384x32xf32>) outs(%1088 : tensor<32x384xf32>) permutation = [1, 0] 
    %1089 = tensor.empty() : tensor<384x384xf32>
    %1090 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1089 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1091 = linalg.matmul ins(%collapsed_2077, %transposed_2079 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1090 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2080 = arith.constant 0 : index
    %c384_2081 = arith.constant 384 : index
    %c384_2082 = arith.constant 384 : index
    %c768_2083 = arith.constant 768 : index
    %c384_2084 = arith.constant 384 : index
    %c768_2085 = arith.constant 768 : index
    %c1152_2086 = arith.constant 1152 : index
    %c384_2087 = arith.constant 384 : index
    %c1152_2088 = arith.constant 1152 : index
    %c1536_2089 = arith.constant 1536 : index
    %1092 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2090 = tensor.insert_slice %1079 into %1092[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2091 = tensor.insert_slice %1083 into %inserted_slice_2090[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2092 = tensor.insert_slice %1087 into %inserted_slice_2091[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2093 = tensor.insert_slice %1091 into %inserted_slice_2092[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2094 = tensor.expand_shape %inserted_slice_2093 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %1093 = tensor.empty() : tensor<4x384x384xf32>
    %1094 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2094, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%1093 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_2095 = tensor.expand_shape %1094 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %1095 = tensor.empty() : tensor<1x4x384x384xf32>
    %1096 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2095, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%1095 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1097 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2096 = arith.constant -3.40282347E+38 : f32
    %1098 = linalg.fill ins(%cst_2096 : f32) outs(%1097 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2097 = linalg.reduce ins(%1096 : tensor<1x4x384x384xf32>) outs(%1098 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2098 = tensor.expand_shape %reduced_2097 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1099 = tensor.empty() : tensor<1x4x384x384xf32>
    %1100 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1096, %expanded_2098 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1099 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1101 = tensor.empty() : tensor<1x4x384x384xf32>
    %1102 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1100 : tensor<1x4x384x384xf32>) outs(%1101 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1103 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2099 = arith.constant 0.000000e+00 : f32
    %1104 = linalg.fill ins(%cst_2099 : f32) outs(%1103 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2100 = linalg.reduce ins(%1102 : tensor<1x4x384x384xf32>) outs(%1104 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2101 = tensor.expand_shape %reduced_2100 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1105 = tensor.empty() : tensor<1x4x384x1xf32>
    %1106 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2101 : tensor<1x4x384x1xf32>) outs(%1105 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %1107 = tensor.empty() : tensor<1x4x384x384xf32>
    %1108 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1102, %1106 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1107 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_2102 = tensor.collapse_shape %1108 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2103 = tensor.extract_slice %collapsed_2102[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2104 = tensor.extract_slice %collapsed_2102[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2105 = tensor.extract_slice %collapsed_2102[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2106 = tensor.extract_slice %collapsed_2102[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2107 = tensor.collapse_shape %transposed_2048 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2108 = tensor.extract_slice %collapsed_2107[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1109 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2109 = linalg.transpose ins(%extracted_slice_2108 : tensor<1x384x32xf32>) outs(%1109 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2110 = tensor.extract_slice %collapsed_2107[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1110 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2111 = linalg.transpose ins(%extracted_slice_2110 : tensor<1x384x32xf32>) outs(%1110 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2112 = tensor.extract_slice %collapsed_2107[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1111 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2113 = linalg.transpose ins(%extracted_slice_2112 : tensor<1x384x32xf32>) outs(%1111 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2114 = tensor.extract_slice %collapsed_2107[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1112 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2115 = linalg.transpose ins(%extracted_slice_2114 : tensor<1x384x32xf32>) outs(%1112 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2116 = tensor.collapse_shape %transposed_2109 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2117 = tensor.collapse_shape %extracted_slice_2103 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2118 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1113 = tensor.empty() : tensor<384x32xf32>
    %transposed_2119 = linalg.transpose ins(%collapsed_2116 : tensor<32x384xf32>) outs(%1113 : tensor<384x32xf32>) permutation = [1, 0] 
    %1114 = tensor.empty() : tensor<384x32xf32>
    %1115 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1114 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1116 = linalg.matmul ins(%collapsed_2117, %transposed_2119 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1115 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2120 = tensor.collapse_shape %transposed_2111 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2121 = tensor.collapse_shape %extracted_slice_2104 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2122 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1117 = tensor.empty() : tensor<384x32xf32>
    %transposed_2123 = linalg.transpose ins(%collapsed_2120 : tensor<32x384xf32>) outs(%1117 : tensor<384x32xf32>) permutation = [1, 0] 
    %1118 = tensor.empty() : tensor<384x32xf32>
    %1119 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1118 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1120 = linalg.matmul ins(%collapsed_2121, %transposed_2123 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1119 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2124 = tensor.collapse_shape %transposed_2113 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2125 = tensor.collapse_shape %extracted_slice_2105 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2126 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1121 = tensor.empty() : tensor<384x32xf32>
    %transposed_2127 = linalg.transpose ins(%collapsed_2124 : tensor<32x384xf32>) outs(%1121 : tensor<384x32xf32>) permutation = [1, 0] 
    %1122 = tensor.empty() : tensor<384x32xf32>
    %1123 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1122 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1124 = linalg.matmul ins(%collapsed_2125, %transposed_2127 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1123 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2128 = tensor.collapse_shape %transposed_2115 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2129 = tensor.collapse_shape %extracted_slice_2106 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2130 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1125 = tensor.empty() : tensor<384x32xf32>
    %transposed_2131 = linalg.transpose ins(%collapsed_2128 : tensor<32x384xf32>) outs(%1125 : tensor<384x32xf32>) permutation = [1, 0] 
    %1126 = tensor.empty() : tensor<384x32xf32>
    %1127 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1126 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1128 = linalg.matmul ins(%collapsed_2129, %transposed_2131 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1127 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_2132 = arith.constant 0 : index
    %c384_2133 = arith.constant 384 : index
    %c384_2134 = arith.constant 384 : index
    %c768_2135 = arith.constant 768 : index
    %c384_2136 = arith.constant 384 : index
    %c768_2137 = arith.constant 768 : index
    %c1152_2138 = arith.constant 1152 : index
    %c384_2139 = arith.constant 384 : index
    %c1152_2140 = arith.constant 1152 : index
    %c1536_2141 = arith.constant 1536 : index
    %1129 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2142 = tensor.insert_slice %1116 into %1129[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2143 = tensor.insert_slice %1120 into %inserted_slice_2142[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2144 = tensor.insert_slice %1124 into %inserted_slice_2143[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2145 = tensor.insert_slice %1128 into %inserted_slice_2144[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2146 = tensor.expand_shape %inserted_slice_2145 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %1130 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_2147 = linalg.transpose ins(%expanded_2146 : tensor<4x384x32xf32>) outs(%1130 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_2148 = tensor.collapse_shape %transposed_2147 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_2149 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1131 = tensor.empty() : tensor<128x128xf32>
    %transposed_2150 = linalg.transpose ins(%cst_864 : tensor<128x128xf32>) outs(%1131 : tensor<128x128xf32>) permutation = [1, 0] 
    %1132 = tensor.empty() : tensor<384x128xf32>
    %1133 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_863 : tensor<128xf32>) outs(%1132 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1134 = linalg.matmul ins(%collapsed_2148, %transposed_2150 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1133 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2151 = tensor.expand_shape %1134 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1135 = tensor.empty() : tensor<1x384x128xf32>
    %1136 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2151, %expanded_2037 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1135 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1137 = tensor.empty() : tensor<1x384x128xf32>
    %1138 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1136, %cst_216 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1137 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1139 = tensor.empty() : tensor<1x384x128xf32>
    %1140 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1138, %cst_215 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1139 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2152 = tensor.collapse_shape %1140 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2153 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1141 = tensor.empty() : tensor<128x512xf32>
    %transposed_2154 = linalg.transpose ins(%cst_862 : tensor<512x128xf32>) outs(%1141 : tensor<128x512xf32>) permutation = [1, 0] 
    %1142 = tensor.empty() : tensor<384x512xf32>
    %1143 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_861 : tensor<512xf32>) outs(%1142 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1144 = linalg.matmul ins(%collapsed_2152, %transposed_2154 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1143 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1145 = tensor.empty() : tensor<384x512xf32>
    %1146 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1144 : tensor<384x512xf32>) outs(%1145 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2155 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1147 = tensor.empty() : tensor<512x128xf32>
    %transposed_2156 = linalg.transpose ins(%cst_860 : tensor<128x512xf32>) outs(%1147 : tensor<512x128xf32>) permutation = [1, 0] 
    %1148 = tensor.empty() : tensor<384x128xf32>
    %1149 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_859 : tensor<128xf32>) outs(%1148 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1150 = linalg.matmul ins(%1146, %transposed_2156 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1149 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2157 = tensor.expand_shape %1150 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1151 = tensor.empty() : tensor<1x384x128xf32>
    %1152 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2157, %1140 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1151 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1153 = tensor.empty() : tensor<1x384x128xf32>
    %1154 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1152, %cst_214 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1153 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1155 = tensor.empty() : tensor<1x384x128xf32>
    %1156 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1154, %cst_213 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1155 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2158 = tensor.collapse_shape %1156 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2159 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1157 = tensor.empty() : tensor<128x512xf32>
    %transposed_2160 = linalg.transpose ins(%cst_858 : tensor<512x128xf32>) outs(%1157 : tensor<128x512xf32>) permutation = [1, 0] 
    %1158 = tensor.empty() : tensor<384x512xf32>
    %1159 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_857 : tensor<512xf32>) outs(%1158 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1160 = linalg.matmul ins(%collapsed_2158, %transposed_2160 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1159 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1161 = tensor.empty() : tensor<384x512xf32>
    %1162 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1160 : tensor<384x512xf32>) outs(%1161 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2161 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1163 = tensor.empty() : tensor<512x128xf32>
    %transposed_2162 = linalg.transpose ins(%cst_856 : tensor<128x512xf32>) outs(%1163 : tensor<512x128xf32>) permutation = [1, 0] 
    %1164 = tensor.empty() : tensor<384x128xf32>
    %1165 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_855 : tensor<128xf32>) outs(%1164 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1166 = linalg.matmul ins(%1162, %transposed_2162 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1165 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2163 = tensor.expand_shape %1166 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1167 = tensor.empty() : tensor<1x384x128xf32>
    %1168 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2163, %1156 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1167 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1169 = tensor.empty() : tensor<1x384x128xf32>
    %1170 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1168, %cst_212 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1169 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1171 = tensor.empty() : tensor<1x384x128xf32>
    %1172 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1170, %cst_211 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1171 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2164 = tensor.collapse_shape %1172 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2165 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1173 = tensor.empty() : tensor<128x512xf32>
    %transposed_2166 = linalg.transpose ins(%cst_854 : tensor<512x128xf32>) outs(%1173 : tensor<128x512xf32>) permutation = [1, 0] 
    %1174 = tensor.empty() : tensor<384x512xf32>
    %1175 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_853 : tensor<512xf32>) outs(%1174 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1176 = linalg.matmul ins(%collapsed_2164, %transposed_2166 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1175 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1177 = tensor.empty() : tensor<384x512xf32>
    %1178 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1176 : tensor<384x512xf32>) outs(%1177 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2167 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1179 = tensor.empty() : tensor<512x128xf32>
    %transposed_2168 = linalg.transpose ins(%cst_852 : tensor<128x512xf32>) outs(%1179 : tensor<512x128xf32>) permutation = [1, 0] 
    %1180 = tensor.empty() : tensor<384x128xf32>
    %1181 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_851 : tensor<128xf32>) outs(%1180 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1182 = linalg.matmul ins(%1178, %transposed_2168 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1181 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2169 = tensor.expand_shape %1182 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1183 = tensor.empty() : tensor<1x384x128xf32>
    %1184 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2169, %1172 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1183 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1185 = tensor.empty() : tensor<1x384x128xf32>
    %1186 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1184, %cst_210 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1185 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1187 = tensor.empty() : tensor<1x384x128xf32>
    %1188 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1186, %cst_209 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1187 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2170 = tensor.collapse_shape %1188 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2171 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1189 = tensor.empty() : tensor<128x512xf32>
    %transposed_2172 = linalg.transpose ins(%cst_850 : tensor<512x128xf32>) outs(%1189 : tensor<128x512xf32>) permutation = [1, 0] 
    %1190 = tensor.empty() : tensor<384x512xf32>
    %1191 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_849 : tensor<512xf32>) outs(%1190 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1192 = linalg.matmul ins(%collapsed_2170, %transposed_2172 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1191 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1193 = tensor.empty() : tensor<384x512xf32>
    %1194 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1192 : tensor<384x512xf32>) outs(%1193 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2173 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1195 = tensor.empty() : tensor<512x128xf32>
    %transposed_2174 = linalg.transpose ins(%cst_848 : tensor<128x512xf32>) outs(%1195 : tensor<512x128xf32>) permutation = [1, 0] 
    %1196 = tensor.empty() : tensor<384x128xf32>
    %1197 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_847 : tensor<128xf32>) outs(%1196 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1198 = linalg.matmul ins(%1194, %transposed_2174 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1197 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2175 = tensor.expand_shape %1198 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1199 = tensor.empty() : tensor<1x384x128xf32>
    %1200 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2175, %1188 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1199 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1201 = tensor.empty() : tensor<1x384x128xf32>
    %1202 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1200, %cst_208 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1201 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1203 = tensor.empty() : tensor<1x384x128xf32>
    %1204 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1202, %cst_207 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1203 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2176 = tensor.collapse_shape %1204 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2177 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1205 = tensor.empty() : tensor<128x512xf32>
    %transposed_2178 = linalg.transpose ins(%cst_846 : tensor<512x128xf32>) outs(%1205 : tensor<128x512xf32>) permutation = [1, 0] 
    %1206 = tensor.empty() : tensor<384x512xf32>
    %1207 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_845 : tensor<512xf32>) outs(%1206 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1208 = linalg.matmul ins(%collapsed_2176, %transposed_2178 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1207 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2179 = tensor.expand_shape %1208 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1209 = tensor.empty() : tensor<1x384x512xf32>
    %1210 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2179, %1044 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1209 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1211 = tensor.empty() : tensor<1x384x512xf32>
    %1212 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1210, %cst_206 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1211 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1213 = tensor.empty() : tensor<1x384x512xf32>
    %1214 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1212, %cst_205 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1213 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2180 = tensor.collapse_shape %1214 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2181 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1215 = tensor.empty() : tensor<512x128xf32>
    %transposed_2182 = linalg.transpose ins(%cst_844 : tensor<128x512xf32>) outs(%1215 : tensor<512x128xf32>) permutation = [1, 0] 
    %1216 = tensor.empty() : tensor<384x128xf32>
    %1217 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_843 : tensor<128xf32>) outs(%1216 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1218 = linalg.matmul ins(%collapsed_2180, %transposed_2182 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1217 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2183 = tensor.collapse_shape %1214 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2184 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1219 = tensor.empty() : tensor<512x128xf32>
    %transposed_2185 = linalg.transpose ins(%cst_842 : tensor<128x512xf32>) outs(%1219 : tensor<512x128xf32>) permutation = [1, 0] 
    %1220 = tensor.empty() : tensor<384x128xf32>
    %1221 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_841 : tensor<128xf32>) outs(%1220 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1222 = linalg.matmul ins(%collapsed_2183, %transposed_2185 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1221 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2186 = tensor.collapse_shape %1214 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2187 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1223 = tensor.empty() : tensor<512x128xf32>
    %transposed_2188 = linalg.transpose ins(%cst_840 : tensor<128x512xf32>) outs(%1223 : tensor<512x128xf32>) permutation = [1, 0] 
    %1224 = tensor.empty() : tensor<384x128xf32>
    %1225 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_839 : tensor<128xf32>) outs(%1224 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1226 = linalg.matmul ins(%collapsed_2186, %transposed_2188 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1225 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2189 = tensor.expand_shape %1218 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2190 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1227 = tensor.empty() : tensor<128x128xf32>
    %transposed_2191 = linalg.transpose ins(%cst_838 : tensor<128x128xf32>) outs(%1227 : tensor<128x128xf32>) permutation = [1, 0] 
    %1228 = tensor.empty() : tensor<384x128xf32>
    %1229 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_837 : tensor<128xf32>) outs(%1228 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1230 = linalg.matmul ins(%1222, %transposed_2191 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1229 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2192 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1231 = tensor.empty() : tensor<128x128xf32>
    %transposed_2193 = linalg.transpose ins(%cst_836 : tensor<128x128xf32>) outs(%1231 : tensor<128x128xf32>) permutation = [1, 0] 
    %1232 = tensor.empty() : tensor<384x128xf32>
    %1233 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_835 : tensor<128xf32>) outs(%1232 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1234 = linalg.matmul ins(%1222, %transposed_2193 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1233 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2194 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1235 = tensor.empty() : tensor<128x128xf32>
    %transposed_2195 = linalg.transpose ins(%cst_834 : tensor<128x128xf32>) outs(%1235 : tensor<128x128xf32>) permutation = [1, 0] 
    %1236 = tensor.empty() : tensor<384x128xf32>
    %1237 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_833 : tensor<128xf32>) outs(%1236 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1238 = linalg.matmul ins(%1226, %transposed_2195 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1237 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2196 = tensor.expand_shape %1230 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2197 = tensor.expand_shape %1234 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2198 = tensor.expand_shape %1238 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1239 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2199 = linalg.transpose ins(%expanded_2196 : tensor<1x384x4x32xf32>) outs(%1239 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1240 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2200 = linalg.transpose ins(%expanded_2198 : tensor<1x384x4x32xf32>) outs(%1240 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1241 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2201 = linalg.transpose ins(%expanded_2197 : tensor<1x384x4x32xf32>) outs(%1241 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2202 = tensor.collapse_shape %transposed_2199 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2203 = tensor.extract_slice %collapsed_2202[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2204 = tensor.extract_slice %collapsed_2202[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2205 = tensor.extract_slice %collapsed_2202[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2206 = tensor.extract_slice %collapsed_2202[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2207 = tensor.collapse_shape %transposed_2201 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2208 = tensor.extract_slice %collapsed_2207[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1242 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2209 = linalg.transpose ins(%extracted_slice_2208 : tensor<1x32x384xf32>) outs(%1242 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2210 = tensor.extract_slice %collapsed_2207[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1243 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2211 = linalg.transpose ins(%extracted_slice_2210 : tensor<1x32x384xf32>) outs(%1243 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2212 = tensor.extract_slice %collapsed_2207[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1244 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2213 = linalg.transpose ins(%extracted_slice_2212 : tensor<1x32x384xf32>) outs(%1244 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2214 = tensor.extract_slice %collapsed_2207[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1245 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2215 = linalg.transpose ins(%extracted_slice_2214 : tensor<1x32x384xf32>) outs(%1245 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2216 = tensor.collapse_shape %transposed_2209 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2217 = tensor.collapse_shape %extracted_slice_2203 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2218 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1246 = tensor.empty() : tensor<32x384xf32>
    %transposed_2219 = linalg.transpose ins(%collapsed_2216 : tensor<384x32xf32>) outs(%1246 : tensor<32x384xf32>) permutation = [1, 0] 
    %1247 = tensor.empty() : tensor<384x384xf32>
    %1248 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1247 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1249 = linalg.matmul ins(%collapsed_2217, %transposed_2219 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1248 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2220 = tensor.collapse_shape %transposed_2211 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2221 = tensor.collapse_shape %extracted_slice_2204 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2222 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1250 = tensor.empty() : tensor<32x384xf32>
    %transposed_2223 = linalg.transpose ins(%collapsed_2220 : tensor<384x32xf32>) outs(%1250 : tensor<32x384xf32>) permutation = [1, 0] 
    %1251 = tensor.empty() : tensor<384x384xf32>
    %1252 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1251 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1253 = linalg.matmul ins(%collapsed_2221, %transposed_2223 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1252 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2224 = tensor.collapse_shape %transposed_2213 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2225 = tensor.collapse_shape %extracted_slice_2205 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2226 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1254 = tensor.empty() : tensor<32x384xf32>
    %transposed_2227 = linalg.transpose ins(%collapsed_2224 : tensor<384x32xf32>) outs(%1254 : tensor<32x384xf32>) permutation = [1, 0] 
    %1255 = tensor.empty() : tensor<384x384xf32>
    %1256 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1255 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1257 = linalg.matmul ins(%collapsed_2225, %transposed_2227 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1256 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2228 = tensor.collapse_shape %transposed_2215 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2229 = tensor.collapse_shape %extracted_slice_2206 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2230 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1258 = tensor.empty() : tensor<32x384xf32>
    %transposed_2231 = linalg.transpose ins(%collapsed_2228 : tensor<384x32xf32>) outs(%1258 : tensor<32x384xf32>) permutation = [1, 0] 
    %1259 = tensor.empty() : tensor<384x384xf32>
    %1260 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1259 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1261 = linalg.matmul ins(%collapsed_2229, %transposed_2231 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1260 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2232 = arith.constant 0 : index
    %c384_2233 = arith.constant 384 : index
    %c384_2234 = arith.constant 384 : index
    %c768_2235 = arith.constant 768 : index
    %c384_2236 = arith.constant 384 : index
    %c768_2237 = arith.constant 768 : index
    %c1152_2238 = arith.constant 1152 : index
    %c384_2239 = arith.constant 384 : index
    %c1152_2240 = arith.constant 1152 : index
    %c1536_2241 = arith.constant 1536 : index
    %1262 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2242 = tensor.insert_slice %1249 into %1262[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2243 = tensor.insert_slice %1253 into %inserted_slice_2242[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2244 = tensor.insert_slice %1257 into %inserted_slice_2243[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2245 = tensor.insert_slice %1261 into %inserted_slice_2244[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2246 = tensor.expand_shape %inserted_slice_2245 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %1263 = tensor.empty() : tensor<4x384x384xf32>
    %1264 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2246, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%1263 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_2247 = tensor.expand_shape %1264 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %1265 = tensor.empty() : tensor<1x4x384x384xf32>
    %1266 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2247, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%1265 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1267 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2248 = arith.constant -3.40282347E+38 : f32
    %1268 = linalg.fill ins(%cst_2248 : f32) outs(%1267 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2249 = linalg.reduce ins(%1266 : tensor<1x4x384x384xf32>) outs(%1268 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2250 = tensor.expand_shape %reduced_2249 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1269 = tensor.empty() : tensor<1x4x384x384xf32>
    %1270 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1266, %expanded_2250 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1269 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1271 = tensor.empty() : tensor<1x4x384x384xf32>
    %1272 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1270 : tensor<1x4x384x384xf32>) outs(%1271 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1273 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2251 = arith.constant 0.000000e+00 : f32
    %1274 = linalg.fill ins(%cst_2251 : f32) outs(%1273 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2252 = linalg.reduce ins(%1272 : tensor<1x4x384x384xf32>) outs(%1274 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2253 = tensor.expand_shape %reduced_2252 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1275 = tensor.empty() : tensor<1x4x384x1xf32>
    %1276 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2253 : tensor<1x4x384x1xf32>) outs(%1275 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %1277 = tensor.empty() : tensor<1x4x384x384xf32>
    %1278 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1272, %1276 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1277 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_2254 = tensor.collapse_shape %1278 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2255 = tensor.extract_slice %collapsed_2254[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2256 = tensor.extract_slice %collapsed_2254[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2257 = tensor.extract_slice %collapsed_2254[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2258 = tensor.extract_slice %collapsed_2254[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2259 = tensor.collapse_shape %transposed_2200 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2260 = tensor.extract_slice %collapsed_2259[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1279 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2261 = linalg.transpose ins(%extracted_slice_2260 : tensor<1x384x32xf32>) outs(%1279 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2262 = tensor.extract_slice %collapsed_2259[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1280 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2263 = linalg.transpose ins(%extracted_slice_2262 : tensor<1x384x32xf32>) outs(%1280 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2264 = tensor.extract_slice %collapsed_2259[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1281 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2265 = linalg.transpose ins(%extracted_slice_2264 : tensor<1x384x32xf32>) outs(%1281 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2266 = tensor.extract_slice %collapsed_2259[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1282 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2267 = linalg.transpose ins(%extracted_slice_2266 : tensor<1x384x32xf32>) outs(%1282 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2268 = tensor.collapse_shape %transposed_2261 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2269 = tensor.collapse_shape %extracted_slice_2255 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2270 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1283 = tensor.empty() : tensor<384x32xf32>
    %transposed_2271 = linalg.transpose ins(%collapsed_2268 : tensor<32x384xf32>) outs(%1283 : tensor<384x32xf32>) permutation = [1, 0] 
    %1284 = tensor.empty() : tensor<384x32xf32>
    %1285 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1284 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1286 = linalg.matmul ins(%collapsed_2269, %transposed_2271 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1285 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2272 = tensor.collapse_shape %transposed_2263 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2273 = tensor.collapse_shape %extracted_slice_2256 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2274 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1287 = tensor.empty() : tensor<384x32xf32>
    %transposed_2275 = linalg.transpose ins(%collapsed_2272 : tensor<32x384xf32>) outs(%1287 : tensor<384x32xf32>) permutation = [1, 0] 
    %1288 = tensor.empty() : tensor<384x32xf32>
    %1289 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1288 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1290 = linalg.matmul ins(%collapsed_2273, %transposed_2275 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1289 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2276 = tensor.collapse_shape %transposed_2265 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2277 = tensor.collapse_shape %extracted_slice_2257 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2278 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1291 = tensor.empty() : tensor<384x32xf32>
    %transposed_2279 = linalg.transpose ins(%collapsed_2276 : tensor<32x384xf32>) outs(%1291 : tensor<384x32xf32>) permutation = [1, 0] 
    %1292 = tensor.empty() : tensor<384x32xf32>
    %1293 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1292 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1294 = linalg.matmul ins(%collapsed_2277, %transposed_2279 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1293 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2280 = tensor.collapse_shape %transposed_2267 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2281 = tensor.collapse_shape %extracted_slice_2258 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2282 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1295 = tensor.empty() : tensor<384x32xf32>
    %transposed_2283 = linalg.transpose ins(%collapsed_2280 : tensor<32x384xf32>) outs(%1295 : tensor<384x32xf32>) permutation = [1, 0] 
    %1296 = tensor.empty() : tensor<384x32xf32>
    %1297 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1296 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1298 = linalg.matmul ins(%collapsed_2281, %transposed_2283 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1297 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_2284 = arith.constant 0 : index
    %c384_2285 = arith.constant 384 : index
    %c384_2286 = arith.constant 384 : index
    %c768_2287 = arith.constant 768 : index
    %c384_2288 = arith.constant 384 : index
    %c768_2289 = arith.constant 768 : index
    %c1152_2290 = arith.constant 1152 : index
    %c384_2291 = arith.constant 384 : index
    %c1152_2292 = arith.constant 1152 : index
    %c1536_2293 = arith.constant 1536 : index
    %1299 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2294 = tensor.insert_slice %1286 into %1299[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2295 = tensor.insert_slice %1290 into %inserted_slice_2294[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2296 = tensor.insert_slice %1294 into %inserted_slice_2295[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2297 = tensor.insert_slice %1298 into %inserted_slice_2296[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2298 = tensor.expand_shape %inserted_slice_2297 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %1300 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_2299 = linalg.transpose ins(%expanded_2298 : tensor<4x384x32xf32>) outs(%1300 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_2300 = tensor.collapse_shape %transposed_2299 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_2301 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1301 = tensor.empty() : tensor<128x128xf32>
    %transposed_2302 = linalg.transpose ins(%cst_832 : tensor<128x128xf32>) outs(%1301 : tensor<128x128xf32>) permutation = [1, 0] 
    %1302 = tensor.empty() : tensor<384x128xf32>
    %1303 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_831 : tensor<128xf32>) outs(%1302 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1304 = linalg.matmul ins(%collapsed_2300, %transposed_2302 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1303 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2303 = tensor.expand_shape %1304 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1305 = tensor.empty() : tensor<1x384x128xf32>
    %1306 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2303, %expanded_2189 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1305 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1307 = tensor.empty() : tensor<1x384x128xf32>
    %1308 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1306, %cst_204 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1307 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1309 = tensor.empty() : tensor<1x384x128xf32>
    %1310 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1308, %cst_203 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1309 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2304 = tensor.collapse_shape %1310 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2305 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1311 = tensor.empty() : tensor<128x512xf32>
    %transposed_2306 = linalg.transpose ins(%cst_830 : tensor<512x128xf32>) outs(%1311 : tensor<128x512xf32>) permutation = [1, 0] 
    %1312 = tensor.empty() : tensor<384x512xf32>
    %1313 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_829 : tensor<512xf32>) outs(%1312 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1314 = linalg.matmul ins(%collapsed_2304, %transposed_2306 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1313 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1315 = tensor.empty() : tensor<384x512xf32>
    %1316 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1314 : tensor<384x512xf32>) outs(%1315 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2307 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1317 = tensor.empty() : tensor<512x128xf32>
    %transposed_2308 = linalg.transpose ins(%cst_828 : tensor<128x512xf32>) outs(%1317 : tensor<512x128xf32>) permutation = [1, 0] 
    %1318 = tensor.empty() : tensor<384x128xf32>
    %1319 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_827 : tensor<128xf32>) outs(%1318 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1320 = linalg.matmul ins(%1316, %transposed_2308 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1319 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2309 = tensor.expand_shape %1320 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1321 = tensor.empty() : tensor<1x384x128xf32>
    %1322 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2309, %1310 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1321 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1323 = tensor.empty() : tensor<1x384x128xf32>
    %1324 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1322, %cst_202 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1323 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1325 = tensor.empty() : tensor<1x384x128xf32>
    %1326 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1324, %cst_201 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1325 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2310 = tensor.collapse_shape %1326 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2311 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1327 = tensor.empty() : tensor<128x512xf32>
    %transposed_2312 = linalg.transpose ins(%cst_826 : tensor<512x128xf32>) outs(%1327 : tensor<128x512xf32>) permutation = [1, 0] 
    %1328 = tensor.empty() : tensor<384x512xf32>
    %1329 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_825 : tensor<512xf32>) outs(%1328 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1330 = linalg.matmul ins(%collapsed_2310, %transposed_2312 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1329 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1331 = tensor.empty() : tensor<384x512xf32>
    %1332 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1330 : tensor<384x512xf32>) outs(%1331 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2313 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1333 = tensor.empty() : tensor<512x128xf32>
    %transposed_2314 = linalg.transpose ins(%cst_824 : tensor<128x512xf32>) outs(%1333 : tensor<512x128xf32>) permutation = [1, 0] 
    %1334 = tensor.empty() : tensor<384x128xf32>
    %1335 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_823 : tensor<128xf32>) outs(%1334 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1336 = linalg.matmul ins(%1332, %transposed_2314 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1335 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2315 = tensor.expand_shape %1336 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1337 = tensor.empty() : tensor<1x384x128xf32>
    %1338 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2315, %1326 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1337 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1339 = tensor.empty() : tensor<1x384x128xf32>
    %1340 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1338, %cst_200 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1339 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1341 = tensor.empty() : tensor<1x384x128xf32>
    %1342 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1340, %cst_199 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1341 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2316 = tensor.collapse_shape %1342 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2317 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1343 = tensor.empty() : tensor<128x512xf32>
    %transposed_2318 = linalg.transpose ins(%cst_822 : tensor<512x128xf32>) outs(%1343 : tensor<128x512xf32>) permutation = [1, 0] 
    %1344 = tensor.empty() : tensor<384x512xf32>
    %1345 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_821 : tensor<512xf32>) outs(%1344 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1346 = linalg.matmul ins(%collapsed_2316, %transposed_2318 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1345 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1347 = tensor.empty() : tensor<384x512xf32>
    %1348 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1346 : tensor<384x512xf32>) outs(%1347 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2319 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1349 = tensor.empty() : tensor<512x128xf32>
    %transposed_2320 = linalg.transpose ins(%cst_820 : tensor<128x512xf32>) outs(%1349 : tensor<512x128xf32>) permutation = [1, 0] 
    %1350 = tensor.empty() : tensor<384x128xf32>
    %1351 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_819 : tensor<128xf32>) outs(%1350 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1352 = linalg.matmul ins(%1348, %transposed_2320 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1351 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2321 = tensor.expand_shape %1352 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1353 = tensor.empty() : tensor<1x384x128xf32>
    %1354 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2321, %1342 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1353 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1355 = tensor.empty() : tensor<1x384x128xf32>
    %1356 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1354, %cst_198 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1355 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1357 = tensor.empty() : tensor<1x384x128xf32>
    %1358 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1356, %cst_197 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1357 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2322 = tensor.collapse_shape %1358 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2323 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1359 = tensor.empty() : tensor<128x512xf32>
    %transposed_2324 = linalg.transpose ins(%cst_818 : tensor<512x128xf32>) outs(%1359 : tensor<128x512xf32>) permutation = [1, 0] 
    %1360 = tensor.empty() : tensor<384x512xf32>
    %1361 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_817 : tensor<512xf32>) outs(%1360 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1362 = linalg.matmul ins(%collapsed_2322, %transposed_2324 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1361 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1363 = tensor.empty() : tensor<384x512xf32>
    %1364 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1362 : tensor<384x512xf32>) outs(%1363 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2325 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1365 = tensor.empty() : tensor<512x128xf32>
    %transposed_2326 = linalg.transpose ins(%cst_816 : tensor<128x512xf32>) outs(%1365 : tensor<512x128xf32>) permutation = [1, 0] 
    %1366 = tensor.empty() : tensor<384x128xf32>
    %1367 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_815 : tensor<128xf32>) outs(%1366 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1368 = linalg.matmul ins(%1364, %transposed_2326 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1367 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2327 = tensor.expand_shape %1368 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1369 = tensor.empty() : tensor<1x384x128xf32>
    %1370 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2327, %1358 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1369 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1371 = tensor.empty() : tensor<1x384x128xf32>
    %1372 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1370, %cst_196 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1371 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1373 = tensor.empty() : tensor<1x384x128xf32>
    %1374 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1372, %cst_195 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1373 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2328 = tensor.collapse_shape %1374 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2329 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1375 = tensor.empty() : tensor<128x512xf32>
    %transposed_2330 = linalg.transpose ins(%cst_814 : tensor<512x128xf32>) outs(%1375 : tensor<128x512xf32>) permutation = [1, 0] 
    %1376 = tensor.empty() : tensor<384x512xf32>
    %1377 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_813 : tensor<512xf32>) outs(%1376 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1378 = linalg.matmul ins(%collapsed_2328, %transposed_2330 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1377 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2331 = tensor.expand_shape %1378 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1379 = tensor.empty() : tensor<1x384x512xf32>
    %1380 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2331, %1214 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1379 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1381 = tensor.empty() : tensor<1x384x512xf32>
    %1382 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1380, %cst_194 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1381 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1383 = tensor.empty() : tensor<1x384x512xf32>
    %1384 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1382, %cst_193 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1383 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2332 = tensor.collapse_shape %1384 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2333 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1385 = tensor.empty() : tensor<512x128xf32>
    %transposed_2334 = linalg.transpose ins(%cst_812 : tensor<128x512xf32>) outs(%1385 : tensor<512x128xf32>) permutation = [1, 0] 
    %1386 = tensor.empty() : tensor<384x128xf32>
    %1387 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_811 : tensor<128xf32>) outs(%1386 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1388 = linalg.matmul ins(%collapsed_2332, %transposed_2334 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1387 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2335 = tensor.collapse_shape %1384 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2336 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1389 = tensor.empty() : tensor<512x128xf32>
    %transposed_2337 = linalg.transpose ins(%cst_810 : tensor<128x512xf32>) outs(%1389 : tensor<512x128xf32>) permutation = [1, 0] 
    %1390 = tensor.empty() : tensor<384x128xf32>
    %1391 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_809 : tensor<128xf32>) outs(%1390 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1392 = linalg.matmul ins(%collapsed_2335, %transposed_2337 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1391 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2338 = tensor.collapse_shape %1384 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2339 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1393 = tensor.empty() : tensor<512x128xf32>
    %transposed_2340 = linalg.transpose ins(%cst_808 : tensor<128x512xf32>) outs(%1393 : tensor<512x128xf32>) permutation = [1, 0] 
    %1394 = tensor.empty() : tensor<384x128xf32>
    %1395 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_807 : tensor<128xf32>) outs(%1394 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1396 = linalg.matmul ins(%collapsed_2338, %transposed_2340 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1395 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2341 = tensor.expand_shape %1388 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2342 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1397 = tensor.empty() : tensor<128x128xf32>
    %transposed_2343 = linalg.transpose ins(%cst_806 : tensor<128x128xf32>) outs(%1397 : tensor<128x128xf32>) permutation = [1, 0] 
    %1398 = tensor.empty() : tensor<384x128xf32>
    %1399 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_805 : tensor<128xf32>) outs(%1398 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1400 = linalg.matmul ins(%1392, %transposed_2343 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1399 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2344 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1401 = tensor.empty() : tensor<128x128xf32>
    %transposed_2345 = linalg.transpose ins(%cst_804 : tensor<128x128xf32>) outs(%1401 : tensor<128x128xf32>) permutation = [1, 0] 
    %1402 = tensor.empty() : tensor<384x128xf32>
    %1403 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_803 : tensor<128xf32>) outs(%1402 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1404 = linalg.matmul ins(%1392, %transposed_2345 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1403 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2346 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1405 = tensor.empty() : tensor<128x128xf32>
    %transposed_2347 = linalg.transpose ins(%cst_802 : tensor<128x128xf32>) outs(%1405 : tensor<128x128xf32>) permutation = [1, 0] 
    %1406 = tensor.empty() : tensor<384x128xf32>
    %1407 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_801 : tensor<128xf32>) outs(%1406 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1408 = linalg.matmul ins(%1396, %transposed_2347 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1407 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2348 = tensor.expand_shape %1400 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2349 = tensor.expand_shape %1404 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2350 = tensor.expand_shape %1408 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1409 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2351 = linalg.transpose ins(%expanded_2348 : tensor<1x384x4x32xf32>) outs(%1409 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1410 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2352 = linalg.transpose ins(%expanded_2350 : tensor<1x384x4x32xf32>) outs(%1410 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1411 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2353 = linalg.transpose ins(%expanded_2349 : tensor<1x384x4x32xf32>) outs(%1411 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2354 = tensor.collapse_shape %transposed_2351 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2355 = tensor.extract_slice %collapsed_2354[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2356 = tensor.extract_slice %collapsed_2354[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2357 = tensor.extract_slice %collapsed_2354[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2358 = tensor.extract_slice %collapsed_2354[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2359 = tensor.collapse_shape %transposed_2353 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2360 = tensor.extract_slice %collapsed_2359[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1412 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2361 = linalg.transpose ins(%extracted_slice_2360 : tensor<1x32x384xf32>) outs(%1412 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2362 = tensor.extract_slice %collapsed_2359[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1413 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2363 = linalg.transpose ins(%extracted_slice_2362 : tensor<1x32x384xf32>) outs(%1413 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2364 = tensor.extract_slice %collapsed_2359[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1414 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2365 = linalg.transpose ins(%extracted_slice_2364 : tensor<1x32x384xf32>) outs(%1414 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2366 = tensor.extract_slice %collapsed_2359[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1415 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2367 = linalg.transpose ins(%extracted_slice_2366 : tensor<1x32x384xf32>) outs(%1415 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2368 = tensor.collapse_shape %transposed_2361 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2369 = tensor.collapse_shape %extracted_slice_2355 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2370 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1416 = tensor.empty() : tensor<32x384xf32>
    %transposed_2371 = linalg.transpose ins(%collapsed_2368 : tensor<384x32xf32>) outs(%1416 : tensor<32x384xf32>) permutation = [1, 0] 
    %1417 = tensor.empty() : tensor<384x384xf32>
    %1418 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1417 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1419 = linalg.matmul ins(%collapsed_2369, %transposed_2371 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1418 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2372 = tensor.collapse_shape %transposed_2363 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2373 = tensor.collapse_shape %extracted_slice_2356 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2374 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1420 = tensor.empty() : tensor<32x384xf32>
    %transposed_2375 = linalg.transpose ins(%collapsed_2372 : tensor<384x32xf32>) outs(%1420 : tensor<32x384xf32>) permutation = [1, 0] 
    %1421 = tensor.empty() : tensor<384x384xf32>
    %1422 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1421 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1423 = linalg.matmul ins(%collapsed_2373, %transposed_2375 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1422 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2376 = tensor.collapse_shape %transposed_2365 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2377 = tensor.collapse_shape %extracted_slice_2357 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2378 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1424 = tensor.empty() : tensor<32x384xf32>
    %transposed_2379 = linalg.transpose ins(%collapsed_2376 : tensor<384x32xf32>) outs(%1424 : tensor<32x384xf32>) permutation = [1, 0] 
    %1425 = tensor.empty() : tensor<384x384xf32>
    %1426 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1425 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1427 = linalg.matmul ins(%collapsed_2377, %transposed_2379 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1426 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2380 = tensor.collapse_shape %transposed_2367 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2381 = tensor.collapse_shape %extracted_slice_2358 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2382 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1428 = tensor.empty() : tensor<32x384xf32>
    %transposed_2383 = linalg.transpose ins(%collapsed_2380 : tensor<384x32xf32>) outs(%1428 : tensor<32x384xf32>) permutation = [1, 0] 
    %1429 = tensor.empty() : tensor<384x384xf32>
    %1430 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1429 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1431 = linalg.matmul ins(%collapsed_2381, %transposed_2383 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1430 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2384 = arith.constant 0 : index
    %c384_2385 = arith.constant 384 : index
    %c384_2386 = arith.constant 384 : index
    %c768_2387 = arith.constant 768 : index
    %c384_2388 = arith.constant 384 : index
    %c768_2389 = arith.constant 768 : index
    %c1152_2390 = arith.constant 1152 : index
    %c384_2391 = arith.constant 384 : index
    %c1152_2392 = arith.constant 1152 : index
    %c1536_2393 = arith.constant 1536 : index
    %1432 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2394 = tensor.insert_slice %1419 into %1432[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2395 = tensor.insert_slice %1423 into %inserted_slice_2394[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2396 = tensor.insert_slice %1427 into %inserted_slice_2395[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2397 = tensor.insert_slice %1431 into %inserted_slice_2396[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2398 = tensor.expand_shape %inserted_slice_2397 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %1433 = tensor.empty() : tensor<4x384x384xf32>
    %1434 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2398, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%1433 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_2399 = tensor.expand_shape %1434 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %1435 = tensor.empty() : tensor<1x4x384x384xf32>
    %1436 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2399, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%1435 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1437 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2400 = arith.constant -3.40282347E+38 : f32
    %1438 = linalg.fill ins(%cst_2400 : f32) outs(%1437 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2401 = linalg.reduce ins(%1436 : tensor<1x4x384x384xf32>) outs(%1438 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2402 = tensor.expand_shape %reduced_2401 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1439 = tensor.empty() : tensor<1x4x384x384xf32>
    %1440 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1436, %expanded_2402 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1439 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1441 = tensor.empty() : tensor<1x4x384x384xf32>
    %1442 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1440 : tensor<1x4x384x384xf32>) outs(%1441 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1443 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2403 = arith.constant 0.000000e+00 : f32
    %1444 = linalg.fill ins(%cst_2403 : f32) outs(%1443 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2404 = linalg.reduce ins(%1442 : tensor<1x4x384x384xf32>) outs(%1444 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2405 = tensor.expand_shape %reduced_2404 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1445 = tensor.empty() : tensor<1x4x384x1xf32>
    %1446 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2405 : tensor<1x4x384x1xf32>) outs(%1445 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %1447 = tensor.empty() : tensor<1x4x384x384xf32>
    %1448 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1442, %1446 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1447 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_2406 = tensor.collapse_shape %1448 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2407 = tensor.extract_slice %collapsed_2406[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2408 = tensor.extract_slice %collapsed_2406[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2409 = tensor.extract_slice %collapsed_2406[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2410 = tensor.extract_slice %collapsed_2406[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2411 = tensor.collapse_shape %transposed_2352 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2412 = tensor.extract_slice %collapsed_2411[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1449 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2413 = linalg.transpose ins(%extracted_slice_2412 : tensor<1x384x32xf32>) outs(%1449 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2414 = tensor.extract_slice %collapsed_2411[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1450 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2415 = linalg.transpose ins(%extracted_slice_2414 : tensor<1x384x32xf32>) outs(%1450 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2416 = tensor.extract_slice %collapsed_2411[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1451 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2417 = linalg.transpose ins(%extracted_slice_2416 : tensor<1x384x32xf32>) outs(%1451 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2418 = tensor.extract_slice %collapsed_2411[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1452 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2419 = linalg.transpose ins(%extracted_slice_2418 : tensor<1x384x32xf32>) outs(%1452 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2420 = tensor.collapse_shape %transposed_2413 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2421 = tensor.collapse_shape %extracted_slice_2407 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2422 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1453 = tensor.empty() : tensor<384x32xf32>
    %transposed_2423 = linalg.transpose ins(%collapsed_2420 : tensor<32x384xf32>) outs(%1453 : tensor<384x32xf32>) permutation = [1, 0] 
    %1454 = tensor.empty() : tensor<384x32xf32>
    %1455 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1454 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1456 = linalg.matmul ins(%collapsed_2421, %transposed_2423 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1455 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2424 = tensor.collapse_shape %transposed_2415 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2425 = tensor.collapse_shape %extracted_slice_2408 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2426 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1457 = tensor.empty() : tensor<384x32xf32>
    %transposed_2427 = linalg.transpose ins(%collapsed_2424 : tensor<32x384xf32>) outs(%1457 : tensor<384x32xf32>) permutation = [1, 0] 
    %1458 = tensor.empty() : tensor<384x32xf32>
    %1459 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1458 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1460 = linalg.matmul ins(%collapsed_2425, %transposed_2427 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1459 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2428 = tensor.collapse_shape %transposed_2417 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2429 = tensor.collapse_shape %extracted_slice_2409 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2430 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1461 = tensor.empty() : tensor<384x32xf32>
    %transposed_2431 = linalg.transpose ins(%collapsed_2428 : tensor<32x384xf32>) outs(%1461 : tensor<384x32xf32>) permutation = [1, 0] 
    %1462 = tensor.empty() : tensor<384x32xf32>
    %1463 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1462 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1464 = linalg.matmul ins(%collapsed_2429, %transposed_2431 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1463 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2432 = tensor.collapse_shape %transposed_2419 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2433 = tensor.collapse_shape %extracted_slice_2410 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2434 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1465 = tensor.empty() : tensor<384x32xf32>
    %transposed_2435 = linalg.transpose ins(%collapsed_2432 : tensor<32x384xf32>) outs(%1465 : tensor<384x32xf32>) permutation = [1, 0] 
    %1466 = tensor.empty() : tensor<384x32xf32>
    %1467 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1466 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1468 = linalg.matmul ins(%collapsed_2433, %transposed_2435 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1467 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_2436 = arith.constant 0 : index
    %c384_2437 = arith.constant 384 : index
    %c384_2438 = arith.constant 384 : index
    %c768_2439 = arith.constant 768 : index
    %c384_2440 = arith.constant 384 : index
    %c768_2441 = arith.constant 768 : index
    %c1152_2442 = arith.constant 1152 : index
    %c384_2443 = arith.constant 384 : index
    %c1152_2444 = arith.constant 1152 : index
    %c1536_2445 = arith.constant 1536 : index
    %1469 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2446 = tensor.insert_slice %1456 into %1469[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2447 = tensor.insert_slice %1460 into %inserted_slice_2446[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2448 = tensor.insert_slice %1464 into %inserted_slice_2447[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2449 = tensor.insert_slice %1468 into %inserted_slice_2448[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2450 = tensor.expand_shape %inserted_slice_2449 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %1470 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_2451 = linalg.transpose ins(%expanded_2450 : tensor<4x384x32xf32>) outs(%1470 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_2452 = tensor.collapse_shape %transposed_2451 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_2453 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1471 = tensor.empty() : tensor<128x128xf32>
    %transposed_2454 = linalg.transpose ins(%cst_800 : tensor<128x128xf32>) outs(%1471 : tensor<128x128xf32>) permutation = [1, 0] 
    %1472 = tensor.empty() : tensor<384x128xf32>
    %1473 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_799 : tensor<128xf32>) outs(%1472 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1474 = linalg.matmul ins(%collapsed_2452, %transposed_2454 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1473 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2455 = tensor.expand_shape %1474 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1475 = tensor.empty() : tensor<1x384x128xf32>
    %1476 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2455, %expanded_2341 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1475 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1477 = tensor.empty() : tensor<1x384x128xf32>
    %1478 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1476, %cst_192 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1477 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1479 = tensor.empty() : tensor<1x384x128xf32>
    %1480 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1478, %cst_191 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1479 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2456 = tensor.collapse_shape %1480 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2457 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1481 = tensor.empty() : tensor<128x512xf32>
    %transposed_2458 = linalg.transpose ins(%cst_798 : tensor<512x128xf32>) outs(%1481 : tensor<128x512xf32>) permutation = [1, 0] 
    %1482 = tensor.empty() : tensor<384x512xf32>
    %1483 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_797 : tensor<512xf32>) outs(%1482 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1484 = linalg.matmul ins(%collapsed_2456, %transposed_2458 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1483 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1485 = tensor.empty() : tensor<384x512xf32>
    %1486 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1484 : tensor<384x512xf32>) outs(%1485 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2459 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1487 = tensor.empty() : tensor<512x128xf32>
    %transposed_2460 = linalg.transpose ins(%cst_796 : tensor<128x512xf32>) outs(%1487 : tensor<512x128xf32>) permutation = [1, 0] 
    %1488 = tensor.empty() : tensor<384x128xf32>
    %1489 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_795 : tensor<128xf32>) outs(%1488 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1490 = linalg.matmul ins(%1486, %transposed_2460 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1489 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2461 = tensor.expand_shape %1490 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1491 = tensor.empty() : tensor<1x384x128xf32>
    %1492 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2461, %1480 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1491 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1493 = tensor.empty() : tensor<1x384x128xf32>
    %1494 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1492, %cst_190 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1493 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1495 = tensor.empty() : tensor<1x384x128xf32>
    %1496 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1494, %cst_189 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1495 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2462 = tensor.collapse_shape %1496 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2463 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1497 = tensor.empty() : tensor<128x512xf32>
    %transposed_2464 = linalg.transpose ins(%cst_794 : tensor<512x128xf32>) outs(%1497 : tensor<128x512xf32>) permutation = [1, 0] 
    %1498 = tensor.empty() : tensor<384x512xf32>
    %1499 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_793 : tensor<512xf32>) outs(%1498 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1500 = linalg.matmul ins(%collapsed_2462, %transposed_2464 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1499 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1501 = tensor.empty() : tensor<384x512xf32>
    %1502 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1500 : tensor<384x512xf32>) outs(%1501 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2465 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1503 = tensor.empty() : tensor<512x128xf32>
    %transposed_2466 = linalg.transpose ins(%cst_792 : tensor<128x512xf32>) outs(%1503 : tensor<512x128xf32>) permutation = [1, 0] 
    %1504 = tensor.empty() : tensor<384x128xf32>
    %1505 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_791 : tensor<128xf32>) outs(%1504 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1506 = linalg.matmul ins(%1502, %transposed_2466 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1505 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2467 = tensor.expand_shape %1506 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1507 = tensor.empty() : tensor<1x384x128xf32>
    %1508 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2467, %1496 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1507 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1509 = tensor.empty() : tensor<1x384x128xf32>
    %1510 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1508, %cst_188 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1509 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1511 = tensor.empty() : tensor<1x384x128xf32>
    %1512 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1510, %cst_187 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1511 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2468 = tensor.collapse_shape %1512 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2469 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1513 = tensor.empty() : tensor<128x512xf32>
    %transposed_2470 = linalg.transpose ins(%cst_790 : tensor<512x128xf32>) outs(%1513 : tensor<128x512xf32>) permutation = [1, 0] 
    %1514 = tensor.empty() : tensor<384x512xf32>
    %1515 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_789 : tensor<512xf32>) outs(%1514 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1516 = linalg.matmul ins(%collapsed_2468, %transposed_2470 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1515 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1517 = tensor.empty() : tensor<384x512xf32>
    %1518 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1516 : tensor<384x512xf32>) outs(%1517 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2471 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1519 = tensor.empty() : tensor<512x128xf32>
    %transposed_2472 = linalg.transpose ins(%cst_788 : tensor<128x512xf32>) outs(%1519 : tensor<512x128xf32>) permutation = [1, 0] 
    %1520 = tensor.empty() : tensor<384x128xf32>
    %1521 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_787 : tensor<128xf32>) outs(%1520 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1522 = linalg.matmul ins(%1518, %transposed_2472 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1521 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2473 = tensor.expand_shape %1522 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1523 = tensor.empty() : tensor<1x384x128xf32>
    %1524 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2473, %1512 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1523 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1525 = tensor.empty() : tensor<1x384x128xf32>
    %1526 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1524, %cst_186 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1525 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1527 = tensor.empty() : tensor<1x384x128xf32>
    %1528 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1526, %cst_185 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1527 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2474 = tensor.collapse_shape %1528 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2475 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1529 = tensor.empty() : tensor<128x512xf32>
    %transposed_2476 = linalg.transpose ins(%cst_786 : tensor<512x128xf32>) outs(%1529 : tensor<128x512xf32>) permutation = [1, 0] 
    %1530 = tensor.empty() : tensor<384x512xf32>
    %1531 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_785 : tensor<512xf32>) outs(%1530 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1532 = linalg.matmul ins(%collapsed_2474, %transposed_2476 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1531 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1533 = tensor.empty() : tensor<384x512xf32>
    %1534 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1532 : tensor<384x512xf32>) outs(%1533 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2477 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1535 = tensor.empty() : tensor<512x128xf32>
    %transposed_2478 = linalg.transpose ins(%cst_784 : tensor<128x512xf32>) outs(%1535 : tensor<512x128xf32>) permutation = [1, 0] 
    %1536 = tensor.empty() : tensor<384x128xf32>
    %1537 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_783 : tensor<128xf32>) outs(%1536 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1538 = linalg.matmul ins(%1534, %transposed_2478 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1537 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2479 = tensor.expand_shape %1538 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1539 = tensor.empty() : tensor<1x384x128xf32>
    %1540 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2479, %1528 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1539 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1541 = tensor.empty() : tensor<1x384x128xf32>
    %1542 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1540, %cst_184 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1541 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1543 = tensor.empty() : tensor<1x384x128xf32>
    %1544 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1542, %cst_183 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1543 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2480 = tensor.collapse_shape %1544 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2481 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1545 = tensor.empty() : tensor<128x512xf32>
    %transposed_2482 = linalg.transpose ins(%cst_782 : tensor<512x128xf32>) outs(%1545 : tensor<128x512xf32>) permutation = [1, 0] 
    %1546 = tensor.empty() : tensor<384x512xf32>
    %1547 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_781 : tensor<512xf32>) outs(%1546 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1548 = linalg.matmul ins(%collapsed_2480, %transposed_2482 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1547 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2483 = tensor.expand_shape %1548 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1549 = tensor.empty() : tensor<1x384x512xf32>
    %1550 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2483, %1384 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1549 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1551 = tensor.empty() : tensor<1x384x512xf32>
    %1552 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1550, %cst_182 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1551 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1553 = tensor.empty() : tensor<1x384x512xf32>
    %1554 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1552, %cst_181 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1553 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2484 = tensor.collapse_shape %1554 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2485 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1555 = tensor.empty() : tensor<512x128xf32>
    %transposed_2486 = linalg.transpose ins(%cst_780 : tensor<128x512xf32>) outs(%1555 : tensor<512x128xf32>) permutation = [1, 0] 
    %1556 = tensor.empty() : tensor<384x128xf32>
    %1557 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_779 : tensor<128xf32>) outs(%1556 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1558 = linalg.matmul ins(%collapsed_2484, %transposed_2486 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1557 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2487 = tensor.collapse_shape %1554 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2488 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1559 = tensor.empty() : tensor<512x128xf32>
    %transposed_2489 = linalg.transpose ins(%cst_778 : tensor<128x512xf32>) outs(%1559 : tensor<512x128xf32>) permutation = [1, 0] 
    %1560 = tensor.empty() : tensor<384x128xf32>
    %1561 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_777 : tensor<128xf32>) outs(%1560 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1562 = linalg.matmul ins(%collapsed_2487, %transposed_2489 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1561 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2490 = tensor.collapse_shape %1554 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2491 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1563 = tensor.empty() : tensor<512x128xf32>
    %transposed_2492 = linalg.transpose ins(%cst_776 : tensor<128x512xf32>) outs(%1563 : tensor<512x128xf32>) permutation = [1, 0] 
    %1564 = tensor.empty() : tensor<384x128xf32>
    %1565 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_775 : tensor<128xf32>) outs(%1564 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1566 = linalg.matmul ins(%collapsed_2490, %transposed_2492 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1565 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2493 = tensor.expand_shape %1558 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2494 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1567 = tensor.empty() : tensor<128x128xf32>
    %transposed_2495 = linalg.transpose ins(%cst_774 : tensor<128x128xf32>) outs(%1567 : tensor<128x128xf32>) permutation = [1, 0] 
    %1568 = tensor.empty() : tensor<384x128xf32>
    %1569 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_773 : tensor<128xf32>) outs(%1568 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1570 = linalg.matmul ins(%1562, %transposed_2495 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1569 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2496 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1571 = tensor.empty() : tensor<128x128xf32>
    %transposed_2497 = linalg.transpose ins(%cst_772 : tensor<128x128xf32>) outs(%1571 : tensor<128x128xf32>) permutation = [1, 0] 
    %1572 = tensor.empty() : tensor<384x128xf32>
    %1573 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_771 : tensor<128xf32>) outs(%1572 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1574 = linalg.matmul ins(%1562, %transposed_2497 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1573 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2498 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1575 = tensor.empty() : tensor<128x128xf32>
    %transposed_2499 = linalg.transpose ins(%cst_770 : tensor<128x128xf32>) outs(%1575 : tensor<128x128xf32>) permutation = [1, 0] 
    %1576 = tensor.empty() : tensor<384x128xf32>
    %1577 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_769 : tensor<128xf32>) outs(%1576 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1578 = linalg.matmul ins(%1566, %transposed_2499 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1577 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2500 = tensor.expand_shape %1570 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2501 = tensor.expand_shape %1574 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2502 = tensor.expand_shape %1578 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1579 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2503 = linalg.transpose ins(%expanded_2500 : tensor<1x384x4x32xf32>) outs(%1579 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1580 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2504 = linalg.transpose ins(%expanded_2502 : tensor<1x384x4x32xf32>) outs(%1580 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1581 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2505 = linalg.transpose ins(%expanded_2501 : tensor<1x384x4x32xf32>) outs(%1581 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2506 = tensor.collapse_shape %transposed_2503 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2507 = tensor.extract_slice %collapsed_2506[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2508 = tensor.extract_slice %collapsed_2506[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2509 = tensor.extract_slice %collapsed_2506[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2510 = tensor.extract_slice %collapsed_2506[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2511 = tensor.collapse_shape %transposed_2505 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2512 = tensor.extract_slice %collapsed_2511[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1582 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2513 = linalg.transpose ins(%extracted_slice_2512 : tensor<1x32x384xf32>) outs(%1582 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2514 = tensor.extract_slice %collapsed_2511[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1583 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2515 = linalg.transpose ins(%extracted_slice_2514 : tensor<1x32x384xf32>) outs(%1583 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2516 = tensor.extract_slice %collapsed_2511[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1584 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2517 = linalg.transpose ins(%extracted_slice_2516 : tensor<1x32x384xf32>) outs(%1584 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2518 = tensor.extract_slice %collapsed_2511[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1585 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2519 = linalg.transpose ins(%extracted_slice_2518 : tensor<1x32x384xf32>) outs(%1585 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2520 = tensor.collapse_shape %transposed_2513 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2521 = tensor.collapse_shape %extracted_slice_2507 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2522 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1586 = tensor.empty() : tensor<32x384xf32>
    %transposed_2523 = linalg.transpose ins(%collapsed_2520 : tensor<384x32xf32>) outs(%1586 : tensor<32x384xf32>) permutation = [1, 0] 
    %1587 = tensor.empty() : tensor<384x384xf32>
    %1588 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1587 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1589 = linalg.matmul ins(%collapsed_2521, %transposed_2523 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1588 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2524 = tensor.collapse_shape %transposed_2515 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2525 = tensor.collapse_shape %extracted_slice_2508 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2526 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1590 = tensor.empty() : tensor<32x384xf32>
    %transposed_2527 = linalg.transpose ins(%collapsed_2524 : tensor<384x32xf32>) outs(%1590 : tensor<32x384xf32>) permutation = [1, 0] 
    %1591 = tensor.empty() : tensor<384x384xf32>
    %1592 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1591 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1593 = linalg.matmul ins(%collapsed_2525, %transposed_2527 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1592 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2528 = tensor.collapse_shape %transposed_2517 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2529 = tensor.collapse_shape %extracted_slice_2509 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2530 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1594 = tensor.empty() : tensor<32x384xf32>
    %transposed_2531 = linalg.transpose ins(%collapsed_2528 : tensor<384x32xf32>) outs(%1594 : tensor<32x384xf32>) permutation = [1, 0] 
    %1595 = tensor.empty() : tensor<384x384xf32>
    %1596 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1595 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1597 = linalg.matmul ins(%collapsed_2529, %transposed_2531 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1596 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2532 = tensor.collapse_shape %transposed_2519 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2533 = tensor.collapse_shape %extracted_slice_2510 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2534 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1598 = tensor.empty() : tensor<32x384xf32>
    %transposed_2535 = linalg.transpose ins(%collapsed_2532 : tensor<384x32xf32>) outs(%1598 : tensor<32x384xf32>) permutation = [1, 0] 
    %1599 = tensor.empty() : tensor<384x384xf32>
    %1600 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1599 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1601 = linalg.matmul ins(%collapsed_2533, %transposed_2535 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1600 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2536 = arith.constant 0 : index
    %c384_2537 = arith.constant 384 : index
    %c384_2538 = arith.constant 384 : index
    %c768_2539 = arith.constant 768 : index
    %c384_2540 = arith.constant 384 : index
    %c768_2541 = arith.constant 768 : index
    %c1152_2542 = arith.constant 1152 : index
    %c384_2543 = arith.constant 384 : index
    %c1152_2544 = arith.constant 1152 : index
    %c1536_2545 = arith.constant 1536 : index
    %1602 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2546 = tensor.insert_slice %1589 into %1602[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2547 = tensor.insert_slice %1593 into %inserted_slice_2546[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2548 = tensor.insert_slice %1597 into %inserted_slice_2547[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2549 = tensor.insert_slice %1601 into %inserted_slice_2548[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2550 = tensor.expand_shape %inserted_slice_2549 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %1603 = tensor.empty() : tensor<4x384x384xf32>
    %1604 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2550, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%1603 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_2551 = tensor.expand_shape %1604 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %1605 = tensor.empty() : tensor<1x4x384x384xf32>
    %1606 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2551, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%1605 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1607 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2552 = arith.constant -3.40282347E+38 : f32
    %1608 = linalg.fill ins(%cst_2552 : f32) outs(%1607 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2553 = linalg.reduce ins(%1606 : tensor<1x4x384x384xf32>) outs(%1608 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2554 = tensor.expand_shape %reduced_2553 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1609 = tensor.empty() : tensor<1x4x384x384xf32>
    %1610 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1606, %expanded_2554 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1609 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1611 = tensor.empty() : tensor<1x4x384x384xf32>
    %1612 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1610 : tensor<1x4x384x384xf32>) outs(%1611 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1613 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2555 = arith.constant 0.000000e+00 : f32
    %1614 = linalg.fill ins(%cst_2555 : f32) outs(%1613 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2556 = linalg.reduce ins(%1612 : tensor<1x4x384x384xf32>) outs(%1614 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2557 = tensor.expand_shape %reduced_2556 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1615 = tensor.empty() : tensor<1x4x384x1xf32>
    %1616 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2557 : tensor<1x4x384x1xf32>) outs(%1615 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %1617 = tensor.empty() : tensor<1x4x384x384xf32>
    %1618 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1612, %1616 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1617 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_2558 = tensor.collapse_shape %1618 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2559 = tensor.extract_slice %collapsed_2558[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2560 = tensor.extract_slice %collapsed_2558[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2561 = tensor.extract_slice %collapsed_2558[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2562 = tensor.extract_slice %collapsed_2558[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2563 = tensor.collapse_shape %transposed_2504 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2564 = tensor.extract_slice %collapsed_2563[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1619 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2565 = linalg.transpose ins(%extracted_slice_2564 : tensor<1x384x32xf32>) outs(%1619 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2566 = tensor.extract_slice %collapsed_2563[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1620 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2567 = linalg.transpose ins(%extracted_slice_2566 : tensor<1x384x32xf32>) outs(%1620 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2568 = tensor.extract_slice %collapsed_2563[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1621 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2569 = linalg.transpose ins(%extracted_slice_2568 : tensor<1x384x32xf32>) outs(%1621 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2570 = tensor.extract_slice %collapsed_2563[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1622 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2571 = linalg.transpose ins(%extracted_slice_2570 : tensor<1x384x32xf32>) outs(%1622 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2572 = tensor.collapse_shape %transposed_2565 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2573 = tensor.collapse_shape %extracted_slice_2559 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2574 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1623 = tensor.empty() : tensor<384x32xf32>
    %transposed_2575 = linalg.transpose ins(%collapsed_2572 : tensor<32x384xf32>) outs(%1623 : tensor<384x32xf32>) permutation = [1, 0] 
    %1624 = tensor.empty() : tensor<384x32xf32>
    %1625 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1624 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1626 = linalg.matmul ins(%collapsed_2573, %transposed_2575 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1625 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2576 = tensor.collapse_shape %transposed_2567 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2577 = tensor.collapse_shape %extracted_slice_2560 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2578 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1627 = tensor.empty() : tensor<384x32xf32>
    %transposed_2579 = linalg.transpose ins(%collapsed_2576 : tensor<32x384xf32>) outs(%1627 : tensor<384x32xf32>) permutation = [1, 0] 
    %1628 = tensor.empty() : tensor<384x32xf32>
    %1629 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1628 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1630 = linalg.matmul ins(%collapsed_2577, %transposed_2579 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1629 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2580 = tensor.collapse_shape %transposed_2569 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2581 = tensor.collapse_shape %extracted_slice_2561 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2582 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1631 = tensor.empty() : tensor<384x32xf32>
    %transposed_2583 = linalg.transpose ins(%collapsed_2580 : tensor<32x384xf32>) outs(%1631 : tensor<384x32xf32>) permutation = [1, 0] 
    %1632 = tensor.empty() : tensor<384x32xf32>
    %1633 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1632 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1634 = linalg.matmul ins(%collapsed_2581, %transposed_2583 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1633 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2584 = tensor.collapse_shape %transposed_2571 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2585 = tensor.collapse_shape %extracted_slice_2562 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2586 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1635 = tensor.empty() : tensor<384x32xf32>
    %transposed_2587 = linalg.transpose ins(%collapsed_2584 : tensor<32x384xf32>) outs(%1635 : tensor<384x32xf32>) permutation = [1, 0] 
    %1636 = tensor.empty() : tensor<384x32xf32>
    %1637 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1636 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1638 = linalg.matmul ins(%collapsed_2585, %transposed_2587 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1637 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_2588 = arith.constant 0 : index
    %c384_2589 = arith.constant 384 : index
    %c384_2590 = arith.constant 384 : index
    %c768_2591 = arith.constant 768 : index
    %c384_2592 = arith.constant 384 : index
    %c768_2593 = arith.constant 768 : index
    %c1152_2594 = arith.constant 1152 : index
    %c384_2595 = arith.constant 384 : index
    %c1152_2596 = arith.constant 1152 : index
    %c1536_2597 = arith.constant 1536 : index
    %1639 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2598 = tensor.insert_slice %1626 into %1639[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2599 = tensor.insert_slice %1630 into %inserted_slice_2598[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2600 = tensor.insert_slice %1634 into %inserted_slice_2599[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2601 = tensor.insert_slice %1638 into %inserted_slice_2600[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2602 = tensor.expand_shape %inserted_slice_2601 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %1640 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_2603 = linalg.transpose ins(%expanded_2602 : tensor<4x384x32xf32>) outs(%1640 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_2604 = tensor.collapse_shape %transposed_2603 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_2605 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1641 = tensor.empty() : tensor<128x128xf32>
    %transposed_2606 = linalg.transpose ins(%cst_768 : tensor<128x128xf32>) outs(%1641 : tensor<128x128xf32>) permutation = [1, 0] 
    %1642 = tensor.empty() : tensor<384x128xf32>
    %1643 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_767 : tensor<128xf32>) outs(%1642 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1644 = linalg.matmul ins(%collapsed_2604, %transposed_2606 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1643 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2607 = tensor.expand_shape %1644 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1645 = tensor.empty() : tensor<1x384x128xf32>
    %1646 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2607, %expanded_2493 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1645 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1647 = tensor.empty() : tensor<1x384x128xf32>
    %1648 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1646, %cst_180 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1647 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1649 = tensor.empty() : tensor<1x384x128xf32>
    %1650 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1648, %cst_179 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1649 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2608 = tensor.collapse_shape %1650 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2609 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1651 = tensor.empty() : tensor<128x512xf32>
    %transposed_2610 = linalg.transpose ins(%cst_766 : tensor<512x128xf32>) outs(%1651 : tensor<128x512xf32>) permutation = [1, 0] 
    %1652 = tensor.empty() : tensor<384x512xf32>
    %1653 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_765 : tensor<512xf32>) outs(%1652 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1654 = linalg.matmul ins(%collapsed_2608, %transposed_2610 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1653 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1655 = tensor.empty() : tensor<384x512xf32>
    %1656 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1654 : tensor<384x512xf32>) outs(%1655 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2611 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1657 = tensor.empty() : tensor<512x128xf32>
    %transposed_2612 = linalg.transpose ins(%cst_764 : tensor<128x512xf32>) outs(%1657 : tensor<512x128xf32>) permutation = [1, 0] 
    %1658 = tensor.empty() : tensor<384x128xf32>
    %1659 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_763 : tensor<128xf32>) outs(%1658 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1660 = linalg.matmul ins(%1656, %transposed_2612 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1659 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2613 = tensor.expand_shape %1660 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1661 = tensor.empty() : tensor<1x384x128xf32>
    %1662 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2613, %1650 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1661 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1663 = tensor.empty() : tensor<1x384x128xf32>
    %1664 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1662, %cst_178 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1663 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1665 = tensor.empty() : tensor<1x384x128xf32>
    %1666 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1664, %cst_177 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1665 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2614 = tensor.collapse_shape %1666 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2615 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1667 = tensor.empty() : tensor<128x512xf32>
    %transposed_2616 = linalg.transpose ins(%cst_762 : tensor<512x128xf32>) outs(%1667 : tensor<128x512xf32>) permutation = [1, 0] 
    %1668 = tensor.empty() : tensor<384x512xf32>
    %1669 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_761 : tensor<512xf32>) outs(%1668 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1670 = linalg.matmul ins(%collapsed_2614, %transposed_2616 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1669 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1671 = tensor.empty() : tensor<384x512xf32>
    %1672 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1670 : tensor<384x512xf32>) outs(%1671 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2617 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1673 = tensor.empty() : tensor<512x128xf32>
    %transposed_2618 = linalg.transpose ins(%cst_760 : tensor<128x512xf32>) outs(%1673 : tensor<512x128xf32>) permutation = [1, 0] 
    %1674 = tensor.empty() : tensor<384x128xf32>
    %1675 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_759 : tensor<128xf32>) outs(%1674 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1676 = linalg.matmul ins(%1672, %transposed_2618 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1675 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2619 = tensor.expand_shape %1676 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1677 = tensor.empty() : tensor<1x384x128xf32>
    %1678 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2619, %1666 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1677 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1679 = tensor.empty() : tensor<1x384x128xf32>
    %1680 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1678, %cst_176 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1679 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1681 = tensor.empty() : tensor<1x384x128xf32>
    %1682 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1680, %cst_175 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1681 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2620 = tensor.collapse_shape %1682 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2621 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1683 = tensor.empty() : tensor<128x512xf32>
    %transposed_2622 = linalg.transpose ins(%cst_758 : tensor<512x128xf32>) outs(%1683 : tensor<128x512xf32>) permutation = [1, 0] 
    %1684 = tensor.empty() : tensor<384x512xf32>
    %1685 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_757 : tensor<512xf32>) outs(%1684 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1686 = linalg.matmul ins(%collapsed_2620, %transposed_2622 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1685 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1687 = tensor.empty() : tensor<384x512xf32>
    %1688 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1686 : tensor<384x512xf32>) outs(%1687 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2623 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1689 = tensor.empty() : tensor<512x128xf32>
    %transposed_2624 = linalg.transpose ins(%cst_756 : tensor<128x512xf32>) outs(%1689 : tensor<512x128xf32>) permutation = [1, 0] 
    %1690 = tensor.empty() : tensor<384x128xf32>
    %1691 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_755 : tensor<128xf32>) outs(%1690 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1692 = linalg.matmul ins(%1688, %transposed_2624 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1691 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2625 = tensor.expand_shape %1692 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1693 = tensor.empty() : tensor<1x384x128xf32>
    %1694 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2625, %1682 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1693 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1695 = tensor.empty() : tensor<1x384x128xf32>
    %1696 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1694, %cst_174 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1695 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1697 = tensor.empty() : tensor<1x384x128xf32>
    %1698 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1696, %cst_173 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1697 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2626 = tensor.collapse_shape %1698 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2627 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1699 = tensor.empty() : tensor<128x512xf32>
    %transposed_2628 = linalg.transpose ins(%cst_754 : tensor<512x128xf32>) outs(%1699 : tensor<128x512xf32>) permutation = [1, 0] 
    %1700 = tensor.empty() : tensor<384x512xf32>
    %1701 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_753 : tensor<512xf32>) outs(%1700 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1702 = linalg.matmul ins(%collapsed_2626, %transposed_2628 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1701 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1703 = tensor.empty() : tensor<384x512xf32>
    %1704 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1702 : tensor<384x512xf32>) outs(%1703 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2629 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1705 = tensor.empty() : tensor<512x128xf32>
    %transposed_2630 = linalg.transpose ins(%cst_752 : tensor<128x512xf32>) outs(%1705 : tensor<512x128xf32>) permutation = [1, 0] 
    %1706 = tensor.empty() : tensor<384x128xf32>
    %1707 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_751 : tensor<128xf32>) outs(%1706 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1708 = linalg.matmul ins(%1704, %transposed_2630 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1707 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2631 = tensor.expand_shape %1708 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1709 = tensor.empty() : tensor<1x384x128xf32>
    %1710 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2631, %1698 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1709 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1711 = tensor.empty() : tensor<1x384x128xf32>
    %1712 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1710, %cst_172 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1711 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1713 = tensor.empty() : tensor<1x384x128xf32>
    %1714 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1712, %cst_171 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1713 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2632 = tensor.collapse_shape %1714 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2633 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1715 = tensor.empty() : tensor<128x512xf32>
    %transposed_2634 = linalg.transpose ins(%cst_750 : tensor<512x128xf32>) outs(%1715 : tensor<128x512xf32>) permutation = [1, 0] 
    %1716 = tensor.empty() : tensor<384x512xf32>
    %1717 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_749 : tensor<512xf32>) outs(%1716 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1718 = linalg.matmul ins(%collapsed_2632, %transposed_2634 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1717 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2635 = tensor.expand_shape %1718 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1719 = tensor.empty() : tensor<1x384x512xf32>
    %1720 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2635, %1554 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1719 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1721 = tensor.empty() : tensor<1x384x512xf32>
    %1722 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1720, %cst_170 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1721 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1723 = tensor.empty() : tensor<1x384x512xf32>
    %1724 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1722, %cst_169 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1723 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2636 = tensor.collapse_shape %1724 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2637 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1725 = tensor.empty() : tensor<512x128xf32>
    %transposed_2638 = linalg.transpose ins(%cst_748 : tensor<128x512xf32>) outs(%1725 : tensor<512x128xf32>) permutation = [1, 0] 
    %1726 = tensor.empty() : tensor<384x128xf32>
    %1727 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_747 : tensor<128xf32>) outs(%1726 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1728 = linalg.matmul ins(%collapsed_2636, %transposed_2638 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1727 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2639 = tensor.collapse_shape %1724 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2640 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1729 = tensor.empty() : tensor<512x128xf32>
    %transposed_2641 = linalg.transpose ins(%cst_746 : tensor<128x512xf32>) outs(%1729 : tensor<512x128xf32>) permutation = [1, 0] 
    %1730 = tensor.empty() : tensor<384x128xf32>
    %1731 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_745 : tensor<128xf32>) outs(%1730 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1732 = linalg.matmul ins(%collapsed_2639, %transposed_2641 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1731 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2642 = tensor.collapse_shape %1724 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2643 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1733 = tensor.empty() : tensor<512x128xf32>
    %transposed_2644 = linalg.transpose ins(%cst_744 : tensor<128x512xf32>) outs(%1733 : tensor<512x128xf32>) permutation = [1, 0] 
    %1734 = tensor.empty() : tensor<384x128xf32>
    %1735 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_743 : tensor<128xf32>) outs(%1734 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1736 = linalg.matmul ins(%collapsed_2642, %transposed_2644 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1735 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2645 = tensor.expand_shape %1728 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2646 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1737 = tensor.empty() : tensor<128x128xf32>
    %transposed_2647 = linalg.transpose ins(%cst_742 : tensor<128x128xf32>) outs(%1737 : tensor<128x128xf32>) permutation = [1, 0] 
    %1738 = tensor.empty() : tensor<384x128xf32>
    %1739 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_741 : tensor<128xf32>) outs(%1738 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1740 = linalg.matmul ins(%1732, %transposed_2647 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1739 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2648 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1741 = tensor.empty() : tensor<128x128xf32>
    %transposed_2649 = linalg.transpose ins(%cst_740 : tensor<128x128xf32>) outs(%1741 : tensor<128x128xf32>) permutation = [1, 0] 
    %1742 = tensor.empty() : tensor<384x128xf32>
    %1743 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_739 : tensor<128xf32>) outs(%1742 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1744 = linalg.matmul ins(%1732, %transposed_2649 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1743 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2650 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1745 = tensor.empty() : tensor<128x128xf32>
    %transposed_2651 = linalg.transpose ins(%cst_738 : tensor<128x128xf32>) outs(%1745 : tensor<128x128xf32>) permutation = [1, 0] 
    %1746 = tensor.empty() : tensor<384x128xf32>
    %1747 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_737 : tensor<128xf32>) outs(%1746 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1748 = linalg.matmul ins(%1736, %transposed_2651 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1747 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2652 = tensor.expand_shape %1740 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2653 = tensor.expand_shape %1744 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2654 = tensor.expand_shape %1748 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1749 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2655 = linalg.transpose ins(%expanded_2652 : tensor<1x384x4x32xf32>) outs(%1749 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1750 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2656 = linalg.transpose ins(%expanded_2654 : tensor<1x384x4x32xf32>) outs(%1750 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1751 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2657 = linalg.transpose ins(%expanded_2653 : tensor<1x384x4x32xf32>) outs(%1751 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2658 = tensor.collapse_shape %transposed_2655 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2659 = tensor.extract_slice %collapsed_2658[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2660 = tensor.extract_slice %collapsed_2658[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2661 = tensor.extract_slice %collapsed_2658[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2662 = tensor.extract_slice %collapsed_2658[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2663 = tensor.collapse_shape %transposed_2657 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2664 = tensor.extract_slice %collapsed_2663[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1752 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2665 = linalg.transpose ins(%extracted_slice_2664 : tensor<1x32x384xf32>) outs(%1752 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2666 = tensor.extract_slice %collapsed_2663[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1753 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2667 = linalg.transpose ins(%extracted_slice_2666 : tensor<1x32x384xf32>) outs(%1753 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2668 = tensor.extract_slice %collapsed_2663[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1754 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2669 = linalg.transpose ins(%extracted_slice_2668 : tensor<1x32x384xf32>) outs(%1754 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2670 = tensor.extract_slice %collapsed_2663[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1755 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2671 = linalg.transpose ins(%extracted_slice_2670 : tensor<1x32x384xf32>) outs(%1755 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2672 = tensor.collapse_shape %transposed_2665 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2673 = tensor.collapse_shape %extracted_slice_2659 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2674 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1756 = tensor.empty() : tensor<32x384xf32>
    %transposed_2675 = linalg.transpose ins(%collapsed_2672 : tensor<384x32xf32>) outs(%1756 : tensor<32x384xf32>) permutation = [1, 0] 
    %1757 = tensor.empty() : tensor<384x384xf32>
    %1758 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1757 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1759 = linalg.matmul ins(%collapsed_2673, %transposed_2675 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1758 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2676 = tensor.collapse_shape %transposed_2667 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2677 = tensor.collapse_shape %extracted_slice_2660 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2678 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1760 = tensor.empty() : tensor<32x384xf32>
    %transposed_2679 = linalg.transpose ins(%collapsed_2676 : tensor<384x32xf32>) outs(%1760 : tensor<32x384xf32>) permutation = [1, 0] 
    %1761 = tensor.empty() : tensor<384x384xf32>
    %1762 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1761 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1763 = linalg.matmul ins(%collapsed_2677, %transposed_2679 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1762 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2680 = tensor.collapse_shape %transposed_2669 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2681 = tensor.collapse_shape %extracted_slice_2661 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2682 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1764 = tensor.empty() : tensor<32x384xf32>
    %transposed_2683 = linalg.transpose ins(%collapsed_2680 : tensor<384x32xf32>) outs(%1764 : tensor<32x384xf32>) permutation = [1, 0] 
    %1765 = tensor.empty() : tensor<384x384xf32>
    %1766 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1765 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1767 = linalg.matmul ins(%collapsed_2681, %transposed_2683 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1766 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2684 = tensor.collapse_shape %transposed_2671 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2685 = tensor.collapse_shape %extracted_slice_2662 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2686 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1768 = tensor.empty() : tensor<32x384xf32>
    %transposed_2687 = linalg.transpose ins(%collapsed_2684 : tensor<384x32xf32>) outs(%1768 : tensor<32x384xf32>) permutation = [1, 0] 
    %1769 = tensor.empty() : tensor<384x384xf32>
    %1770 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1769 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1771 = linalg.matmul ins(%collapsed_2685, %transposed_2687 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1770 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2688 = arith.constant 0 : index
    %c384_2689 = arith.constant 384 : index
    %c384_2690 = arith.constant 384 : index
    %c768_2691 = arith.constant 768 : index
    %c384_2692 = arith.constant 384 : index
    %c768_2693 = arith.constant 768 : index
    %c1152_2694 = arith.constant 1152 : index
    %c384_2695 = arith.constant 384 : index
    %c1152_2696 = arith.constant 1152 : index
    %c1536_2697 = arith.constant 1536 : index
    %1772 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2698 = tensor.insert_slice %1759 into %1772[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2699 = tensor.insert_slice %1763 into %inserted_slice_2698[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2700 = tensor.insert_slice %1767 into %inserted_slice_2699[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2701 = tensor.insert_slice %1771 into %inserted_slice_2700[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2702 = tensor.expand_shape %inserted_slice_2701 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %1773 = tensor.empty() : tensor<4x384x384xf32>
    %1774 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2702, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%1773 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_2703 = tensor.expand_shape %1774 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %1775 = tensor.empty() : tensor<1x4x384x384xf32>
    %1776 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2703, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%1775 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1777 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2704 = arith.constant -3.40282347E+38 : f32
    %1778 = linalg.fill ins(%cst_2704 : f32) outs(%1777 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2705 = linalg.reduce ins(%1776 : tensor<1x4x384x384xf32>) outs(%1778 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2706 = tensor.expand_shape %reduced_2705 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1779 = tensor.empty() : tensor<1x4x384x384xf32>
    %1780 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1776, %expanded_2706 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1779 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1781 = tensor.empty() : tensor<1x4x384x384xf32>
    %1782 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1780 : tensor<1x4x384x384xf32>) outs(%1781 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1783 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2707 = arith.constant 0.000000e+00 : f32
    %1784 = linalg.fill ins(%cst_2707 : f32) outs(%1783 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2708 = linalg.reduce ins(%1782 : tensor<1x4x384x384xf32>) outs(%1784 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2709 = tensor.expand_shape %reduced_2708 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1785 = tensor.empty() : tensor<1x4x384x1xf32>
    %1786 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2709 : tensor<1x4x384x1xf32>) outs(%1785 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %1787 = tensor.empty() : tensor<1x4x384x384xf32>
    %1788 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1782, %1786 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1787 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_2710 = tensor.collapse_shape %1788 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2711 = tensor.extract_slice %collapsed_2710[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2712 = tensor.extract_slice %collapsed_2710[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2713 = tensor.extract_slice %collapsed_2710[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2714 = tensor.extract_slice %collapsed_2710[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2715 = tensor.collapse_shape %transposed_2656 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2716 = tensor.extract_slice %collapsed_2715[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1789 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2717 = linalg.transpose ins(%extracted_slice_2716 : tensor<1x384x32xf32>) outs(%1789 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2718 = tensor.extract_slice %collapsed_2715[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1790 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2719 = linalg.transpose ins(%extracted_slice_2718 : tensor<1x384x32xf32>) outs(%1790 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2720 = tensor.extract_slice %collapsed_2715[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1791 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2721 = linalg.transpose ins(%extracted_slice_2720 : tensor<1x384x32xf32>) outs(%1791 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2722 = tensor.extract_slice %collapsed_2715[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1792 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2723 = linalg.transpose ins(%extracted_slice_2722 : tensor<1x384x32xf32>) outs(%1792 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2724 = tensor.collapse_shape %transposed_2717 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2725 = tensor.collapse_shape %extracted_slice_2711 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2726 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1793 = tensor.empty() : tensor<384x32xf32>
    %transposed_2727 = linalg.transpose ins(%collapsed_2724 : tensor<32x384xf32>) outs(%1793 : tensor<384x32xf32>) permutation = [1, 0] 
    %1794 = tensor.empty() : tensor<384x32xf32>
    %1795 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1794 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1796 = linalg.matmul ins(%collapsed_2725, %transposed_2727 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1795 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2728 = tensor.collapse_shape %transposed_2719 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2729 = tensor.collapse_shape %extracted_slice_2712 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2730 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1797 = tensor.empty() : tensor<384x32xf32>
    %transposed_2731 = linalg.transpose ins(%collapsed_2728 : tensor<32x384xf32>) outs(%1797 : tensor<384x32xf32>) permutation = [1, 0] 
    %1798 = tensor.empty() : tensor<384x32xf32>
    %1799 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1798 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1800 = linalg.matmul ins(%collapsed_2729, %transposed_2731 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1799 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2732 = tensor.collapse_shape %transposed_2721 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2733 = tensor.collapse_shape %extracted_slice_2713 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2734 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1801 = tensor.empty() : tensor<384x32xf32>
    %transposed_2735 = linalg.transpose ins(%collapsed_2732 : tensor<32x384xf32>) outs(%1801 : tensor<384x32xf32>) permutation = [1, 0] 
    %1802 = tensor.empty() : tensor<384x32xf32>
    %1803 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1802 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1804 = linalg.matmul ins(%collapsed_2733, %transposed_2735 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1803 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2736 = tensor.collapse_shape %transposed_2723 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2737 = tensor.collapse_shape %extracted_slice_2714 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2738 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1805 = tensor.empty() : tensor<384x32xf32>
    %transposed_2739 = linalg.transpose ins(%collapsed_2736 : tensor<32x384xf32>) outs(%1805 : tensor<384x32xf32>) permutation = [1, 0] 
    %1806 = tensor.empty() : tensor<384x32xf32>
    %1807 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1806 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1808 = linalg.matmul ins(%collapsed_2737, %transposed_2739 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1807 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_2740 = arith.constant 0 : index
    %c384_2741 = arith.constant 384 : index
    %c384_2742 = arith.constant 384 : index
    %c768_2743 = arith.constant 768 : index
    %c384_2744 = arith.constant 384 : index
    %c768_2745 = arith.constant 768 : index
    %c1152_2746 = arith.constant 1152 : index
    %c384_2747 = arith.constant 384 : index
    %c1152_2748 = arith.constant 1152 : index
    %c1536_2749 = arith.constant 1536 : index
    %1809 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2750 = tensor.insert_slice %1796 into %1809[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2751 = tensor.insert_slice %1800 into %inserted_slice_2750[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2752 = tensor.insert_slice %1804 into %inserted_slice_2751[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2753 = tensor.insert_slice %1808 into %inserted_slice_2752[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2754 = tensor.expand_shape %inserted_slice_2753 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %1810 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_2755 = linalg.transpose ins(%expanded_2754 : tensor<4x384x32xf32>) outs(%1810 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_2756 = tensor.collapse_shape %transposed_2755 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_2757 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1811 = tensor.empty() : tensor<128x128xf32>
    %transposed_2758 = linalg.transpose ins(%cst_736 : tensor<128x128xf32>) outs(%1811 : tensor<128x128xf32>) permutation = [1, 0] 
    %1812 = tensor.empty() : tensor<384x128xf32>
    %1813 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_735 : tensor<128xf32>) outs(%1812 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1814 = linalg.matmul ins(%collapsed_2756, %transposed_2758 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1813 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2759 = tensor.expand_shape %1814 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1815 = tensor.empty() : tensor<1x384x128xf32>
    %1816 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2759, %expanded_2645 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1815 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1817 = tensor.empty() : tensor<1x384x128xf32>
    %1818 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1816, %cst_168 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1817 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1819 = tensor.empty() : tensor<1x384x128xf32>
    %1820 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1818, %cst_167 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1819 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2760 = tensor.collapse_shape %1820 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2761 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1821 = tensor.empty() : tensor<128x512xf32>
    %transposed_2762 = linalg.transpose ins(%cst_734 : tensor<512x128xf32>) outs(%1821 : tensor<128x512xf32>) permutation = [1, 0] 
    %1822 = tensor.empty() : tensor<384x512xf32>
    %1823 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_733 : tensor<512xf32>) outs(%1822 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1824 = linalg.matmul ins(%collapsed_2760, %transposed_2762 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1823 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1825 = tensor.empty() : tensor<384x512xf32>
    %1826 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1824 : tensor<384x512xf32>) outs(%1825 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2763 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1827 = tensor.empty() : tensor<512x128xf32>
    %transposed_2764 = linalg.transpose ins(%cst_732 : tensor<128x512xf32>) outs(%1827 : tensor<512x128xf32>) permutation = [1, 0] 
    %1828 = tensor.empty() : tensor<384x128xf32>
    %1829 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_731 : tensor<128xf32>) outs(%1828 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1830 = linalg.matmul ins(%1826, %transposed_2764 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1829 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2765 = tensor.expand_shape %1830 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1831 = tensor.empty() : tensor<1x384x128xf32>
    %1832 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2765, %1820 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1831 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1833 = tensor.empty() : tensor<1x384x128xf32>
    %1834 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1832, %cst_166 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1833 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1835 = tensor.empty() : tensor<1x384x128xf32>
    %1836 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1834, %cst_165 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1835 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2766 = tensor.collapse_shape %1836 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2767 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1837 = tensor.empty() : tensor<128x512xf32>
    %transposed_2768 = linalg.transpose ins(%cst_730 : tensor<512x128xf32>) outs(%1837 : tensor<128x512xf32>) permutation = [1, 0] 
    %1838 = tensor.empty() : tensor<384x512xf32>
    %1839 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_729 : tensor<512xf32>) outs(%1838 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1840 = linalg.matmul ins(%collapsed_2766, %transposed_2768 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1839 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1841 = tensor.empty() : tensor<384x512xf32>
    %1842 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1840 : tensor<384x512xf32>) outs(%1841 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2769 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1843 = tensor.empty() : tensor<512x128xf32>
    %transposed_2770 = linalg.transpose ins(%cst_728 : tensor<128x512xf32>) outs(%1843 : tensor<512x128xf32>) permutation = [1, 0] 
    %1844 = tensor.empty() : tensor<384x128xf32>
    %1845 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_727 : tensor<128xf32>) outs(%1844 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1846 = linalg.matmul ins(%1842, %transposed_2770 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1845 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2771 = tensor.expand_shape %1846 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1847 = tensor.empty() : tensor<1x384x128xf32>
    %1848 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2771, %1836 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1847 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1849 = tensor.empty() : tensor<1x384x128xf32>
    %1850 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1848, %cst_164 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1849 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1851 = tensor.empty() : tensor<1x384x128xf32>
    %1852 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1850, %cst_163 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1851 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2772 = tensor.collapse_shape %1852 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2773 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1853 = tensor.empty() : tensor<128x512xf32>
    %transposed_2774 = linalg.transpose ins(%cst_726 : tensor<512x128xf32>) outs(%1853 : tensor<128x512xf32>) permutation = [1, 0] 
    %1854 = tensor.empty() : tensor<384x512xf32>
    %1855 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_725 : tensor<512xf32>) outs(%1854 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1856 = linalg.matmul ins(%collapsed_2772, %transposed_2774 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1855 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1857 = tensor.empty() : tensor<384x512xf32>
    %1858 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1856 : tensor<384x512xf32>) outs(%1857 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2775 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1859 = tensor.empty() : tensor<512x128xf32>
    %transposed_2776 = linalg.transpose ins(%cst_724 : tensor<128x512xf32>) outs(%1859 : tensor<512x128xf32>) permutation = [1, 0] 
    %1860 = tensor.empty() : tensor<384x128xf32>
    %1861 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_723 : tensor<128xf32>) outs(%1860 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1862 = linalg.matmul ins(%1858, %transposed_2776 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1861 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2777 = tensor.expand_shape %1862 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1863 = tensor.empty() : tensor<1x384x128xf32>
    %1864 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2777, %1852 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1863 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1865 = tensor.empty() : tensor<1x384x128xf32>
    %1866 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1864, %cst_162 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1865 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1867 = tensor.empty() : tensor<1x384x128xf32>
    %1868 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1866, %cst_161 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1867 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2778 = tensor.collapse_shape %1868 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2779 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1869 = tensor.empty() : tensor<128x512xf32>
    %transposed_2780 = linalg.transpose ins(%cst_722 : tensor<512x128xf32>) outs(%1869 : tensor<128x512xf32>) permutation = [1, 0] 
    %1870 = tensor.empty() : tensor<384x512xf32>
    %1871 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_721 : tensor<512xf32>) outs(%1870 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1872 = linalg.matmul ins(%collapsed_2778, %transposed_2780 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1871 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1873 = tensor.empty() : tensor<384x512xf32>
    %1874 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1872 : tensor<384x512xf32>) outs(%1873 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2781 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1875 = tensor.empty() : tensor<512x128xf32>
    %transposed_2782 = linalg.transpose ins(%cst_720 : tensor<128x512xf32>) outs(%1875 : tensor<512x128xf32>) permutation = [1, 0] 
    %1876 = tensor.empty() : tensor<384x128xf32>
    %1877 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_719 : tensor<128xf32>) outs(%1876 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1878 = linalg.matmul ins(%1874, %transposed_2782 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1877 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2783 = tensor.expand_shape %1878 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1879 = tensor.empty() : tensor<1x384x128xf32>
    %1880 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2783, %1868 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1879 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1881 = tensor.empty() : tensor<1x384x128xf32>
    %1882 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1880, %cst_160 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1881 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1883 = tensor.empty() : tensor<1x384x128xf32>
    %1884 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1882, %cst_159 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1883 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2784 = tensor.collapse_shape %1884 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2785 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1885 = tensor.empty() : tensor<128x512xf32>
    %transposed_2786 = linalg.transpose ins(%cst_718 : tensor<512x128xf32>) outs(%1885 : tensor<128x512xf32>) permutation = [1, 0] 
    %1886 = tensor.empty() : tensor<384x512xf32>
    %1887 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_717 : tensor<512xf32>) outs(%1886 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1888 = linalg.matmul ins(%collapsed_2784, %transposed_2786 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1887 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2787 = tensor.expand_shape %1888 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %1889 = tensor.empty() : tensor<1x384x512xf32>
    %1890 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2787, %1724 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%1889 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1891 = tensor.empty() : tensor<1x384x512xf32>
    %1892 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1890, %cst_158 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1891 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %1893 = tensor.empty() : tensor<1x384x512xf32>
    %1894 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1892, %cst_157 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%1893 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2788 = tensor.collapse_shape %1894 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2789 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1895 = tensor.empty() : tensor<512x128xf32>
    %transposed_2790 = linalg.transpose ins(%cst_716 : tensor<128x512xf32>) outs(%1895 : tensor<512x128xf32>) permutation = [1, 0] 
    %1896 = tensor.empty() : tensor<384x128xf32>
    %1897 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_715 : tensor<128xf32>) outs(%1896 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1898 = linalg.matmul ins(%collapsed_2788, %transposed_2790 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1897 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2791 = tensor.collapse_shape %1894 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2792 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1899 = tensor.empty() : tensor<512x128xf32>
    %transposed_2793 = linalg.transpose ins(%cst_714 : tensor<128x512xf32>) outs(%1899 : tensor<512x128xf32>) permutation = [1, 0] 
    %1900 = tensor.empty() : tensor<384x128xf32>
    %1901 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_713 : tensor<128xf32>) outs(%1900 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1902 = linalg.matmul ins(%collapsed_2791, %transposed_2793 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1901 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2794 = tensor.collapse_shape %1894 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2795 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1903 = tensor.empty() : tensor<512x128xf32>
    %transposed_2796 = linalg.transpose ins(%cst_712 : tensor<128x512xf32>) outs(%1903 : tensor<512x128xf32>) permutation = [1, 0] 
    %1904 = tensor.empty() : tensor<384x128xf32>
    %1905 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_711 : tensor<128xf32>) outs(%1904 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1906 = linalg.matmul ins(%collapsed_2794, %transposed_2796 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1905 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2797 = tensor.expand_shape %1898 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2798 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1907 = tensor.empty() : tensor<128x128xf32>
    %transposed_2799 = linalg.transpose ins(%cst_710 : tensor<128x128xf32>) outs(%1907 : tensor<128x128xf32>) permutation = [1, 0] 
    %1908 = tensor.empty() : tensor<384x128xf32>
    %1909 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_709 : tensor<128xf32>) outs(%1908 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1910 = linalg.matmul ins(%1902, %transposed_2799 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1909 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2800 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1911 = tensor.empty() : tensor<128x128xf32>
    %transposed_2801 = linalg.transpose ins(%cst_708 : tensor<128x128xf32>) outs(%1911 : tensor<128x128xf32>) permutation = [1, 0] 
    %1912 = tensor.empty() : tensor<384x128xf32>
    %1913 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_707 : tensor<128xf32>) outs(%1912 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1914 = linalg.matmul ins(%1902, %transposed_2801 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1913 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2802 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1915 = tensor.empty() : tensor<128x128xf32>
    %transposed_2803 = linalg.transpose ins(%cst_706 : tensor<128x128xf32>) outs(%1915 : tensor<128x128xf32>) permutation = [1, 0] 
    %1916 = tensor.empty() : tensor<384x128xf32>
    %1917 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_705 : tensor<128xf32>) outs(%1916 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1918 = linalg.matmul ins(%1906, %transposed_2803 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1917 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2804 = tensor.expand_shape %1910 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2805 = tensor.expand_shape %1914 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2806 = tensor.expand_shape %1918 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %1919 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2807 = linalg.transpose ins(%expanded_2804 : tensor<1x384x4x32xf32>) outs(%1919 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1920 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2808 = linalg.transpose ins(%expanded_2806 : tensor<1x384x4x32xf32>) outs(%1920 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %1921 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2809 = linalg.transpose ins(%expanded_2805 : tensor<1x384x4x32xf32>) outs(%1921 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2810 = tensor.collapse_shape %transposed_2807 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2811 = tensor.extract_slice %collapsed_2810[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2812 = tensor.extract_slice %collapsed_2810[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2813 = tensor.extract_slice %collapsed_2810[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2814 = tensor.extract_slice %collapsed_2810[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2815 = tensor.collapse_shape %transposed_2809 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2816 = tensor.extract_slice %collapsed_2815[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1922 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2817 = linalg.transpose ins(%extracted_slice_2816 : tensor<1x32x384xf32>) outs(%1922 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2818 = tensor.extract_slice %collapsed_2815[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1923 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2819 = linalg.transpose ins(%extracted_slice_2818 : tensor<1x32x384xf32>) outs(%1923 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2820 = tensor.extract_slice %collapsed_2815[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1924 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2821 = linalg.transpose ins(%extracted_slice_2820 : tensor<1x32x384xf32>) outs(%1924 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2822 = tensor.extract_slice %collapsed_2815[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %1925 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2823 = linalg.transpose ins(%extracted_slice_2822 : tensor<1x32x384xf32>) outs(%1925 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2824 = tensor.collapse_shape %transposed_2817 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2825 = tensor.collapse_shape %extracted_slice_2811 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2826 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1926 = tensor.empty() : tensor<32x384xf32>
    %transposed_2827 = linalg.transpose ins(%collapsed_2824 : tensor<384x32xf32>) outs(%1926 : tensor<32x384xf32>) permutation = [1, 0] 
    %1927 = tensor.empty() : tensor<384x384xf32>
    %1928 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1927 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1929 = linalg.matmul ins(%collapsed_2825, %transposed_2827 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1928 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2828 = tensor.collapse_shape %transposed_2819 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2829 = tensor.collapse_shape %extracted_slice_2812 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2830 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1930 = tensor.empty() : tensor<32x384xf32>
    %transposed_2831 = linalg.transpose ins(%collapsed_2828 : tensor<384x32xf32>) outs(%1930 : tensor<32x384xf32>) permutation = [1, 0] 
    %1931 = tensor.empty() : tensor<384x384xf32>
    %1932 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1931 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1933 = linalg.matmul ins(%collapsed_2829, %transposed_2831 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1932 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2832 = tensor.collapse_shape %transposed_2821 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2833 = tensor.collapse_shape %extracted_slice_2813 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2834 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1934 = tensor.empty() : tensor<32x384xf32>
    %transposed_2835 = linalg.transpose ins(%collapsed_2832 : tensor<384x32xf32>) outs(%1934 : tensor<32x384xf32>) permutation = [1, 0] 
    %1935 = tensor.empty() : tensor<384x384xf32>
    %1936 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1935 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1937 = linalg.matmul ins(%collapsed_2833, %transposed_2835 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1936 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2836 = tensor.collapse_shape %transposed_2823 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2837 = tensor.collapse_shape %extracted_slice_2814 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2838 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1938 = tensor.empty() : tensor<32x384xf32>
    %transposed_2839 = linalg.transpose ins(%collapsed_2836 : tensor<384x32xf32>) outs(%1938 : tensor<32x384xf32>) permutation = [1, 0] 
    %1939 = tensor.empty() : tensor<384x384xf32>
    %1940 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%1939 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %1941 = linalg.matmul ins(%collapsed_2837, %transposed_2839 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%1940 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2840 = arith.constant 0 : index
    %c384_2841 = arith.constant 384 : index
    %c384_2842 = arith.constant 384 : index
    %c768_2843 = arith.constant 768 : index
    %c384_2844 = arith.constant 384 : index
    %c768_2845 = arith.constant 768 : index
    %c1152_2846 = arith.constant 1152 : index
    %c384_2847 = arith.constant 384 : index
    %c1152_2848 = arith.constant 1152 : index
    %c1536_2849 = arith.constant 1536 : index
    %1942 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_2850 = tensor.insert_slice %1929 into %1942[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2851 = tensor.insert_slice %1933 into %inserted_slice_2850[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2852 = tensor.insert_slice %1937 into %inserted_slice_2851[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_2853 = tensor.insert_slice %1941 into %inserted_slice_2852[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_2854 = tensor.expand_shape %inserted_slice_2853 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %1943 = tensor.empty() : tensor<4x384x384xf32>
    %1944 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2854, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%1943 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_2855 = tensor.expand_shape %1944 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %1945 = tensor.empty() : tensor<1x4x384x384xf32>
    %1946 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2855, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%1945 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1947 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2856 = arith.constant -3.40282347E+38 : f32
    %1948 = linalg.fill ins(%cst_2856 : f32) outs(%1947 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2857 = linalg.reduce ins(%1946 : tensor<1x4x384x384xf32>) outs(%1948 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2858 = tensor.expand_shape %reduced_2857 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1949 = tensor.empty() : tensor<1x4x384x384xf32>
    %1950 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1946, %expanded_2858 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1949 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1951 = tensor.empty() : tensor<1x4x384x384xf32>
    %1952 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1950 : tensor<1x4x384x384xf32>) outs(%1951 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %1953 = tensor.empty() : tensor<1x4x384xf32>
    %cst_2859 = arith.constant 0.000000e+00 : f32
    %1954 = linalg.fill ins(%cst_2859 : f32) outs(%1953 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_2860 = linalg.reduce ins(%1952 : tensor<1x4x384x384xf32>) outs(%1954 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_2861 = tensor.expand_shape %reduced_2860 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %1955 = tensor.empty() : tensor<1x4x384x1xf32>
    %1956 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2861 : tensor<1x4x384x1xf32>) outs(%1955 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %1957 = tensor.empty() : tensor<1x4x384x384xf32>
    %1958 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1952, %1956 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%1957 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_2862 = tensor.collapse_shape %1958 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_2863 = tensor.extract_slice %collapsed_2862[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2864 = tensor.extract_slice %collapsed_2862[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2865 = tensor.extract_slice %collapsed_2862[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_2866 = tensor.extract_slice %collapsed_2862[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_2867 = tensor.collapse_shape %transposed_2808 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2868 = tensor.extract_slice %collapsed_2867[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1959 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2869 = linalg.transpose ins(%extracted_slice_2868 : tensor<1x384x32xf32>) outs(%1959 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2870 = tensor.extract_slice %collapsed_2867[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1960 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2871 = linalg.transpose ins(%extracted_slice_2870 : tensor<1x384x32xf32>) outs(%1960 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2872 = tensor.extract_slice %collapsed_2867[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1961 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2873 = linalg.transpose ins(%extracted_slice_2872 : tensor<1x384x32xf32>) outs(%1961 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2874 = tensor.extract_slice %collapsed_2867[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %1962 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_2875 = linalg.transpose ins(%extracted_slice_2874 : tensor<1x384x32xf32>) outs(%1962 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2876 = tensor.collapse_shape %transposed_2869 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2877 = tensor.collapse_shape %extracted_slice_2863 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2878 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1963 = tensor.empty() : tensor<384x32xf32>
    %transposed_2879 = linalg.transpose ins(%collapsed_2876 : tensor<32x384xf32>) outs(%1963 : tensor<384x32xf32>) permutation = [1, 0] 
    %1964 = tensor.empty() : tensor<384x32xf32>
    %1965 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1964 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1966 = linalg.matmul ins(%collapsed_2877, %transposed_2879 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1965 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2880 = tensor.collapse_shape %transposed_2871 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2881 = tensor.collapse_shape %extracted_slice_2864 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2882 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1967 = tensor.empty() : tensor<384x32xf32>
    %transposed_2883 = linalg.transpose ins(%collapsed_2880 : tensor<32x384xf32>) outs(%1967 : tensor<384x32xf32>) permutation = [1, 0] 
    %1968 = tensor.empty() : tensor<384x32xf32>
    %1969 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1968 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1970 = linalg.matmul ins(%collapsed_2881, %transposed_2883 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1969 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2884 = tensor.collapse_shape %transposed_2873 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2885 = tensor.collapse_shape %extracted_slice_2865 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2886 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1971 = tensor.empty() : tensor<384x32xf32>
    %transposed_2887 = linalg.transpose ins(%collapsed_2884 : tensor<32x384xf32>) outs(%1971 : tensor<384x32xf32>) permutation = [1, 0] 
    %1972 = tensor.empty() : tensor<384x32xf32>
    %1973 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1972 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1974 = linalg.matmul ins(%collapsed_2885, %transposed_2887 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1973 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_2888 = tensor.collapse_shape %transposed_2875 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_2889 = tensor.collapse_shape %extracted_slice_2866 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_2890 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1975 = tensor.empty() : tensor<384x32xf32>
    %transposed_2891 = linalg.transpose ins(%collapsed_2888 : tensor<32x384xf32>) outs(%1975 : tensor<384x32xf32>) permutation = [1, 0] 
    %1976 = tensor.empty() : tensor<384x32xf32>
    %1977 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%1976 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %1978 = linalg.matmul ins(%collapsed_2889, %transposed_2891 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%1977 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_2892 = arith.constant 0 : index
    %c384_2893 = arith.constant 384 : index
    %c384_2894 = arith.constant 384 : index
    %c768_2895 = arith.constant 768 : index
    %c384_2896 = arith.constant 384 : index
    %c768_2897 = arith.constant 768 : index
    %c1152_2898 = arith.constant 1152 : index
    %c384_2899 = arith.constant 384 : index
    %c1152_2900 = arith.constant 1152 : index
    %c1536_2901 = arith.constant 1536 : index
    %1979 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_2902 = tensor.insert_slice %1966 into %1979[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2903 = tensor.insert_slice %1970 into %inserted_slice_2902[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2904 = tensor.insert_slice %1974 into %inserted_slice_2903[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_2905 = tensor.insert_slice %1978 into %inserted_slice_2904[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_2906 = tensor.expand_shape %inserted_slice_2905 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %1980 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_2907 = linalg.transpose ins(%expanded_2906 : tensor<4x384x32xf32>) outs(%1980 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_2908 = tensor.collapse_shape %transposed_2907 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_2909 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1981 = tensor.empty() : tensor<128x128xf32>
    %transposed_2910 = linalg.transpose ins(%cst_704 : tensor<128x128xf32>) outs(%1981 : tensor<128x128xf32>) permutation = [1, 0] 
    %1982 = tensor.empty() : tensor<384x128xf32>
    %1983 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_703 : tensor<128xf32>) outs(%1982 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %1984 = linalg.matmul ins(%collapsed_2908, %transposed_2910 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%1983 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2911 = tensor.expand_shape %1984 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %1985 = tensor.empty() : tensor<1x384x128xf32>
    %1986 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2911, %expanded_2797 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%1985 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1987 = tensor.empty() : tensor<1x384x128xf32>
    %1988 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1986, %cst_156 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1987 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %1989 = tensor.empty() : tensor<1x384x128xf32>
    %1990 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1988, %cst_155 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%1989 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2912 = tensor.collapse_shape %1990 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2913 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1991 = tensor.empty() : tensor<128x512xf32>
    %transposed_2914 = linalg.transpose ins(%cst_702 : tensor<512x128xf32>) outs(%1991 : tensor<128x512xf32>) permutation = [1, 0] 
    %1992 = tensor.empty() : tensor<384x512xf32>
    %1993 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_701 : tensor<512xf32>) outs(%1992 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %1994 = linalg.matmul ins(%collapsed_2912, %transposed_2914 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%1993 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %1995 = tensor.empty() : tensor<384x512xf32>
    %1996 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%1994 : tensor<384x512xf32>) outs(%1995 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2915 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %1997 = tensor.empty() : tensor<512x128xf32>
    %transposed_2916 = linalg.transpose ins(%cst_700 : tensor<128x512xf32>) outs(%1997 : tensor<512x128xf32>) permutation = [1, 0] 
    %1998 = tensor.empty() : tensor<384x128xf32>
    %1999 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_699 : tensor<128xf32>) outs(%1998 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2000 = linalg.matmul ins(%1996, %transposed_2916 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%1999 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2917 = tensor.expand_shape %2000 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2001 = tensor.empty() : tensor<1x384x128xf32>
    %2002 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2917, %1990 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2001 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2003 = tensor.empty() : tensor<1x384x128xf32>
    %2004 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2002, %cst_154 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2003 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2005 = tensor.empty() : tensor<1x384x128xf32>
    %2006 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2004, %cst_153 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2005 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2918 = tensor.collapse_shape %2006 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2919 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2007 = tensor.empty() : tensor<128x512xf32>
    %transposed_2920 = linalg.transpose ins(%cst_698 : tensor<512x128xf32>) outs(%2007 : tensor<128x512xf32>) permutation = [1, 0] 
    %2008 = tensor.empty() : tensor<384x512xf32>
    %2009 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_697 : tensor<512xf32>) outs(%2008 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2010 = linalg.matmul ins(%collapsed_2918, %transposed_2920 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2009 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2011 = tensor.empty() : tensor<384x512xf32>
    %2012 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2010 : tensor<384x512xf32>) outs(%2011 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2921 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2013 = tensor.empty() : tensor<512x128xf32>
    %transposed_2922 = linalg.transpose ins(%cst_696 : tensor<128x512xf32>) outs(%2013 : tensor<512x128xf32>) permutation = [1, 0] 
    %2014 = tensor.empty() : tensor<384x128xf32>
    %2015 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_695 : tensor<128xf32>) outs(%2014 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2016 = linalg.matmul ins(%2012, %transposed_2922 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2015 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2923 = tensor.expand_shape %2016 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2017 = tensor.empty() : tensor<1x384x128xf32>
    %2018 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2923, %2006 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2017 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2019 = tensor.empty() : tensor<1x384x128xf32>
    %2020 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2018, %cst_152 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2019 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2021 = tensor.empty() : tensor<1x384x128xf32>
    %2022 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2020, %cst_151 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2021 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2924 = tensor.collapse_shape %2022 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2925 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2023 = tensor.empty() : tensor<128x512xf32>
    %transposed_2926 = linalg.transpose ins(%cst_694 : tensor<512x128xf32>) outs(%2023 : tensor<128x512xf32>) permutation = [1, 0] 
    %2024 = tensor.empty() : tensor<384x512xf32>
    %2025 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_693 : tensor<512xf32>) outs(%2024 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2026 = linalg.matmul ins(%collapsed_2924, %transposed_2926 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2025 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2027 = tensor.empty() : tensor<384x512xf32>
    %2028 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2026 : tensor<384x512xf32>) outs(%2027 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2927 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2029 = tensor.empty() : tensor<512x128xf32>
    %transposed_2928 = linalg.transpose ins(%cst_692 : tensor<128x512xf32>) outs(%2029 : tensor<512x128xf32>) permutation = [1, 0] 
    %2030 = tensor.empty() : tensor<384x128xf32>
    %2031 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_691 : tensor<128xf32>) outs(%2030 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2032 = linalg.matmul ins(%2028, %transposed_2928 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2031 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2929 = tensor.expand_shape %2032 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2033 = tensor.empty() : tensor<1x384x128xf32>
    %2034 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2929, %2022 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2033 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2035 = tensor.empty() : tensor<1x384x128xf32>
    %2036 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2034, %cst_150 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2035 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2037 = tensor.empty() : tensor<1x384x128xf32>
    %2038 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2036, %cst_149 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2037 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2930 = tensor.collapse_shape %2038 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2931 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2039 = tensor.empty() : tensor<128x512xf32>
    %transposed_2932 = linalg.transpose ins(%cst_690 : tensor<512x128xf32>) outs(%2039 : tensor<128x512xf32>) permutation = [1, 0] 
    %2040 = tensor.empty() : tensor<384x512xf32>
    %2041 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_689 : tensor<512xf32>) outs(%2040 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2042 = linalg.matmul ins(%collapsed_2930, %transposed_2932 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2041 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2043 = tensor.empty() : tensor<384x512xf32>
    %2044 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2042 : tensor<384x512xf32>) outs(%2043 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_2933 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2045 = tensor.empty() : tensor<512x128xf32>
    %transposed_2934 = linalg.transpose ins(%cst_688 : tensor<128x512xf32>) outs(%2045 : tensor<512x128xf32>) permutation = [1, 0] 
    %2046 = tensor.empty() : tensor<384x128xf32>
    %2047 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_687 : tensor<128xf32>) outs(%2046 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2048 = linalg.matmul ins(%2044, %transposed_2934 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2047 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2935 = tensor.expand_shape %2048 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2049 = tensor.empty() : tensor<1x384x128xf32>
    %2050 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2935, %2038 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2049 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2051 = tensor.empty() : tensor<1x384x128xf32>
    %2052 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2050, %cst_148 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2051 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2053 = tensor.empty() : tensor<1x384x128xf32>
    %2054 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2052, %cst_147 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2053 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_2936 = tensor.collapse_shape %2054 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_2937 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2055 = tensor.empty() : tensor<128x512xf32>
    %transposed_2938 = linalg.transpose ins(%cst_686 : tensor<512x128xf32>) outs(%2055 : tensor<128x512xf32>) permutation = [1, 0] 
    %2056 = tensor.empty() : tensor<384x512xf32>
    %2057 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_685 : tensor<512xf32>) outs(%2056 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2058 = linalg.matmul ins(%collapsed_2936, %transposed_2938 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2057 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_2939 = tensor.expand_shape %2058 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2059 = tensor.empty() : tensor<1x384x512xf32>
    %2060 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2939, %1894 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2059 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2061 = tensor.empty() : tensor<1x384x512xf32>
    %2062 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2060, %cst_146 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2061 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2063 = tensor.empty() : tensor<1x384x512xf32>
    %2064 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2062, %cst_145 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2063 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_2940 = tensor.collapse_shape %2064 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2941 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2065 = tensor.empty() : tensor<512x128xf32>
    %transposed_2942 = linalg.transpose ins(%cst_684 : tensor<128x512xf32>) outs(%2065 : tensor<512x128xf32>) permutation = [1, 0] 
    %2066 = tensor.empty() : tensor<384x128xf32>
    %2067 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_683 : tensor<128xf32>) outs(%2066 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2068 = linalg.matmul ins(%collapsed_2940, %transposed_2942 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2067 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2943 = tensor.collapse_shape %2064 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2944 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2069 = tensor.empty() : tensor<512x128xf32>
    %transposed_2945 = linalg.transpose ins(%cst_682 : tensor<128x512xf32>) outs(%2069 : tensor<512x128xf32>) permutation = [1, 0] 
    %2070 = tensor.empty() : tensor<384x128xf32>
    %2071 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_681 : tensor<128xf32>) outs(%2070 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2072 = linalg.matmul ins(%collapsed_2943, %transposed_2945 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2071 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_2946 = tensor.collapse_shape %2064 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_2947 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2073 = tensor.empty() : tensor<512x128xf32>
    %transposed_2948 = linalg.transpose ins(%cst_680 : tensor<128x512xf32>) outs(%2073 : tensor<512x128xf32>) permutation = [1, 0] 
    %2074 = tensor.empty() : tensor<384x128xf32>
    %2075 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_679 : tensor<128xf32>) outs(%2074 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2076 = linalg.matmul ins(%collapsed_2946, %transposed_2948 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2075 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2949 = tensor.expand_shape %2068 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_2950 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2077 = tensor.empty() : tensor<128x128xf32>
    %transposed_2951 = linalg.transpose ins(%cst_678 : tensor<128x128xf32>) outs(%2077 : tensor<128x128xf32>) permutation = [1, 0] 
    %2078 = tensor.empty() : tensor<384x128xf32>
    %2079 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_677 : tensor<128xf32>) outs(%2078 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2080 = linalg.matmul ins(%2072, %transposed_2951 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2079 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2952 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2081 = tensor.empty() : tensor<128x128xf32>
    %transposed_2953 = linalg.transpose ins(%cst_676 : tensor<128x128xf32>) outs(%2081 : tensor<128x128xf32>) permutation = [1, 0] 
    %2082 = tensor.empty() : tensor<384x128xf32>
    %2083 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_675 : tensor<128xf32>) outs(%2082 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2084 = linalg.matmul ins(%2072, %transposed_2953 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2083 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_2954 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2085 = tensor.empty() : tensor<128x128xf32>
    %transposed_2955 = linalg.transpose ins(%cst_674 : tensor<128x128xf32>) outs(%2085 : tensor<128x128xf32>) permutation = [1, 0] 
    %2086 = tensor.empty() : tensor<384x128xf32>
    %2087 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_673 : tensor<128xf32>) outs(%2086 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2088 = linalg.matmul ins(%2076, %transposed_2955 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2087 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_2956 = tensor.expand_shape %2080 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2957 = tensor.expand_shape %2084 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_2958 = tensor.expand_shape %2088 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2089 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2959 = linalg.transpose ins(%expanded_2956 : tensor<1x384x4x32xf32>) outs(%2089 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2090 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_2960 = linalg.transpose ins(%expanded_2958 : tensor<1x384x4x32xf32>) outs(%2090 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2091 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_2961 = linalg.transpose ins(%expanded_2957 : tensor<1x384x4x32xf32>) outs(%2091 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_2962 = tensor.collapse_shape %transposed_2959 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_2963 = tensor.extract_slice %collapsed_2962[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2964 = tensor.extract_slice %collapsed_2962[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2965 = tensor.extract_slice %collapsed_2962[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_2966 = tensor.extract_slice %collapsed_2962[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_2967 = tensor.collapse_shape %transposed_2961 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_2968 = tensor.extract_slice %collapsed_2967[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2092 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2969 = linalg.transpose ins(%extracted_slice_2968 : tensor<1x32x384xf32>) outs(%2092 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2970 = tensor.extract_slice %collapsed_2967[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2093 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2971 = linalg.transpose ins(%extracted_slice_2970 : tensor<1x32x384xf32>) outs(%2093 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2972 = tensor.extract_slice %collapsed_2967[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2094 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2973 = linalg.transpose ins(%extracted_slice_2972 : tensor<1x32x384xf32>) outs(%2094 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_2974 = tensor.extract_slice %collapsed_2967[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2095 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_2975 = linalg.transpose ins(%extracted_slice_2974 : tensor<1x32x384xf32>) outs(%2095 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_2976 = tensor.collapse_shape %transposed_2969 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2977 = tensor.collapse_shape %extracted_slice_2963 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2978 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2096 = tensor.empty() : tensor<32x384xf32>
    %transposed_2979 = linalg.transpose ins(%collapsed_2976 : tensor<384x32xf32>) outs(%2096 : tensor<32x384xf32>) permutation = [1, 0] 
    %2097 = tensor.empty() : tensor<384x384xf32>
    %2098 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2097 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2099 = linalg.matmul ins(%collapsed_2977, %transposed_2979 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2098 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2980 = tensor.collapse_shape %transposed_2971 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2981 = tensor.collapse_shape %extracted_slice_2964 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2982 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2100 = tensor.empty() : tensor<32x384xf32>
    %transposed_2983 = linalg.transpose ins(%collapsed_2980 : tensor<384x32xf32>) outs(%2100 : tensor<32x384xf32>) permutation = [1, 0] 
    %2101 = tensor.empty() : tensor<384x384xf32>
    %2102 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2101 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2103 = linalg.matmul ins(%collapsed_2981, %transposed_2983 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2102 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2984 = tensor.collapse_shape %transposed_2973 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2985 = tensor.collapse_shape %extracted_slice_2965 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2986 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2104 = tensor.empty() : tensor<32x384xf32>
    %transposed_2987 = linalg.transpose ins(%collapsed_2984 : tensor<384x32xf32>) outs(%2104 : tensor<32x384xf32>) permutation = [1, 0] 
    %2105 = tensor.empty() : tensor<384x384xf32>
    %2106 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2105 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2107 = linalg.matmul ins(%collapsed_2985, %transposed_2987 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2106 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_2988 = tensor.collapse_shape %transposed_2975 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_2989 = tensor.collapse_shape %extracted_slice_2966 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_2990 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2108 = tensor.empty() : tensor<32x384xf32>
    %transposed_2991 = linalg.transpose ins(%collapsed_2988 : tensor<384x32xf32>) outs(%2108 : tensor<32x384xf32>) permutation = [1, 0] 
    %2109 = tensor.empty() : tensor<384x384xf32>
    %2110 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2109 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2111 = linalg.matmul ins(%collapsed_2989, %transposed_2991 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2110 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_2992 = arith.constant 0 : index
    %c384_2993 = arith.constant 384 : index
    %c384_2994 = arith.constant 384 : index
    %c768_2995 = arith.constant 768 : index
    %c384_2996 = arith.constant 384 : index
    %c768_2997 = arith.constant 768 : index
    %c1152_2998 = arith.constant 1152 : index
    %c384_2999 = arith.constant 384 : index
    %c1152_3000 = arith.constant 1152 : index
    %c1536_3001 = arith.constant 1536 : index
    %2112 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3002 = tensor.insert_slice %2099 into %2112[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3003 = tensor.insert_slice %2103 into %inserted_slice_3002[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3004 = tensor.insert_slice %2107 into %inserted_slice_3003[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3005 = tensor.insert_slice %2111 into %inserted_slice_3004[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3006 = tensor.expand_shape %inserted_slice_3005 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %2113 = tensor.empty() : tensor<4x384x384xf32>
    %2114 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3006, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%2113 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3007 = tensor.expand_shape %2114 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %2115 = tensor.empty() : tensor<1x4x384x384xf32>
    %2116 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3007, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%2115 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2117 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3008 = arith.constant -3.40282347E+38 : f32
    %2118 = linalg.fill ins(%cst_3008 : f32) outs(%2117 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3009 = linalg.reduce ins(%2116 : tensor<1x4x384x384xf32>) outs(%2118 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3010 = tensor.expand_shape %reduced_3009 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2119 = tensor.empty() : tensor<1x4x384x384xf32>
    %2120 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2116, %expanded_3010 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2119 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2121 = tensor.empty() : tensor<1x4x384x384xf32>
    %2122 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2120 : tensor<1x4x384x384xf32>) outs(%2121 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2123 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3011 = arith.constant 0.000000e+00 : f32
    %2124 = linalg.fill ins(%cst_3011 : f32) outs(%2123 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3012 = linalg.reduce ins(%2122 : tensor<1x4x384x384xf32>) outs(%2124 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3013 = tensor.expand_shape %reduced_3012 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2125 = tensor.empty() : tensor<1x4x384x1xf32>
    %2126 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3013 : tensor<1x4x384x1xf32>) outs(%2125 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %2127 = tensor.empty() : tensor<1x4x384x384xf32>
    %2128 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2122, %2126 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2127 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3014 = tensor.collapse_shape %2128 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3015 = tensor.extract_slice %collapsed_3014[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3016 = tensor.extract_slice %collapsed_3014[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3017 = tensor.extract_slice %collapsed_3014[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3018 = tensor.extract_slice %collapsed_3014[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3019 = tensor.collapse_shape %transposed_2960 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3020 = tensor.extract_slice %collapsed_3019[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2129 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3021 = linalg.transpose ins(%extracted_slice_3020 : tensor<1x384x32xf32>) outs(%2129 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3022 = tensor.extract_slice %collapsed_3019[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2130 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3023 = linalg.transpose ins(%extracted_slice_3022 : tensor<1x384x32xf32>) outs(%2130 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3024 = tensor.extract_slice %collapsed_3019[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2131 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3025 = linalg.transpose ins(%extracted_slice_3024 : tensor<1x384x32xf32>) outs(%2131 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3026 = tensor.extract_slice %collapsed_3019[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2132 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3027 = linalg.transpose ins(%extracted_slice_3026 : tensor<1x384x32xf32>) outs(%2132 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3028 = tensor.collapse_shape %transposed_3021 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3029 = tensor.collapse_shape %extracted_slice_3015 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3030 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2133 = tensor.empty() : tensor<384x32xf32>
    %transposed_3031 = linalg.transpose ins(%collapsed_3028 : tensor<32x384xf32>) outs(%2133 : tensor<384x32xf32>) permutation = [1, 0] 
    %2134 = tensor.empty() : tensor<384x32xf32>
    %2135 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2134 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2136 = linalg.matmul ins(%collapsed_3029, %transposed_3031 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2135 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3032 = tensor.collapse_shape %transposed_3023 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3033 = tensor.collapse_shape %extracted_slice_3016 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3034 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2137 = tensor.empty() : tensor<384x32xf32>
    %transposed_3035 = linalg.transpose ins(%collapsed_3032 : tensor<32x384xf32>) outs(%2137 : tensor<384x32xf32>) permutation = [1, 0] 
    %2138 = tensor.empty() : tensor<384x32xf32>
    %2139 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2138 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2140 = linalg.matmul ins(%collapsed_3033, %transposed_3035 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2139 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3036 = tensor.collapse_shape %transposed_3025 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3037 = tensor.collapse_shape %extracted_slice_3017 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3038 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2141 = tensor.empty() : tensor<384x32xf32>
    %transposed_3039 = linalg.transpose ins(%collapsed_3036 : tensor<32x384xf32>) outs(%2141 : tensor<384x32xf32>) permutation = [1, 0] 
    %2142 = tensor.empty() : tensor<384x32xf32>
    %2143 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2142 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2144 = linalg.matmul ins(%collapsed_3037, %transposed_3039 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2143 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3040 = tensor.collapse_shape %transposed_3027 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3041 = tensor.collapse_shape %extracted_slice_3018 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3042 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2145 = tensor.empty() : tensor<384x32xf32>
    %transposed_3043 = linalg.transpose ins(%collapsed_3040 : tensor<32x384xf32>) outs(%2145 : tensor<384x32xf32>) permutation = [1, 0] 
    %2146 = tensor.empty() : tensor<384x32xf32>
    %2147 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2146 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2148 = linalg.matmul ins(%collapsed_3041, %transposed_3043 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2147 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3044 = arith.constant 0 : index
    %c384_3045 = arith.constant 384 : index
    %c384_3046 = arith.constant 384 : index
    %c768_3047 = arith.constant 768 : index
    %c384_3048 = arith.constant 384 : index
    %c768_3049 = arith.constant 768 : index
    %c1152_3050 = arith.constant 1152 : index
    %c384_3051 = arith.constant 384 : index
    %c1152_3052 = arith.constant 1152 : index
    %c1536_3053 = arith.constant 1536 : index
    %2149 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3054 = tensor.insert_slice %2136 into %2149[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3055 = tensor.insert_slice %2140 into %inserted_slice_3054[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3056 = tensor.insert_slice %2144 into %inserted_slice_3055[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3057 = tensor.insert_slice %2148 into %inserted_slice_3056[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3058 = tensor.expand_shape %inserted_slice_3057 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %2150 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3059 = linalg.transpose ins(%expanded_3058 : tensor<4x384x32xf32>) outs(%2150 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3060 = tensor.collapse_shape %transposed_3059 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3061 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2151 = tensor.empty() : tensor<128x128xf32>
    %transposed_3062 = linalg.transpose ins(%cst_672 : tensor<128x128xf32>) outs(%2151 : tensor<128x128xf32>) permutation = [1, 0] 
    %2152 = tensor.empty() : tensor<384x128xf32>
    %2153 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_671 : tensor<128xf32>) outs(%2152 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2154 = linalg.matmul ins(%collapsed_3060, %transposed_3062 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2153 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3063 = tensor.expand_shape %2154 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2155 = tensor.empty() : tensor<1x384x128xf32>
    %2156 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3063, %expanded_2949 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2155 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2157 = tensor.empty() : tensor<1x384x128xf32>
    %2158 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2156, %cst_144 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2157 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2159 = tensor.empty() : tensor<1x384x128xf32>
    %2160 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2158, %cst_143 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2159 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3064 = tensor.collapse_shape %2160 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3065 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2161 = tensor.empty() : tensor<128x512xf32>
    %transposed_3066 = linalg.transpose ins(%cst_670 : tensor<512x128xf32>) outs(%2161 : tensor<128x512xf32>) permutation = [1, 0] 
    %2162 = tensor.empty() : tensor<384x512xf32>
    %2163 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_669 : tensor<512xf32>) outs(%2162 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2164 = linalg.matmul ins(%collapsed_3064, %transposed_3066 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2163 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2165 = tensor.empty() : tensor<384x512xf32>
    %2166 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2164 : tensor<384x512xf32>) outs(%2165 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3067 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2167 = tensor.empty() : tensor<512x128xf32>
    %transposed_3068 = linalg.transpose ins(%cst_668 : tensor<128x512xf32>) outs(%2167 : tensor<512x128xf32>) permutation = [1, 0] 
    %2168 = tensor.empty() : tensor<384x128xf32>
    %2169 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_667 : tensor<128xf32>) outs(%2168 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2170 = linalg.matmul ins(%2166, %transposed_3068 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2169 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3069 = tensor.expand_shape %2170 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2171 = tensor.empty() : tensor<1x384x128xf32>
    %2172 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3069, %2160 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2171 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2173 = tensor.empty() : tensor<1x384x128xf32>
    %2174 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2172, %cst_142 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2173 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2175 = tensor.empty() : tensor<1x384x128xf32>
    %2176 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2174, %cst_141 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2175 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3070 = tensor.collapse_shape %2176 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3071 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2177 = tensor.empty() : tensor<128x512xf32>
    %transposed_3072 = linalg.transpose ins(%cst_666 : tensor<512x128xf32>) outs(%2177 : tensor<128x512xf32>) permutation = [1, 0] 
    %2178 = tensor.empty() : tensor<384x512xf32>
    %2179 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_665 : tensor<512xf32>) outs(%2178 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2180 = linalg.matmul ins(%collapsed_3070, %transposed_3072 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2179 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2181 = tensor.empty() : tensor<384x512xf32>
    %2182 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2180 : tensor<384x512xf32>) outs(%2181 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3073 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2183 = tensor.empty() : tensor<512x128xf32>
    %transposed_3074 = linalg.transpose ins(%cst_664 : tensor<128x512xf32>) outs(%2183 : tensor<512x128xf32>) permutation = [1, 0] 
    %2184 = tensor.empty() : tensor<384x128xf32>
    %2185 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_663 : tensor<128xf32>) outs(%2184 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2186 = linalg.matmul ins(%2182, %transposed_3074 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2185 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3075 = tensor.expand_shape %2186 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2187 = tensor.empty() : tensor<1x384x128xf32>
    %2188 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3075, %2176 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2187 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2189 = tensor.empty() : tensor<1x384x128xf32>
    %2190 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2188, %cst_140 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2189 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2191 = tensor.empty() : tensor<1x384x128xf32>
    %2192 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2190, %cst_139 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2191 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3076 = tensor.collapse_shape %2192 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3077 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2193 = tensor.empty() : tensor<128x512xf32>
    %transposed_3078 = linalg.transpose ins(%cst_662 : tensor<512x128xf32>) outs(%2193 : tensor<128x512xf32>) permutation = [1, 0] 
    %2194 = tensor.empty() : tensor<384x512xf32>
    %2195 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_661 : tensor<512xf32>) outs(%2194 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2196 = linalg.matmul ins(%collapsed_3076, %transposed_3078 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2195 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2197 = tensor.empty() : tensor<384x512xf32>
    %2198 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2196 : tensor<384x512xf32>) outs(%2197 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3079 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2199 = tensor.empty() : tensor<512x128xf32>
    %transposed_3080 = linalg.transpose ins(%cst_660 : tensor<128x512xf32>) outs(%2199 : tensor<512x128xf32>) permutation = [1, 0] 
    %2200 = tensor.empty() : tensor<384x128xf32>
    %2201 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_659 : tensor<128xf32>) outs(%2200 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2202 = linalg.matmul ins(%2198, %transposed_3080 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2201 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3081 = tensor.expand_shape %2202 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2203 = tensor.empty() : tensor<1x384x128xf32>
    %2204 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3081, %2192 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2203 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2205 = tensor.empty() : tensor<1x384x128xf32>
    %2206 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2204, %cst_138 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2205 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2207 = tensor.empty() : tensor<1x384x128xf32>
    %2208 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2206, %cst_137 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2207 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3082 = tensor.collapse_shape %2208 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3083 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2209 = tensor.empty() : tensor<128x512xf32>
    %transposed_3084 = linalg.transpose ins(%cst_658 : tensor<512x128xf32>) outs(%2209 : tensor<128x512xf32>) permutation = [1, 0] 
    %2210 = tensor.empty() : tensor<384x512xf32>
    %2211 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_657 : tensor<512xf32>) outs(%2210 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2212 = linalg.matmul ins(%collapsed_3082, %transposed_3084 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2211 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2213 = tensor.empty() : tensor<384x512xf32>
    %2214 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2212 : tensor<384x512xf32>) outs(%2213 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3085 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2215 = tensor.empty() : tensor<512x128xf32>
    %transposed_3086 = linalg.transpose ins(%cst_656 : tensor<128x512xf32>) outs(%2215 : tensor<512x128xf32>) permutation = [1, 0] 
    %2216 = tensor.empty() : tensor<384x128xf32>
    %2217 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_655 : tensor<128xf32>) outs(%2216 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2218 = linalg.matmul ins(%2214, %transposed_3086 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2217 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3087 = tensor.expand_shape %2218 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2219 = tensor.empty() : tensor<1x384x128xf32>
    %2220 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3087, %2208 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2219 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2221 = tensor.empty() : tensor<1x384x128xf32>
    %2222 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2220, %cst_136 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2221 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2223 = tensor.empty() : tensor<1x384x128xf32>
    %2224 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2222, %cst_135 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2223 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3088 = tensor.collapse_shape %2224 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3089 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2225 = tensor.empty() : tensor<128x512xf32>
    %transposed_3090 = linalg.transpose ins(%cst_654 : tensor<512x128xf32>) outs(%2225 : tensor<128x512xf32>) permutation = [1, 0] 
    %2226 = tensor.empty() : tensor<384x512xf32>
    %2227 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_653 : tensor<512xf32>) outs(%2226 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2228 = linalg.matmul ins(%collapsed_3088, %transposed_3090 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2227 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_3091 = tensor.expand_shape %2228 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2229 = tensor.empty() : tensor<1x384x512xf32>
    %2230 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3091, %2064 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2229 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2231 = tensor.empty() : tensor<1x384x512xf32>
    %2232 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2230, %cst_134 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2231 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2233 = tensor.empty() : tensor<1x384x512xf32>
    %2234 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2232, %cst_133 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2233 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_3092 = tensor.collapse_shape %2234 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3093 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2235 = tensor.empty() : tensor<512x128xf32>
    %transposed_3094 = linalg.transpose ins(%cst_652 : tensor<128x512xf32>) outs(%2235 : tensor<512x128xf32>) permutation = [1, 0] 
    %2236 = tensor.empty() : tensor<384x128xf32>
    %2237 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_651 : tensor<128xf32>) outs(%2236 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2238 = linalg.matmul ins(%collapsed_3092, %transposed_3094 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2237 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3095 = tensor.collapse_shape %2234 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3096 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2239 = tensor.empty() : tensor<512x128xf32>
    %transposed_3097 = linalg.transpose ins(%cst_650 : tensor<128x512xf32>) outs(%2239 : tensor<512x128xf32>) permutation = [1, 0] 
    %2240 = tensor.empty() : tensor<384x128xf32>
    %2241 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_649 : tensor<128xf32>) outs(%2240 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2242 = linalg.matmul ins(%collapsed_3095, %transposed_3097 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2241 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3098 = tensor.collapse_shape %2234 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3099 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2243 = tensor.empty() : tensor<512x128xf32>
    %transposed_3100 = linalg.transpose ins(%cst_648 : tensor<128x512xf32>) outs(%2243 : tensor<512x128xf32>) permutation = [1, 0] 
    %2244 = tensor.empty() : tensor<384x128xf32>
    %2245 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_647 : tensor<128xf32>) outs(%2244 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2246 = linalg.matmul ins(%collapsed_3098, %transposed_3100 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2245 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3101 = tensor.expand_shape %2238 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_3102 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2247 = tensor.empty() : tensor<128x128xf32>
    %transposed_3103 = linalg.transpose ins(%cst_646 : tensor<128x128xf32>) outs(%2247 : tensor<128x128xf32>) permutation = [1, 0] 
    %2248 = tensor.empty() : tensor<384x128xf32>
    %2249 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_645 : tensor<128xf32>) outs(%2248 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2250 = linalg.matmul ins(%2242, %transposed_3103 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2249 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3104 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2251 = tensor.empty() : tensor<128x128xf32>
    %transposed_3105 = linalg.transpose ins(%cst_644 : tensor<128x128xf32>) outs(%2251 : tensor<128x128xf32>) permutation = [1, 0] 
    %2252 = tensor.empty() : tensor<384x128xf32>
    %2253 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_643 : tensor<128xf32>) outs(%2252 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2254 = linalg.matmul ins(%2242, %transposed_3105 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2253 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3106 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2255 = tensor.empty() : tensor<128x128xf32>
    %transposed_3107 = linalg.transpose ins(%cst_642 : tensor<128x128xf32>) outs(%2255 : tensor<128x128xf32>) permutation = [1, 0] 
    %2256 = tensor.empty() : tensor<384x128xf32>
    %2257 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_641 : tensor<128xf32>) outs(%2256 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2258 = linalg.matmul ins(%2246, %transposed_3107 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2257 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3108 = tensor.expand_shape %2250 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3109 = tensor.expand_shape %2254 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3110 = tensor.expand_shape %2258 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2259 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3111 = linalg.transpose ins(%expanded_3108 : tensor<1x384x4x32xf32>) outs(%2259 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2260 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3112 = linalg.transpose ins(%expanded_3110 : tensor<1x384x4x32xf32>) outs(%2260 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2261 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_3113 = linalg.transpose ins(%expanded_3109 : tensor<1x384x4x32xf32>) outs(%2261 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_3114 = tensor.collapse_shape %transposed_3111 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3115 = tensor.extract_slice %collapsed_3114[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3116 = tensor.extract_slice %collapsed_3114[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3117 = tensor.extract_slice %collapsed_3114[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3118 = tensor.extract_slice %collapsed_3114[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_3119 = tensor.collapse_shape %transposed_3113 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_3120 = tensor.extract_slice %collapsed_3119[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2262 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3121 = linalg.transpose ins(%extracted_slice_3120 : tensor<1x32x384xf32>) outs(%2262 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3122 = tensor.extract_slice %collapsed_3119[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2263 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3123 = linalg.transpose ins(%extracted_slice_3122 : tensor<1x32x384xf32>) outs(%2263 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3124 = tensor.extract_slice %collapsed_3119[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2264 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3125 = linalg.transpose ins(%extracted_slice_3124 : tensor<1x32x384xf32>) outs(%2264 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3126 = tensor.extract_slice %collapsed_3119[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2265 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3127 = linalg.transpose ins(%extracted_slice_3126 : tensor<1x32x384xf32>) outs(%2265 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3128 = tensor.collapse_shape %transposed_3121 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3129 = tensor.collapse_shape %extracted_slice_3115 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3130 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2266 = tensor.empty() : tensor<32x384xf32>
    %transposed_3131 = linalg.transpose ins(%collapsed_3128 : tensor<384x32xf32>) outs(%2266 : tensor<32x384xf32>) permutation = [1, 0] 
    %2267 = tensor.empty() : tensor<384x384xf32>
    %2268 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2267 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2269 = linalg.matmul ins(%collapsed_3129, %transposed_3131 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2268 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3132 = tensor.collapse_shape %transposed_3123 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3133 = tensor.collapse_shape %extracted_slice_3116 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3134 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2270 = tensor.empty() : tensor<32x384xf32>
    %transposed_3135 = linalg.transpose ins(%collapsed_3132 : tensor<384x32xf32>) outs(%2270 : tensor<32x384xf32>) permutation = [1, 0] 
    %2271 = tensor.empty() : tensor<384x384xf32>
    %2272 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2271 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2273 = linalg.matmul ins(%collapsed_3133, %transposed_3135 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2272 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3136 = tensor.collapse_shape %transposed_3125 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3137 = tensor.collapse_shape %extracted_slice_3117 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3138 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2274 = tensor.empty() : tensor<32x384xf32>
    %transposed_3139 = linalg.transpose ins(%collapsed_3136 : tensor<384x32xf32>) outs(%2274 : tensor<32x384xf32>) permutation = [1, 0] 
    %2275 = tensor.empty() : tensor<384x384xf32>
    %2276 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2275 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2277 = linalg.matmul ins(%collapsed_3137, %transposed_3139 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2276 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3140 = tensor.collapse_shape %transposed_3127 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3141 = tensor.collapse_shape %extracted_slice_3118 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3142 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2278 = tensor.empty() : tensor<32x384xf32>
    %transposed_3143 = linalg.transpose ins(%collapsed_3140 : tensor<384x32xf32>) outs(%2278 : tensor<32x384xf32>) permutation = [1, 0] 
    %2279 = tensor.empty() : tensor<384x384xf32>
    %2280 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2279 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2281 = linalg.matmul ins(%collapsed_3141, %transposed_3143 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2280 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_3144 = arith.constant 0 : index
    %c384_3145 = arith.constant 384 : index
    %c384_3146 = arith.constant 384 : index
    %c768_3147 = arith.constant 768 : index
    %c384_3148 = arith.constant 384 : index
    %c768_3149 = arith.constant 768 : index
    %c1152_3150 = arith.constant 1152 : index
    %c384_3151 = arith.constant 384 : index
    %c1152_3152 = arith.constant 1152 : index
    %c1536_3153 = arith.constant 1536 : index
    %2282 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3154 = tensor.insert_slice %2269 into %2282[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3155 = tensor.insert_slice %2273 into %inserted_slice_3154[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3156 = tensor.insert_slice %2277 into %inserted_slice_3155[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3157 = tensor.insert_slice %2281 into %inserted_slice_3156[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3158 = tensor.expand_shape %inserted_slice_3157 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %2283 = tensor.empty() : tensor<4x384x384xf32>
    %2284 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3158, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%2283 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3159 = tensor.expand_shape %2284 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %2285 = tensor.empty() : tensor<1x4x384x384xf32>
    %2286 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3159, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%2285 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2287 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3160 = arith.constant -3.40282347E+38 : f32
    %2288 = linalg.fill ins(%cst_3160 : f32) outs(%2287 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3161 = linalg.reduce ins(%2286 : tensor<1x4x384x384xf32>) outs(%2288 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3162 = tensor.expand_shape %reduced_3161 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2289 = tensor.empty() : tensor<1x4x384x384xf32>
    %2290 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2286, %expanded_3162 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2289 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2291 = tensor.empty() : tensor<1x4x384x384xf32>
    %2292 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2290 : tensor<1x4x384x384xf32>) outs(%2291 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2293 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3163 = arith.constant 0.000000e+00 : f32
    %2294 = linalg.fill ins(%cst_3163 : f32) outs(%2293 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3164 = linalg.reduce ins(%2292 : tensor<1x4x384x384xf32>) outs(%2294 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3165 = tensor.expand_shape %reduced_3164 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2295 = tensor.empty() : tensor<1x4x384x1xf32>
    %2296 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3165 : tensor<1x4x384x1xf32>) outs(%2295 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %2297 = tensor.empty() : tensor<1x4x384x384xf32>
    %2298 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2292, %2296 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2297 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3166 = tensor.collapse_shape %2298 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3167 = tensor.extract_slice %collapsed_3166[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3168 = tensor.extract_slice %collapsed_3166[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3169 = tensor.extract_slice %collapsed_3166[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3170 = tensor.extract_slice %collapsed_3166[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3171 = tensor.collapse_shape %transposed_3112 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3172 = tensor.extract_slice %collapsed_3171[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2299 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3173 = linalg.transpose ins(%extracted_slice_3172 : tensor<1x384x32xf32>) outs(%2299 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3174 = tensor.extract_slice %collapsed_3171[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2300 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3175 = linalg.transpose ins(%extracted_slice_3174 : tensor<1x384x32xf32>) outs(%2300 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3176 = tensor.extract_slice %collapsed_3171[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2301 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3177 = linalg.transpose ins(%extracted_slice_3176 : tensor<1x384x32xf32>) outs(%2301 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3178 = tensor.extract_slice %collapsed_3171[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2302 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3179 = linalg.transpose ins(%extracted_slice_3178 : tensor<1x384x32xf32>) outs(%2302 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3180 = tensor.collapse_shape %transposed_3173 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3181 = tensor.collapse_shape %extracted_slice_3167 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3182 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2303 = tensor.empty() : tensor<384x32xf32>
    %transposed_3183 = linalg.transpose ins(%collapsed_3180 : tensor<32x384xf32>) outs(%2303 : tensor<384x32xf32>) permutation = [1, 0] 
    %2304 = tensor.empty() : tensor<384x32xf32>
    %2305 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2304 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2306 = linalg.matmul ins(%collapsed_3181, %transposed_3183 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2305 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3184 = tensor.collapse_shape %transposed_3175 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3185 = tensor.collapse_shape %extracted_slice_3168 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3186 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2307 = tensor.empty() : tensor<384x32xf32>
    %transposed_3187 = linalg.transpose ins(%collapsed_3184 : tensor<32x384xf32>) outs(%2307 : tensor<384x32xf32>) permutation = [1, 0] 
    %2308 = tensor.empty() : tensor<384x32xf32>
    %2309 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2308 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2310 = linalg.matmul ins(%collapsed_3185, %transposed_3187 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2309 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3188 = tensor.collapse_shape %transposed_3177 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3189 = tensor.collapse_shape %extracted_slice_3169 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3190 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2311 = tensor.empty() : tensor<384x32xf32>
    %transposed_3191 = linalg.transpose ins(%collapsed_3188 : tensor<32x384xf32>) outs(%2311 : tensor<384x32xf32>) permutation = [1, 0] 
    %2312 = tensor.empty() : tensor<384x32xf32>
    %2313 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2312 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2314 = linalg.matmul ins(%collapsed_3189, %transposed_3191 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2313 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3192 = tensor.collapse_shape %transposed_3179 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3193 = tensor.collapse_shape %extracted_slice_3170 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3194 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2315 = tensor.empty() : tensor<384x32xf32>
    %transposed_3195 = linalg.transpose ins(%collapsed_3192 : tensor<32x384xf32>) outs(%2315 : tensor<384x32xf32>) permutation = [1, 0] 
    %2316 = tensor.empty() : tensor<384x32xf32>
    %2317 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2316 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2318 = linalg.matmul ins(%collapsed_3193, %transposed_3195 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2317 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3196 = arith.constant 0 : index
    %c384_3197 = arith.constant 384 : index
    %c384_3198 = arith.constant 384 : index
    %c768_3199 = arith.constant 768 : index
    %c384_3200 = arith.constant 384 : index
    %c768_3201 = arith.constant 768 : index
    %c1152_3202 = arith.constant 1152 : index
    %c384_3203 = arith.constant 384 : index
    %c1152_3204 = arith.constant 1152 : index
    %c1536_3205 = arith.constant 1536 : index
    %2319 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3206 = tensor.insert_slice %2306 into %2319[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3207 = tensor.insert_slice %2310 into %inserted_slice_3206[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3208 = tensor.insert_slice %2314 into %inserted_slice_3207[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3209 = tensor.insert_slice %2318 into %inserted_slice_3208[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3210 = tensor.expand_shape %inserted_slice_3209 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %2320 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3211 = linalg.transpose ins(%expanded_3210 : tensor<4x384x32xf32>) outs(%2320 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3212 = tensor.collapse_shape %transposed_3211 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3213 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2321 = tensor.empty() : tensor<128x128xf32>
    %transposed_3214 = linalg.transpose ins(%cst_640 : tensor<128x128xf32>) outs(%2321 : tensor<128x128xf32>) permutation = [1, 0] 
    %2322 = tensor.empty() : tensor<384x128xf32>
    %2323 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_639 : tensor<128xf32>) outs(%2322 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2324 = linalg.matmul ins(%collapsed_3212, %transposed_3214 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2323 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3215 = tensor.expand_shape %2324 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2325 = tensor.empty() : tensor<1x384x128xf32>
    %2326 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3215, %expanded_3101 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2325 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2327 = tensor.empty() : tensor<1x384x128xf32>
    %2328 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2326, %cst_132 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2327 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2329 = tensor.empty() : tensor<1x384x128xf32>
    %2330 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2328, %cst_131 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2329 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3216 = tensor.collapse_shape %2330 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3217 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2331 = tensor.empty() : tensor<128x512xf32>
    %transposed_3218 = linalg.transpose ins(%cst_638 : tensor<512x128xf32>) outs(%2331 : tensor<128x512xf32>) permutation = [1, 0] 
    %2332 = tensor.empty() : tensor<384x512xf32>
    %2333 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_637 : tensor<512xf32>) outs(%2332 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2334 = linalg.matmul ins(%collapsed_3216, %transposed_3218 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2333 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2335 = tensor.empty() : tensor<384x512xf32>
    %2336 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2334 : tensor<384x512xf32>) outs(%2335 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3219 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2337 = tensor.empty() : tensor<512x128xf32>
    %transposed_3220 = linalg.transpose ins(%cst_636 : tensor<128x512xf32>) outs(%2337 : tensor<512x128xf32>) permutation = [1, 0] 
    %2338 = tensor.empty() : tensor<384x128xf32>
    %2339 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_635 : tensor<128xf32>) outs(%2338 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2340 = linalg.matmul ins(%2336, %transposed_3220 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2339 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3221 = tensor.expand_shape %2340 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2341 = tensor.empty() : tensor<1x384x128xf32>
    %2342 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3221, %2330 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2341 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2343 = tensor.empty() : tensor<1x384x128xf32>
    %2344 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2342, %cst_130 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2343 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2345 = tensor.empty() : tensor<1x384x128xf32>
    %2346 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2344, %cst_129 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2345 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3222 = tensor.collapse_shape %2346 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3223 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2347 = tensor.empty() : tensor<128x512xf32>
    %transposed_3224 = linalg.transpose ins(%cst_634 : tensor<512x128xf32>) outs(%2347 : tensor<128x512xf32>) permutation = [1, 0] 
    %2348 = tensor.empty() : tensor<384x512xf32>
    %2349 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_633 : tensor<512xf32>) outs(%2348 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2350 = linalg.matmul ins(%collapsed_3222, %transposed_3224 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2349 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2351 = tensor.empty() : tensor<384x512xf32>
    %2352 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2350 : tensor<384x512xf32>) outs(%2351 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3225 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2353 = tensor.empty() : tensor<512x128xf32>
    %transposed_3226 = linalg.transpose ins(%cst_632 : tensor<128x512xf32>) outs(%2353 : tensor<512x128xf32>) permutation = [1, 0] 
    %2354 = tensor.empty() : tensor<384x128xf32>
    %2355 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_631 : tensor<128xf32>) outs(%2354 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2356 = linalg.matmul ins(%2352, %transposed_3226 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2355 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3227 = tensor.expand_shape %2356 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2357 = tensor.empty() : tensor<1x384x128xf32>
    %2358 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3227, %2346 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2357 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2359 = tensor.empty() : tensor<1x384x128xf32>
    %2360 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2358, %cst_128 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2359 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2361 = tensor.empty() : tensor<1x384x128xf32>
    %2362 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2360, %cst_127 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2361 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3228 = tensor.collapse_shape %2362 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3229 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2363 = tensor.empty() : tensor<128x512xf32>
    %transposed_3230 = linalg.transpose ins(%cst_630 : tensor<512x128xf32>) outs(%2363 : tensor<128x512xf32>) permutation = [1, 0] 
    %2364 = tensor.empty() : tensor<384x512xf32>
    %2365 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_629 : tensor<512xf32>) outs(%2364 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2366 = linalg.matmul ins(%collapsed_3228, %transposed_3230 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2365 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2367 = tensor.empty() : tensor<384x512xf32>
    %2368 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2366 : tensor<384x512xf32>) outs(%2367 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3231 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2369 = tensor.empty() : tensor<512x128xf32>
    %transposed_3232 = linalg.transpose ins(%cst_628 : tensor<128x512xf32>) outs(%2369 : tensor<512x128xf32>) permutation = [1, 0] 
    %2370 = tensor.empty() : tensor<384x128xf32>
    %2371 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_627 : tensor<128xf32>) outs(%2370 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2372 = linalg.matmul ins(%2368, %transposed_3232 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2371 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3233 = tensor.expand_shape %2372 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2373 = tensor.empty() : tensor<1x384x128xf32>
    %2374 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3233, %2362 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2373 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2375 = tensor.empty() : tensor<1x384x128xf32>
    %2376 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2374, %cst_126 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2375 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2377 = tensor.empty() : tensor<1x384x128xf32>
    %2378 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2376, %cst_125 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2377 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3234 = tensor.collapse_shape %2378 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3235 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2379 = tensor.empty() : tensor<128x512xf32>
    %transposed_3236 = linalg.transpose ins(%cst_626 : tensor<512x128xf32>) outs(%2379 : tensor<128x512xf32>) permutation = [1, 0] 
    %2380 = tensor.empty() : tensor<384x512xf32>
    %2381 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_625 : tensor<512xf32>) outs(%2380 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2382 = linalg.matmul ins(%collapsed_3234, %transposed_3236 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2381 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2383 = tensor.empty() : tensor<384x512xf32>
    %2384 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2382 : tensor<384x512xf32>) outs(%2383 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3237 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2385 = tensor.empty() : tensor<512x128xf32>
    %transposed_3238 = linalg.transpose ins(%cst_624 : tensor<128x512xf32>) outs(%2385 : tensor<512x128xf32>) permutation = [1, 0] 
    %2386 = tensor.empty() : tensor<384x128xf32>
    %2387 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_623 : tensor<128xf32>) outs(%2386 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2388 = linalg.matmul ins(%2384, %transposed_3238 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2387 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3239 = tensor.expand_shape %2388 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2389 = tensor.empty() : tensor<1x384x128xf32>
    %2390 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3239, %2378 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2389 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2391 = tensor.empty() : tensor<1x384x128xf32>
    %2392 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2390, %cst_124 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2391 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2393 = tensor.empty() : tensor<1x384x128xf32>
    %2394 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2392, %cst_123 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2393 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3240 = tensor.collapse_shape %2394 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3241 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2395 = tensor.empty() : tensor<128x512xf32>
    %transposed_3242 = linalg.transpose ins(%cst_622 : tensor<512x128xf32>) outs(%2395 : tensor<128x512xf32>) permutation = [1, 0] 
    %2396 = tensor.empty() : tensor<384x512xf32>
    %2397 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_621 : tensor<512xf32>) outs(%2396 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2398 = linalg.matmul ins(%collapsed_3240, %transposed_3242 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2397 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_3243 = tensor.expand_shape %2398 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2399 = tensor.empty() : tensor<1x384x512xf32>
    %2400 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3243, %2234 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2399 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2401 = tensor.empty() : tensor<1x384x512xf32>
    %2402 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2400, %cst_122 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2401 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2403 = tensor.empty() : tensor<1x384x512xf32>
    %2404 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2402, %cst_121 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2403 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_3244 = tensor.collapse_shape %2404 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3245 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2405 = tensor.empty() : tensor<512x128xf32>
    %transposed_3246 = linalg.transpose ins(%cst_620 : tensor<128x512xf32>) outs(%2405 : tensor<512x128xf32>) permutation = [1, 0] 
    %2406 = tensor.empty() : tensor<384x128xf32>
    %2407 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_619 : tensor<128xf32>) outs(%2406 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2408 = linalg.matmul ins(%collapsed_3244, %transposed_3246 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2407 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3247 = tensor.collapse_shape %2404 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3248 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2409 = tensor.empty() : tensor<512x128xf32>
    %transposed_3249 = linalg.transpose ins(%cst_618 : tensor<128x512xf32>) outs(%2409 : tensor<512x128xf32>) permutation = [1, 0] 
    %2410 = tensor.empty() : tensor<384x128xf32>
    %2411 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_617 : tensor<128xf32>) outs(%2410 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2412 = linalg.matmul ins(%collapsed_3247, %transposed_3249 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2411 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3250 = tensor.collapse_shape %2404 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3251 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2413 = tensor.empty() : tensor<512x128xf32>
    %transposed_3252 = linalg.transpose ins(%cst_616 : tensor<128x512xf32>) outs(%2413 : tensor<512x128xf32>) permutation = [1, 0] 
    %2414 = tensor.empty() : tensor<384x128xf32>
    %2415 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_615 : tensor<128xf32>) outs(%2414 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2416 = linalg.matmul ins(%collapsed_3250, %transposed_3252 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2415 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3253 = tensor.expand_shape %2408 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_3254 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2417 = tensor.empty() : tensor<128x128xf32>
    %transposed_3255 = linalg.transpose ins(%cst_614 : tensor<128x128xf32>) outs(%2417 : tensor<128x128xf32>) permutation = [1, 0] 
    %2418 = tensor.empty() : tensor<384x128xf32>
    %2419 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_613 : tensor<128xf32>) outs(%2418 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2420 = linalg.matmul ins(%2412, %transposed_3255 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2419 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3256 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2421 = tensor.empty() : tensor<128x128xf32>
    %transposed_3257 = linalg.transpose ins(%cst_612 : tensor<128x128xf32>) outs(%2421 : tensor<128x128xf32>) permutation = [1, 0] 
    %2422 = tensor.empty() : tensor<384x128xf32>
    %2423 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_611 : tensor<128xf32>) outs(%2422 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2424 = linalg.matmul ins(%2412, %transposed_3257 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2423 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3258 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2425 = tensor.empty() : tensor<128x128xf32>
    %transposed_3259 = linalg.transpose ins(%cst_610 : tensor<128x128xf32>) outs(%2425 : tensor<128x128xf32>) permutation = [1, 0] 
    %2426 = tensor.empty() : tensor<384x128xf32>
    %2427 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_609 : tensor<128xf32>) outs(%2426 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2428 = linalg.matmul ins(%2416, %transposed_3259 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2427 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3260 = tensor.expand_shape %2420 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3261 = tensor.expand_shape %2424 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3262 = tensor.expand_shape %2428 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2429 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3263 = linalg.transpose ins(%expanded_3260 : tensor<1x384x4x32xf32>) outs(%2429 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2430 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3264 = linalg.transpose ins(%expanded_3262 : tensor<1x384x4x32xf32>) outs(%2430 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2431 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_3265 = linalg.transpose ins(%expanded_3261 : tensor<1x384x4x32xf32>) outs(%2431 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_3266 = tensor.collapse_shape %transposed_3263 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3267 = tensor.extract_slice %collapsed_3266[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3268 = tensor.extract_slice %collapsed_3266[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3269 = tensor.extract_slice %collapsed_3266[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3270 = tensor.extract_slice %collapsed_3266[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_3271 = tensor.collapse_shape %transposed_3265 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_3272 = tensor.extract_slice %collapsed_3271[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2432 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3273 = linalg.transpose ins(%extracted_slice_3272 : tensor<1x32x384xf32>) outs(%2432 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3274 = tensor.extract_slice %collapsed_3271[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2433 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3275 = linalg.transpose ins(%extracted_slice_3274 : tensor<1x32x384xf32>) outs(%2433 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3276 = tensor.extract_slice %collapsed_3271[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2434 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3277 = linalg.transpose ins(%extracted_slice_3276 : tensor<1x32x384xf32>) outs(%2434 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3278 = tensor.extract_slice %collapsed_3271[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2435 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3279 = linalg.transpose ins(%extracted_slice_3278 : tensor<1x32x384xf32>) outs(%2435 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3280 = tensor.collapse_shape %transposed_3273 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3281 = tensor.collapse_shape %extracted_slice_3267 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3282 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2436 = tensor.empty() : tensor<32x384xf32>
    %transposed_3283 = linalg.transpose ins(%collapsed_3280 : tensor<384x32xf32>) outs(%2436 : tensor<32x384xf32>) permutation = [1, 0] 
    %2437 = tensor.empty() : tensor<384x384xf32>
    %2438 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2437 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2439 = linalg.matmul ins(%collapsed_3281, %transposed_3283 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2438 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3284 = tensor.collapse_shape %transposed_3275 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3285 = tensor.collapse_shape %extracted_slice_3268 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3286 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2440 = tensor.empty() : tensor<32x384xf32>
    %transposed_3287 = linalg.transpose ins(%collapsed_3284 : tensor<384x32xf32>) outs(%2440 : tensor<32x384xf32>) permutation = [1, 0] 
    %2441 = tensor.empty() : tensor<384x384xf32>
    %2442 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2441 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2443 = linalg.matmul ins(%collapsed_3285, %transposed_3287 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2442 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3288 = tensor.collapse_shape %transposed_3277 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3289 = tensor.collapse_shape %extracted_slice_3269 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3290 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2444 = tensor.empty() : tensor<32x384xf32>
    %transposed_3291 = linalg.transpose ins(%collapsed_3288 : tensor<384x32xf32>) outs(%2444 : tensor<32x384xf32>) permutation = [1, 0] 
    %2445 = tensor.empty() : tensor<384x384xf32>
    %2446 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2445 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2447 = linalg.matmul ins(%collapsed_3289, %transposed_3291 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2446 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3292 = tensor.collapse_shape %transposed_3279 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3293 = tensor.collapse_shape %extracted_slice_3270 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3294 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2448 = tensor.empty() : tensor<32x384xf32>
    %transposed_3295 = linalg.transpose ins(%collapsed_3292 : tensor<384x32xf32>) outs(%2448 : tensor<32x384xf32>) permutation = [1, 0] 
    %2449 = tensor.empty() : tensor<384x384xf32>
    %2450 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2449 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2451 = linalg.matmul ins(%collapsed_3293, %transposed_3295 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2450 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_3296 = arith.constant 0 : index
    %c384_3297 = arith.constant 384 : index
    %c384_3298 = arith.constant 384 : index
    %c768_3299 = arith.constant 768 : index
    %c384_3300 = arith.constant 384 : index
    %c768_3301 = arith.constant 768 : index
    %c1152_3302 = arith.constant 1152 : index
    %c384_3303 = arith.constant 384 : index
    %c1152_3304 = arith.constant 1152 : index
    %c1536_3305 = arith.constant 1536 : index
    %2452 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3306 = tensor.insert_slice %2439 into %2452[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3307 = tensor.insert_slice %2443 into %inserted_slice_3306[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3308 = tensor.insert_slice %2447 into %inserted_slice_3307[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3309 = tensor.insert_slice %2451 into %inserted_slice_3308[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3310 = tensor.expand_shape %inserted_slice_3309 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %2453 = tensor.empty() : tensor<4x384x384xf32>
    %2454 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3310, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%2453 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3311 = tensor.expand_shape %2454 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %2455 = tensor.empty() : tensor<1x4x384x384xf32>
    %2456 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3311, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%2455 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2457 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3312 = arith.constant -3.40282347E+38 : f32
    %2458 = linalg.fill ins(%cst_3312 : f32) outs(%2457 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3313 = linalg.reduce ins(%2456 : tensor<1x4x384x384xf32>) outs(%2458 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3314 = tensor.expand_shape %reduced_3313 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2459 = tensor.empty() : tensor<1x4x384x384xf32>
    %2460 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2456, %expanded_3314 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2459 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2461 = tensor.empty() : tensor<1x4x384x384xf32>
    %2462 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2460 : tensor<1x4x384x384xf32>) outs(%2461 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2463 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3315 = arith.constant 0.000000e+00 : f32
    %2464 = linalg.fill ins(%cst_3315 : f32) outs(%2463 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3316 = linalg.reduce ins(%2462 : tensor<1x4x384x384xf32>) outs(%2464 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3317 = tensor.expand_shape %reduced_3316 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2465 = tensor.empty() : tensor<1x4x384x1xf32>
    %2466 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3317 : tensor<1x4x384x1xf32>) outs(%2465 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %2467 = tensor.empty() : tensor<1x4x384x384xf32>
    %2468 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2462, %2466 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2467 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3318 = tensor.collapse_shape %2468 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3319 = tensor.extract_slice %collapsed_3318[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3320 = tensor.extract_slice %collapsed_3318[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3321 = tensor.extract_slice %collapsed_3318[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3322 = tensor.extract_slice %collapsed_3318[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3323 = tensor.collapse_shape %transposed_3264 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3324 = tensor.extract_slice %collapsed_3323[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2469 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3325 = linalg.transpose ins(%extracted_slice_3324 : tensor<1x384x32xf32>) outs(%2469 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3326 = tensor.extract_slice %collapsed_3323[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2470 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3327 = linalg.transpose ins(%extracted_slice_3326 : tensor<1x384x32xf32>) outs(%2470 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3328 = tensor.extract_slice %collapsed_3323[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2471 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3329 = linalg.transpose ins(%extracted_slice_3328 : tensor<1x384x32xf32>) outs(%2471 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3330 = tensor.extract_slice %collapsed_3323[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2472 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3331 = linalg.transpose ins(%extracted_slice_3330 : tensor<1x384x32xf32>) outs(%2472 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3332 = tensor.collapse_shape %transposed_3325 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3333 = tensor.collapse_shape %extracted_slice_3319 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3334 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2473 = tensor.empty() : tensor<384x32xf32>
    %transposed_3335 = linalg.transpose ins(%collapsed_3332 : tensor<32x384xf32>) outs(%2473 : tensor<384x32xf32>) permutation = [1, 0] 
    %2474 = tensor.empty() : tensor<384x32xf32>
    %2475 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2474 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2476 = linalg.matmul ins(%collapsed_3333, %transposed_3335 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2475 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3336 = tensor.collapse_shape %transposed_3327 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3337 = tensor.collapse_shape %extracted_slice_3320 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3338 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2477 = tensor.empty() : tensor<384x32xf32>
    %transposed_3339 = linalg.transpose ins(%collapsed_3336 : tensor<32x384xf32>) outs(%2477 : tensor<384x32xf32>) permutation = [1, 0] 
    %2478 = tensor.empty() : tensor<384x32xf32>
    %2479 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2478 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2480 = linalg.matmul ins(%collapsed_3337, %transposed_3339 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2479 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3340 = tensor.collapse_shape %transposed_3329 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3341 = tensor.collapse_shape %extracted_slice_3321 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3342 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2481 = tensor.empty() : tensor<384x32xf32>
    %transposed_3343 = linalg.transpose ins(%collapsed_3340 : tensor<32x384xf32>) outs(%2481 : tensor<384x32xf32>) permutation = [1, 0] 
    %2482 = tensor.empty() : tensor<384x32xf32>
    %2483 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2482 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2484 = linalg.matmul ins(%collapsed_3341, %transposed_3343 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2483 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3344 = tensor.collapse_shape %transposed_3331 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3345 = tensor.collapse_shape %extracted_slice_3322 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3346 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2485 = tensor.empty() : tensor<384x32xf32>
    %transposed_3347 = linalg.transpose ins(%collapsed_3344 : tensor<32x384xf32>) outs(%2485 : tensor<384x32xf32>) permutation = [1, 0] 
    %2486 = tensor.empty() : tensor<384x32xf32>
    %2487 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2486 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2488 = linalg.matmul ins(%collapsed_3345, %transposed_3347 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2487 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3348 = arith.constant 0 : index
    %c384_3349 = arith.constant 384 : index
    %c384_3350 = arith.constant 384 : index
    %c768_3351 = arith.constant 768 : index
    %c384_3352 = arith.constant 384 : index
    %c768_3353 = arith.constant 768 : index
    %c1152_3354 = arith.constant 1152 : index
    %c384_3355 = arith.constant 384 : index
    %c1152_3356 = arith.constant 1152 : index
    %c1536_3357 = arith.constant 1536 : index
    %2489 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3358 = tensor.insert_slice %2476 into %2489[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3359 = tensor.insert_slice %2480 into %inserted_slice_3358[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3360 = tensor.insert_slice %2484 into %inserted_slice_3359[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3361 = tensor.insert_slice %2488 into %inserted_slice_3360[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3362 = tensor.expand_shape %inserted_slice_3361 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %2490 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3363 = linalg.transpose ins(%expanded_3362 : tensor<4x384x32xf32>) outs(%2490 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3364 = tensor.collapse_shape %transposed_3363 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3365 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2491 = tensor.empty() : tensor<128x128xf32>
    %transposed_3366 = linalg.transpose ins(%cst_608 : tensor<128x128xf32>) outs(%2491 : tensor<128x128xf32>) permutation = [1, 0] 
    %2492 = tensor.empty() : tensor<384x128xf32>
    %2493 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_607 : tensor<128xf32>) outs(%2492 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2494 = linalg.matmul ins(%collapsed_3364, %transposed_3366 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2493 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3367 = tensor.expand_shape %2494 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2495 = tensor.empty() : tensor<1x384x128xf32>
    %2496 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3367, %expanded_3253 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2495 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2497 = tensor.empty() : tensor<1x384x128xf32>
    %2498 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2496, %cst_120 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2497 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2499 = tensor.empty() : tensor<1x384x128xf32>
    %2500 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2498, %cst_119 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2499 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3368 = tensor.collapse_shape %2500 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3369 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2501 = tensor.empty() : tensor<128x512xf32>
    %transposed_3370 = linalg.transpose ins(%cst_606 : tensor<512x128xf32>) outs(%2501 : tensor<128x512xf32>) permutation = [1, 0] 
    %2502 = tensor.empty() : tensor<384x512xf32>
    %2503 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_605 : tensor<512xf32>) outs(%2502 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2504 = linalg.matmul ins(%collapsed_3368, %transposed_3370 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2503 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2505 = tensor.empty() : tensor<384x512xf32>
    %2506 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2504 : tensor<384x512xf32>) outs(%2505 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3371 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2507 = tensor.empty() : tensor<512x128xf32>
    %transposed_3372 = linalg.transpose ins(%cst_604 : tensor<128x512xf32>) outs(%2507 : tensor<512x128xf32>) permutation = [1, 0] 
    %2508 = tensor.empty() : tensor<384x128xf32>
    %2509 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_603 : tensor<128xf32>) outs(%2508 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2510 = linalg.matmul ins(%2506, %transposed_3372 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2509 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3373 = tensor.expand_shape %2510 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2511 = tensor.empty() : tensor<1x384x128xf32>
    %2512 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3373, %2500 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2511 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2513 = tensor.empty() : tensor<1x384x128xf32>
    %2514 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2512, %cst_118 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2513 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2515 = tensor.empty() : tensor<1x384x128xf32>
    %2516 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2514, %cst_117 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2515 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3374 = tensor.collapse_shape %2516 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3375 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2517 = tensor.empty() : tensor<128x512xf32>
    %transposed_3376 = linalg.transpose ins(%cst_602 : tensor<512x128xf32>) outs(%2517 : tensor<128x512xf32>) permutation = [1, 0] 
    %2518 = tensor.empty() : tensor<384x512xf32>
    %2519 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_601 : tensor<512xf32>) outs(%2518 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2520 = linalg.matmul ins(%collapsed_3374, %transposed_3376 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2519 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2521 = tensor.empty() : tensor<384x512xf32>
    %2522 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2520 : tensor<384x512xf32>) outs(%2521 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3377 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2523 = tensor.empty() : tensor<512x128xf32>
    %transposed_3378 = linalg.transpose ins(%cst_600 : tensor<128x512xf32>) outs(%2523 : tensor<512x128xf32>) permutation = [1, 0] 
    %2524 = tensor.empty() : tensor<384x128xf32>
    %2525 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_599 : tensor<128xf32>) outs(%2524 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2526 = linalg.matmul ins(%2522, %transposed_3378 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2525 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3379 = tensor.expand_shape %2526 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2527 = tensor.empty() : tensor<1x384x128xf32>
    %2528 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3379, %2516 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2527 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2529 = tensor.empty() : tensor<1x384x128xf32>
    %2530 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2528, %cst_116 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2529 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2531 = tensor.empty() : tensor<1x384x128xf32>
    %2532 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2530, %cst_115 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2531 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3380 = tensor.collapse_shape %2532 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3381 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2533 = tensor.empty() : tensor<128x512xf32>
    %transposed_3382 = linalg.transpose ins(%cst_598 : tensor<512x128xf32>) outs(%2533 : tensor<128x512xf32>) permutation = [1, 0] 
    %2534 = tensor.empty() : tensor<384x512xf32>
    %2535 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_597 : tensor<512xf32>) outs(%2534 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2536 = linalg.matmul ins(%collapsed_3380, %transposed_3382 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2535 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2537 = tensor.empty() : tensor<384x512xf32>
    %2538 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2536 : tensor<384x512xf32>) outs(%2537 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3383 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2539 = tensor.empty() : tensor<512x128xf32>
    %transposed_3384 = linalg.transpose ins(%cst_596 : tensor<128x512xf32>) outs(%2539 : tensor<512x128xf32>) permutation = [1, 0] 
    %2540 = tensor.empty() : tensor<384x128xf32>
    %2541 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_595 : tensor<128xf32>) outs(%2540 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2542 = linalg.matmul ins(%2538, %transposed_3384 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2541 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3385 = tensor.expand_shape %2542 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2543 = tensor.empty() : tensor<1x384x128xf32>
    %2544 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3385, %2532 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2543 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2545 = tensor.empty() : tensor<1x384x128xf32>
    %2546 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2544, %cst_114 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2545 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2547 = tensor.empty() : tensor<1x384x128xf32>
    %2548 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2546, %cst_113 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2547 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3386 = tensor.collapse_shape %2548 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3387 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2549 = tensor.empty() : tensor<128x512xf32>
    %transposed_3388 = linalg.transpose ins(%cst_594 : tensor<512x128xf32>) outs(%2549 : tensor<128x512xf32>) permutation = [1, 0] 
    %2550 = tensor.empty() : tensor<384x512xf32>
    %2551 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_593 : tensor<512xf32>) outs(%2550 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2552 = linalg.matmul ins(%collapsed_3386, %transposed_3388 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2551 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2553 = tensor.empty() : tensor<384x512xf32>
    %2554 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2552 : tensor<384x512xf32>) outs(%2553 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3389 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2555 = tensor.empty() : tensor<512x128xf32>
    %transposed_3390 = linalg.transpose ins(%cst_592 : tensor<128x512xf32>) outs(%2555 : tensor<512x128xf32>) permutation = [1, 0] 
    %2556 = tensor.empty() : tensor<384x128xf32>
    %2557 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_591 : tensor<128xf32>) outs(%2556 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2558 = linalg.matmul ins(%2554, %transposed_3390 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2557 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3391 = tensor.expand_shape %2558 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2559 = tensor.empty() : tensor<1x384x128xf32>
    %2560 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3391, %2548 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2559 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2561 = tensor.empty() : tensor<1x384x128xf32>
    %2562 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2560, %cst_112 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2561 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2563 = tensor.empty() : tensor<1x384x128xf32>
    %2564 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2562, %cst_111 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2563 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3392 = tensor.collapse_shape %2564 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3393 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2565 = tensor.empty() : tensor<128x512xf32>
    %transposed_3394 = linalg.transpose ins(%cst_590 : tensor<512x128xf32>) outs(%2565 : tensor<128x512xf32>) permutation = [1, 0] 
    %2566 = tensor.empty() : tensor<384x512xf32>
    %2567 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_589 : tensor<512xf32>) outs(%2566 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2568 = linalg.matmul ins(%collapsed_3392, %transposed_3394 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2567 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_3395 = tensor.expand_shape %2568 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2569 = tensor.empty() : tensor<1x384x512xf32>
    %2570 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3395, %2404 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2569 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2571 = tensor.empty() : tensor<1x384x512xf32>
    %2572 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2570, %cst_110 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2571 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2573 = tensor.empty() : tensor<1x384x512xf32>
    %2574 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2572, %cst_109 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2573 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_3396 = tensor.collapse_shape %2574 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3397 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2575 = tensor.empty() : tensor<512x128xf32>
    %transposed_3398 = linalg.transpose ins(%cst_588 : tensor<128x512xf32>) outs(%2575 : tensor<512x128xf32>) permutation = [1, 0] 
    %2576 = tensor.empty() : tensor<384x128xf32>
    %2577 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_587 : tensor<128xf32>) outs(%2576 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2578 = linalg.matmul ins(%collapsed_3396, %transposed_3398 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2577 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3399 = tensor.collapse_shape %2574 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3400 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2579 = tensor.empty() : tensor<512x128xf32>
    %transposed_3401 = linalg.transpose ins(%cst_586 : tensor<128x512xf32>) outs(%2579 : tensor<512x128xf32>) permutation = [1, 0] 
    %2580 = tensor.empty() : tensor<384x128xf32>
    %2581 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_585 : tensor<128xf32>) outs(%2580 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2582 = linalg.matmul ins(%collapsed_3399, %transposed_3401 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2581 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3402 = tensor.collapse_shape %2574 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3403 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2583 = tensor.empty() : tensor<512x128xf32>
    %transposed_3404 = linalg.transpose ins(%cst_584 : tensor<128x512xf32>) outs(%2583 : tensor<512x128xf32>) permutation = [1, 0] 
    %2584 = tensor.empty() : tensor<384x128xf32>
    %2585 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_583 : tensor<128xf32>) outs(%2584 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2586 = linalg.matmul ins(%collapsed_3402, %transposed_3404 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2585 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3405 = tensor.expand_shape %2578 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_3406 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2587 = tensor.empty() : tensor<128x128xf32>
    %transposed_3407 = linalg.transpose ins(%cst_582 : tensor<128x128xf32>) outs(%2587 : tensor<128x128xf32>) permutation = [1, 0] 
    %2588 = tensor.empty() : tensor<384x128xf32>
    %2589 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_581 : tensor<128xf32>) outs(%2588 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2590 = linalg.matmul ins(%2582, %transposed_3407 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2589 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3408 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2591 = tensor.empty() : tensor<128x128xf32>
    %transposed_3409 = linalg.transpose ins(%cst_580 : tensor<128x128xf32>) outs(%2591 : tensor<128x128xf32>) permutation = [1, 0] 
    %2592 = tensor.empty() : tensor<384x128xf32>
    %2593 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_579 : tensor<128xf32>) outs(%2592 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2594 = linalg.matmul ins(%2582, %transposed_3409 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2593 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3410 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2595 = tensor.empty() : tensor<128x128xf32>
    %transposed_3411 = linalg.transpose ins(%cst_578 : tensor<128x128xf32>) outs(%2595 : tensor<128x128xf32>) permutation = [1, 0] 
    %2596 = tensor.empty() : tensor<384x128xf32>
    %2597 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_577 : tensor<128xf32>) outs(%2596 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2598 = linalg.matmul ins(%2586, %transposed_3411 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2597 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3412 = tensor.expand_shape %2590 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3413 = tensor.expand_shape %2594 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3414 = tensor.expand_shape %2598 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2599 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3415 = linalg.transpose ins(%expanded_3412 : tensor<1x384x4x32xf32>) outs(%2599 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2600 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3416 = linalg.transpose ins(%expanded_3414 : tensor<1x384x4x32xf32>) outs(%2600 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2601 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_3417 = linalg.transpose ins(%expanded_3413 : tensor<1x384x4x32xf32>) outs(%2601 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_3418 = tensor.collapse_shape %transposed_3415 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3419 = tensor.extract_slice %collapsed_3418[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3420 = tensor.extract_slice %collapsed_3418[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3421 = tensor.extract_slice %collapsed_3418[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3422 = tensor.extract_slice %collapsed_3418[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_3423 = tensor.collapse_shape %transposed_3417 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_3424 = tensor.extract_slice %collapsed_3423[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2602 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3425 = linalg.transpose ins(%extracted_slice_3424 : tensor<1x32x384xf32>) outs(%2602 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3426 = tensor.extract_slice %collapsed_3423[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2603 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3427 = linalg.transpose ins(%extracted_slice_3426 : tensor<1x32x384xf32>) outs(%2603 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3428 = tensor.extract_slice %collapsed_3423[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2604 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3429 = linalg.transpose ins(%extracted_slice_3428 : tensor<1x32x384xf32>) outs(%2604 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3430 = tensor.extract_slice %collapsed_3423[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2605 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3431 = linalg.transpose ins(%extracted_slice_3430 : tensor<1x32x384xf32>) outs(%2605 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3432 = tensor.collapse_shape %transposed_3425 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3433 = tensor.collapse_shape %extracted_slice_3419 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3434 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2606 = tensor.empty() : tensor<32x384xf32>
    %transposed_3435 = linalg.transpose ins(%collapsed_3432 : tensor<384x32xf32>) outs(%2606 : tensor<32x384xf32>) permutation = [1, 0] 
    %2607 = tensor.empty() : tensor<384x384xf32>
    %2608 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2607 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2609 = linalg.matmul ins(%collapsed_3433, %transposed_3435 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2608 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3436 = tensor.collapse_shape %transposed_3427 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3437 = tensor.collapse_shape %extracted_slice_3420 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3438 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2610 = tensor.empty() : tensor<32x384xf32>
    %transposed_3439 = linalg.transpose ins(%collapsed_3436 : tensor<384x32xf32>) outs(%2610 : tensor<32x384xf32>) permutation = [1, 0] 
    %2611 = tensor.empty() : tensor<384x384xf32>
    %2612 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2611 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2613 = linalg.matmul ins(%collapsed_3437, %transposed_3439 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2612 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3440 = tensor.collapse_shape %transposed_3429 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3441 = tensor.collapse_shape %extracted_slice_3421 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3442 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2614 = tensor.empty() : tensor<32x384xf32>
    %transposed_3443 = linalg.transpose ins(%collapsed_3440 : tensor<384x32xf32>) outs(%2614 : tensor<32x384xf32>) permutation = [1, 0] 
    %2615 = tensor.empty() : tensor<384x384xf32>
    %2616 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2615 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2617 = linalg.matmul ins(%collapsed_3441, %transposed_3443 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2616 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3444 = tensor.collapse_shape %transposed_3431 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3445 = tensor.collapse_shape %extracted_slice_3422 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3446 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2618 = tensor.empty() : tensor<32x384xf32>
    %transposed_3447 = linalg.transpose ins(%collapsed_3444 : tensor<384x32xf32>) outs(%2618 : tensor<32x384xf32>) permutation = [1, 0] 
    %2619 = tensor.empty() : tensor<384x384xf32>
    %2620 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2619 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2621 = linalg.matmul ins(%collapsed_3445, %transposed_3447 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2620 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_3448 = arith.constant 0 : index
    %c384_3449 = arith.constant 384 : index
    %c384_3450 = arith.constant 384 : index
    %c768_3451 = arith.constant 768 : index
    %c384_3452 = arith.constant 384 : index
    %c768_3453 = arith.constant 768 : index
    %c1152_3454 = arith.constant 1152 : index
    %c384_3455 = arith.constant 384 : index
    %c1152_3456 = arith.constant 1152 : index
    %c1536_3457 = arith.constant 1536 : index
    %2622 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3458 = tensor.insert_slice %2609 into %2622[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3459 = tensor.insert_slice %2613 into %inserted_slice_3458[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3460 = tensor.insert_slice %2617 into %inserted_slice_3459[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3461 = tensor.insert_slice %2621 into %inserted_slice_3460[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3462 = tensor.expand_shape %inserted_slice_3461 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %2623 = tensor.empty() : tensor<4x384x384xf32>
    %2624 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3462, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%2623 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3463 = tensor.expand_shape %2624 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %2625 = tensor.empty() : tensor<1x4x384x384xf32>
    %2626 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3463, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%2625 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2627 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3464 = arith.constant -3.40282347E+38 : f32
    %2628 = linalg.fill ins(%cst_3464 : f32) outs(%2627 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3465 = linalg.reduce ins(%2626 : tensor<1x4x384x384xf32>) outs(%2628 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3466 = tensor.expand_shape %reduced_3465 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2629 = tensor.empty() : tensor<1x4x384x384xf32>
    %2630 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2626, %expanded_3466 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2629 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2631 = tensor.empty() : tensor<1x4x384x384xf32>
    %2632 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2630 : tensor<1x4x384x384xf32>) outs(%2631 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2633 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3467 = arith.constant 0.000000e+00 : f32
    %2634 = linalg.fill ins(%cst_3467 : f32) outs(%2633 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3468 = linalg.reduce ins(%2632 : tensor<1x4x384x384xf32>) outs(%2634 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3469 = tensor.expand_shape %reduced_3468 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2635 = tensor.empty() : tensor<1x4x384x1xf32>
    %2636 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3469 : tensor<1x4x384x1xf32>) outs(%2635 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %2637 = tensor.empty() : tensor<1x4x384x384xf32>
    %2638 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2632, %2636 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2637 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3470 = tensor.collapse_shape %2638 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3471 = tensor.extract_slice %collapsed_3470[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3472 = tensor.extract_slice %collapsed_3470[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3473 = tensor.extract_slice %collapsed_3470[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3474 = tensor.extract_slice %collapsed_3470[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3475 = tensor.collapse_shape %transposed_3416 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3476 = tensor.extract_slice %collapsed_3475[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2639 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3477 = linalg.transpose ins(%extracted_slice_3476 : tensor<1x384x32xf32>) outs(%2639 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3478 = tensor.extract_slice %collapsed_3475[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2640 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3479 = linalg.transpose ins(%extracted_slice_3478 : tensor<1x384x32xf32>) outs(%2640 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3480 = tensor.extract_slice %collapsed_3475[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2641 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3481 = linalg.transpose ins(%extracted_slice_3480 : tensor<1x384x32xf32>) outs(%2641 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3482 = tensor.extract_slice %collapsed_3475[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2642 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3483 = linalg.transpose ins(%extracted_slice_3482 : tensor<1x384x32xf32>) outs(%2642 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3484 = tensor.collapse_shape %transposed_3477 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3485 = tensor.collapse_shape %extracted_slice_3471 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3486 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2643 = tensor.empty() : tensor<384x32xf32>
    %transposed_3487 = linalg.transpose ins(%collapsed_3484 : tensor<32x384xf32>) outs(%2643 : tensor<384x32xf32>) permutation = [1, 0] 
    %2644 = tensor.empty() : tensor<384x32xf32>
    %2645 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2644 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2646 = linalg.matmul ins(%collapsed_3485, %transposed_3487 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2645 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3488 = tensor.collapse_shape %transposed_3479 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3489 = tensor.collapse_shape %extracted_slice_3472 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3490 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2647 = tensor.empty() : tensor<384x32xf32>
    %transposed_3491 = linalg.transpose ins(%collapsed_3488 : tensor<32x384xf32>) outs(%2647 : tensor<384x32xf32>) permutation = [1, 0] 
    %2648 = tensor.empty() : tensor<384x32xf32>
    %2649 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2648 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2650 = linalg.matmul ins(%collapsed_3489, %transposed_3491 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2649 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3492 = tensor.collapse_shape %transposed_3481 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3493 = tensor.collapse_shape %extracted_slice_3473 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3494 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2651 = tensor.empty() : tensor<384x32xf32>
    %transposed_3495 = linalg.transpose ins(%collapsed_3492 : tensor<32x384xf32>) outs(%2651 : tensor<384x32xf32>) permutation = [1, 0] 
    %2652 = tensor.empty() : tensor<384x32xf32>
    %2653 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2652 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2654 = linalg.matmul ins(%collapsed_3493, %transposed_3495 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2653 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3496 = tensor.collapse_shape %transposed_3483 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3497 = tensor.collapse_shape %extracted_slice_3474 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3498 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2655 = tensor.empty() : tensor<384x32xf32>
    %transposed_3499 = linalg.transpose ins(%collapsed_3496 : tensor<32x384xf32>) outs(%2655 : tensor<384x32xf32>) permutation = [1, 0] 
    %2656 = tensor.empty() : tensor<384x32xf32>
    %2657 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2656 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2658 = linalg.matmul ins(%collapsed_3497, %transposed_3499 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2657 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3500 = arith.constant 0 : index
    %c384_3501 = arith.constant 384 : index
    %c384_3502 = arith.constant 384 : index
    %c768_3503 = arith.constant 768 : index
    %c384_3504 = arith.constant 384 : index
    %c768_3505 = arith.constant 768 : index
    %c1152_3506 = arith.constant 1152 : index
    %c384_3507 = arith.constant 384 : index
    %c1152_3508 = arith.constant 1152 : index
    %c1536_3509 = arith.constant 1536 : index
    %2659 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3510 = tensor.insert_slice %2646 into %2659[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3511 = tensor.insert_slice %2650 into %inserted_slice_3510[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3512 = tensor.insert_slice %2654 into %inserted_slice_3511[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3513 = tensor.insert_slice %2658 into %inserted_slice_3512[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3514 = tensor.expand_shape %inserted_slice_3513 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %2660 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3515 = linalg.transpose ins(%expanded_3514 : tensor<4x384x32xf32>) outs(%2660 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3516 = tensor.collapse_shape %transposed_3515 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3517 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2661 = tensor.empty() : tensor<128x128xf32>
    %transposed_3518 = linalg.transpose ins(%cst_576 : tensor<128x128xf32>) outs(%2661 : tensor<128x128xf32>) permutation = [1, 0] 
    %2662 = tensor.empty() : tensor<384x128xf32>
    %2663 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_575 : tensor<128xf32>) outs(%2662 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2664 = linalg.matmul ins(%collapsed_3516, %transposed_3518 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2663 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3519 = tensor.expand_shape %2664 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2665 = tensor.empty() : tensor<1x384x128xf32>
    %2666 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3519, %expanded_3405 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2665 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2667 = tensor.empty() : tensor<1x384x128xf32>
    %2668 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2666, %cst_108 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2667 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2669 = tensor.empty() : tensor<1x384x128xf32>
    %2670 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2668, %cst_107 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2669 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3520 = tensor.collapse_shape %2670 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3521 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2671 = tensor.empty() : tensor<128x512xf32>
    %transposed_3522 = linalg.transpose ins(%cst_574 : tensor<512x128xf32>) outs(%2671 : tensor<128x512xf32>) permutation = [1, 0] 
    %2672 = tensor.empty() : tensor<384x512xf32>
    %2673 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_573 : tensor<512xf32>) outs(%2672 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2674 = linalg.matmul ins(%collapsed_3520, %transposed_3522 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2673 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2675 = tensor.empty() : tensor<384x512xf32>
    %2676 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2674 : tensor<384x512xf32>) outs(%2675 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3523 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2677 = tensor.empty() : tensor<512x128xf32>
    %transposed_3524 = linalg.transpose ins(%cst_572 : tensor<128x512xf32>) outs(%2677 : tensor<512x128xf32>) permutation = [1, 0] 
    %2678 = tensor.empty() : tensor<384x128xf32>
    %2679 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_571 : tensor<128xf32>) outs(%2678 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2680 = linalg.matmul ins(%2676, %transposed_3524 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2679 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3525 = tensor.expand_shape %2680 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2681 = tensor.empty() : tensor<1x384x128xf32>
    %2682 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3525, %2670 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2681 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2683 = tensor.empty() : tensor<1x384x128xf32>
    %2684 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2682, %cst_106 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2683 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2685 = tensor.empty() : tensor<1x384x128xf32>
    %2686 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2684, %cst_105 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2685 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3526 = tensor.collapse_shape %2686 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3527 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2687 = tensor.empty() : tensor<128x512xf32>
    %transposed_3528 = linalg.transpose ins(%cst_570 : tensor<512x128xf32>) outs(%2687 : tensor<128x512xf32>) permutation = [1, 0] 
    %2688 = tensor.empty() : tensor<384x512xf32>
    %2689 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_569 : tensor<512xf32>) outs(%2688 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2690 = linalg.matmul ins(%collapsed_3526, %transposed_3528 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2689 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2691 = tensor.empty() : tensor<384x512xf32>
    %2692 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2690 : tensor<384x512xf32>) outs(%2691 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3529 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2693 = tensor.empty() : tensor<512x128xf32>
    %transposed_3530 = linalg.transpose ins(%cst_568 : tensor<128x512xf32>) outs(%2693 : tensor<512x128xf32>) permutation = [1, 0] 
    %2694 = tensor.empty() : tensor<384x128xf32>
    %2695 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_567 : tensor<128xf32>) outs(%2694 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2696 = linalg.matmul ins(%2692, %transposed_3530 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2695 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3531 = tensor.expand_shape %2696 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2697 = tensor.empty() : tensor<1x384x128xf32>
    %2698 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3531, %2686 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2697 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2699 = tensor.empty() : tensor<1x384x128xf32>
    %2700 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2698, %cst_104 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2699 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2701 = tensor.empty() : tensor<1x384x128xf32>
    %2702 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2700, %cst_103 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2701 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3532 = tensor.collapse_shape %2702 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3533 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2703 = tensor.empty() : tensor<128x512xf32>
    %transposed_3534 = linalg.transpose ins(%cst_566 : tensor<512x128xf32>) outs(%2703 : tensor<128x512xf32>) permutation = [1, 0] 
    %2704 = tensor.empty() : tensor<384x512xf32>
    %2705 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_565 : tensor<512xf32>) outs(%2704 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2706 = linalg.matmul ins(%collapsed_3532, %transposed_3534 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2705 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2707 = tensor.empty() : tensor<384x512xf32>
    %2708 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2706 : tensor<384x512xf32>) outs(%2707 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3535 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2709 = tensor.empty() : tensor<512x128xf32>
    %transposed_3536 = linalg.transpose ins(%cst_564 : tensor<128x512xf32>) outs(%2709 : tensor<512x128xf32>) permutation = [1, 0] 
    %2710 = tensor.empty() : tensor<384x128xf32>
    %2711 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_563 : tensor<128xf32>) outs(%2710 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2712 = linalg.matmul ins(%2708, %transposed_3536 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2711 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3537 = tensor.expand_shape %2712 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2713 = tensor.empty() : tensor<1x384x128xf32>
    %2714 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3537, %2702 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2713 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2715 = tensor.empty() : tensor<1x384x128xf32>
    %2716 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2714, %cst_102 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2715 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2717 = tensor.empty() : tensor<1x384x128xf32>
    %2718 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2716, %cst_101 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2717 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3538 = tensor.collapse_shape %2718 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3539 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2719 = tensor.empty() : tensor<128x512xf32>
    %transposed_3540 = linalg.transpose ins(%cst_562 : tensor<512x128xf32>) outs(%2719 : tensor<128x512xf32>) permutation = [1, 0] 
    %2720 = tensor.empty() : tensor<384x512xf32>
    %2721 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_561 : tensor<512xf32>) outs(%2720 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2722 = linalg.matmul ins(%collapsed_3538, %transposed_3540 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2721 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2723 = tensor.empty() : tensor<384x512xf32>
    %2724 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2722 : tensor<384x512xf32>) outs(%2723 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3541 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2725 = tensor.empty() : tensor<512x128xf32>
    %transposed_3542 = linalg.transpose ins(%cst_560 : tensor<128x512xf32>) outs(%2725 : tensor<512x128xf32>) permutation = [1, 0] 
    %2726 = tensor.empty() : tensor<384x128xf32>
    %2727 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_559 : tensor<128xf32>) outs(%2726 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2728 = linalg.matmul ins(%2724, %transposed_3542 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2727 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3543 = tensor.expand_shape %2728 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2729 = tensor.empty() : tensor<1x384x128xf32>
    %2730 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3543, %2718 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2729 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2731 = tensor.empty() : tensor<1x384x128xf32>
    %2732 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2730, %cst_100 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2731 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2733 = tensor.empty() : tensor<1x384x128xf32>
    %2734 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2732, %cst_99 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2733 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3544 = tensor.collapse_shape %2734 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3545 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2735 = tensor.empty() : tensor<128x512xf32>
    %transposed_3546 = linalg.transpose ins(%cst_558 : tensor<512x128xf32>) outs(%2735 : tensor<128x512xf32>) permutation = [1, 0] 
    %2736 = tensor.empty() : tensor<384x512xf32>
    %2737 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_557 : tensor<512xf32>) outs(%2736 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2738 = linalg.matmul ins(%collapsed_3544, %transposed_3546 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2737 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_3547 = tensor.expand_shape %2738 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2739 = tensor.empty() : tensor<1x384x512xf32>
    %2740 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3547, %2574 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2739 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2741 = tensor.empty() : tensor<1x384x512xf32>
    %2742 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2740, %cst_98 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2741 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2743 = tensor.empty() : tensor<1x384x512xf32>
    %2744 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2742, %cst_97 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2743 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_3548 = tensor.collapse_shape %2744 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3549 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2745 = tensor.empty() : tensor<512x128xf32>
    %transposed_3550 = linalg.transpose ins(%cst_556 : tensor<128x512xf32>) outs(%2745 : tensor<512x128xf32>) permutation = [1, 0] 
    %2746 = tensor.empty() : tensor<384x128xf32>
    %2747 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_555 : tensor<128xf32>) outs(%2746 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2748 = linalg.matmul ins(%collapsed_3548, %transposed_3550 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2747 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3551 = tensor.collapse_shape %2744 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3552 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2749 = tensor.empty() : tensor<512x128xf32>
    %transposed_3553 = linalg.transpose ins(%cst_554 : tensor<128x512xf32>) outs(%2749 : tensor<512x128xf32>) permutation = [1, 0] 
    %2750 = tensor.empty() : tensor<384x128xf32>
    %2751 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_553 : tensor<128xf32>) outs(%2750 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2752 = linalg.matmul ins(%collapsed_3551, %transposed_3553 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2751 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3554 = tensor.collapse_shape %2744 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3555 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2753 = tensor.empty() : tensor<512x128xf32>
    %transposed_3556 = linalg.transpose ins(%cst_552 : tensor<128x512xf32>) outs(%2753 : tensor<512x128xf32>) permutation = [1, 0] 
    %2754 = tensor.empty() : tensor<384x128xf32>
    %2755 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_551 : tensor<128xf32>) outs(%2754 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2756 = linalg.matmul ins(%collapsed_3554, %transposed_3556 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2755 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3557 = tensor.expand_shape %2748 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_3558 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2757 = tensor.empty() : tensor<128x128xf32>
    %transposed_3559 = linalg.transpose ins(%cst_550 : tensor<128x128xf32>) outs(%2757 : tensor<128x128xf32>) permutation = [1, 0] 
    %2758 = tensor.empty() : tensor<384x128xf32>
    %2759 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_549 : tensor<128xf32>) outs(%2758 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2760 = linalg.matmul ins(%2752, %transposed_3559 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2759 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3560 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2761 = tensor.empty() : tensor<128x128xf32>
    %transposed_3561 = linalg.transpose ins(%cst_548 : tensor<128x128xf32>) outs(%2761 : tensor<128x128xf32>) permutation = [1, 0] 
    %2762 = tensor.empty() : tensor<384x128xf32>
    %2763 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_547 : tensor<128xf32>) outs(%2762 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2764 = linalg.matmul ins(%2752, %transposed_3561 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2763 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3562 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2765 = tensor.empty() : tensor<128x128xf32>
    %transposed_3563 = linalg.transpose ins(%cst_546 : tensor<128x128xf32>) outs(%2765 : tensor<128x128xf32>) permutation = [1, 0] 
    %2766 = tensor.empty() : tensor<384x128xf32>
    %2767 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_545 : tensor<128xf32>) outs(%2766 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2768 = linalg.matmul ins(%2756, %transposed_3563 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2767 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3564 = tensor.expand_shape %2760 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3565 = tensor.expand_shape %2764 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3566 = tensor.expand_shape %2768 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2769 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3567 = linalg.transpose ins(%expanded_3564 : tensor<1x384x4x32xf32>) outs(%2769 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2770 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3568 = linalg.transpose ins(%expanded_3566 : tensor<1x384x4x32xf32>) outs(%2770 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2771 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_3569 = linalg.transpose ins(%expanded_3565 : tensor<1x384x4x32xf32>) outs(%2771 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_3570 = tensor.collapse_shape %transposed_3567 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3571 = tensor.extract_slice %collapsed_3570[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3572 = tensor.extract_slice %collapsed_3570[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3573 = tensor.extract_slice %collapsed_3570[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3574 = tensor.extract_slice %collapsed_3570[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_3575 = tensor.collapse_shape %transposed_3569 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_3576 = tensor.extract_slice %collapsed_3575[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2772 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3577 = linalg.transpose ins(%extracted_slice_3576 : tensor<1x32x384xf32>) outs(%2772 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3578 = tensor.extract_slice %collapsed_3575[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2773 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3579 = linalg.transpose ins(%extracted_slice_3578 : tensor<1x32x384xf32>) outs(%2773 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3580 = tensor.extract_slice %collapsed_3575[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2774 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3581 = linalg.transpose ins(%extracted_slice_3580 : tensor<1x32x384xf32>) outs(%2774 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3582 = tensor.extract_slice %collapsed_3575[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2775 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3583 = linalg.transpose ins(%extracted_slice_3582 : tensor<1x32x384xf32>) outs(%2775 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3584 = tensor.collapse_shape %transposed_3577 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3585 = tensor.collapse_shape %extracted_slice_3571 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3586 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2776 = tensor.empty() : tensor<32x384xf32>
    %transposed_3587 = linalg.transpose ins(%collapsed_3584 : tensor<384x32xf32>) outs(%2776 : tensor<32x384xf32>) permutation = [1, 0] 
    %2777 = tensor.empty() : tensor<384x384xf32>
    %2778 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2777 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2779 = linalg.matmul ins(%collapsed_3585, %transposed_3587 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2778 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3588 = tensor.collapse_shape %transposed_3579 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3589 = tensor.collapse_shape %extracted_slice_3572 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3590 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2780 = tensor.empty() : tensor<32x384xf32>
    %transposed_3591 = linalg.transpose ins(%collapsed_3588 : tensor<384x32xf32>) outs(%2780 : tensor<32x384xf32>) permutation = [1, 0] 
    %2781 = tensor.empty() : tensor<384x384xf32>
    %2782 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2781 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2783 = linalg.matmul ins(%collapsed_3589, %transposed_3591 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2782 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3592 = tensor.collapse_shape %transposed_3581 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3593 = tensor.collapse_shape %extracted_slice_3573 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3594 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2784 = tensor.empty() : tensor<32x384xf32>
    %transposed_3595 = linalg.transpose ins(%collapsed_3592 : tensor<384x32xf32>) outs(%2784 : tensor<32x384xf32>) permutation = [1, 0] 
    %2785 = tensor.empty() : tensor<384x384xf32>
    %2786 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2785 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2787 = linalg.matmul ins(%collapsed_3593, %transposed_3595 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2786 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3596 = tensor.collapse_shape %transposed_3583 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3597 = tensor.collapse_shape %extracted_slice_3574 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3598 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2788 = tensor.empty() : tensor<32x384xf32>
    %transposed_3599 = linalg.transpose ins(%collapsed_3596 : tensor<384x32xf32>) outs(%2788 : tensor<32x384xf32>) permutation = [1, 0] 
    %2789 = tensor.empty() : tensor<384x384xf32>
    %2790 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2789 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2791 = linalg.matmul ins(%collapsed_3597, %transposed_3599 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2790 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_3600 = arith.constant 0 : index
    %c384_3601 = arith.constant 384 : index
    %c384_3602 = arith.constant 384 : index
    %c768_3603 = arith.constant 768 : index
    %c384_3604 = arith.constant 384 : index
    %c768_3605 = arith.constant 768 : index
    %c1152_3606 = arith.constant 1152 : index
    %c384_3607 = arith.constant 384 : index
    %c1152_3608 = arith.constant 1152 : index
    %c1536_3609 = arith.constant 1536 : index
    %2792 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3610 = tensor.insert_slice %2779 into %2792[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3611 = tensor.insert_slice %2783 into %inserted_slice_3610[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3612 = tensor.insert_slice %2787 into %inserted_slice_3611[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3613 = tensor.insert_slice %2791 into %inserted_slice_3612[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3614 = tensor.expand_shape %inserted_slice_3613 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %2793 = tensor.empty() : tensor<4x384x384xf32>
    %2794 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3614, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%2793 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3615 = tensor.expand_shape %2794 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %2795 = tensor.empty() : tensor<1x4x384x384xf32>
    %2796 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3615, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%2795 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2797 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3616 = arith.constant -3.40282347E+38 : f32
    %2798 = linalg.fill ins(%cst_3616 : f32) outs(%2797 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3617 = linalg.reduce ins(%2796 : tensor<1x4x384x384xf32>) outs(%2798 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3618 = tensor.expand_shape %reduced_3617 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2799 = tensor.empty() : tensor<1x4x384x384xf32>
    %2800 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2796, %expanded_3618 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2799 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2801 = tensor.empty() : tensor<1x4x384x384xf32>
    %2802 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2800 : tensor<1x4x384x384xf32>) outs(%2801 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2803 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3619 = arith.constant 0.000000e+00 : f32
    %2804 = linalg.fill ins(%cst_3619 : f32) outs(%2803 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3620 = linalg.reduce ins(%2802 : tensor<1x4x384x384xf32>) outs(%2804 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3621 = tensor.expand_shape %reduced_3620 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2805 = tensor.empty() : tensor<1x4x384x1xf32>
    %2806 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3621 : tensor<1x4x384x1xf32>) outs(%2805 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %2807 = tensor.empty() : tensor<1x4x384x384xf32>
    %2808 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2802, %2806 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2807 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3622 = tensor.collapse_shape %2808 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3623 = tensor.extract_slice %collapsed_3622[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3624 = tensor.extract_slice %collapsed_3622[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3625 = tensor.extract_slice %collapsed_3622[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3626 = tensor.extract_slice %collapsed_3622[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3627 = tensor.collapse_shape %transposed_3568 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3628 = tensor.extract_slice %collapsed_3627[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2809 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3629 = linalg.transpose ins(%extracted_slice_3628 : tensor<1x384x32xf32>) outs(%2809 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3630 = tensor.extract_slice %collapsed_3627[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2810 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3631 = linalg.transpose ins(%extracted_slice_3630 : tensor<1x384x32xf32>) outs(%2810 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3632 = tensor.extract_slice %collapsed_3627[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2811 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3633 = linalg.transpose ins(%extracted_slice_3632 : tensor<1x384x32xf32>) outs(%2811 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3634 = tensor.extract_slice %collapsed_3627[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2812 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3635 = linalg.transpose ins(%extracted_slice_3634 : tensor<1x384x32xf32>) outs(%2812 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3636 = tensor.collapse_shape %transposed_3629 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3637 = tensor.collapse_shape %extracted_slice_3623 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3638 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2813 = tensor.empty() : tensor<384x32xf32>
    %transposed_3639 = linalg.transpose ins(%collapsed_3636 : tensor<32x384xf32>) outs(%2813 : tensor<384x32xf32>) permutation = [1, 0] 
    %2814 = tensor.empty() : tensor<384x32xf32>
    %2815 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2814 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2816 = linalg.matmul ins(%collapsed_3637, %transposed_3639 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2815 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3640 = tensor.collapse_shape %transposed_3631 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3641 = tensor.collapse_shape %extracted_slice_3624 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3642 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2817 = tensor.empty() : tensor<384x32xf32>
    %transposed_3643 = linalg.transpose ins(%collapsed_3640 : tensor<32x384xf32>) outs(%2817 : tensor<384x32xf32>) permutation = [1, 0] 
    %2818 = tensor.empty() : tensor<384x32xf32>
    %2819 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2818 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2820 = linalg.matmul ins(%collapsed_3641, %transposed_3643 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2819 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3644 = tensor.collapse_shape %transposed_3633 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3645 = tensor.collapse_shape %extracted_slice_3625 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3646 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2821 = tensor.empty() : tensor<384x32xf32>
    %transposed_3647 = linalg.transpose ins(%collapsed_3644 : tensor<32x384xf32>) outs(%2821 : tensor<384x32xf32>) permutation = [1, 0] 
    %2822 = tensor.empty() : tensor<384x32xf32>
    %2823 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2822 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2824 = linalg.matmul ins(%collapsed_3645, %transposed_3647 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2823 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3648 = tensor.collapse_shape %transposed_3635 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3649 = tensor.collapse_shape %extracted_slice_3626 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3650 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2825 = tensor.empty() : tensor<384x32xf32>
    %transposed_3651 = linalg.transpose ins(%collapsed_3648 : tensor<32x384xf32>) outs(%2825 : tensor<384x32xf32>) permutation = [1, 0] 
    %2826 = tensor.empty() : tensor<384x32xf32>
    %2827 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2826 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2828 = linalg.matmul ins(%collapsed_3649, %transposed_3651 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2827 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3652 = arith.constant 0 : index
    %c384_3653 = arith.constant 384 : index
    %c384_3654 = arith.constant 384 : index
    %c768_3655 = arith.constant 768 : index
    %c384_3656 = arith.constant 384 : index
    %c768_3657 = arith.constant 768 : index
    %c1152_3658 = arith.constant 1152 : index
    %c384_3659 = arith.constant 384 : index
    %c1152_3660 = arith.constant 1152 : index
    %c1536_3661 = arith.constant 1536 : index
    %2829 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3662 = tensor.insert_slice %2816 into %2829[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3663 = tensor.insert_slice %2820 into %inserted_slice_3662[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3664 = tensor.insert_slice %2824 into %inserted_slice_3663[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3665 = tensor.insert_slice %2828 into %inserted_slice_3664[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3666 = tensor.expand_shape %inserted_slice_3665 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %2830 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3667 = linalg.transpose ins(%expanded_3666 : tensor<4x384x32xf32>) outs(%2830 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3668 = tensor.collapse_shape %transposed_3667 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3669 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2831 = tensor.empty() : tensor<128x128xf32>
    %transposed_3670 = linalg.transpose ins(%cst_544 : tensor<128x128xf32>) outs(%2831 : tensor<128x128xf32>) permutation = [1, 0] 
    %2832 = tensor.empty() : tensor<384x128xf32>
    %2833 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_543 : tensor<128xf32>) outs(%2832 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2834 = linalg.matmul ins(%collapsed_3668, %transposed_3670 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2833 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3671 = tensor.expand_shape %2834 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2835 = tensor.empty() : tensor<1x384x128xf32>
    %2836 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3671, %expanded_3557 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2835 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2837 = tensor.empty() : tensor<1x384x128xf32>
    %2838 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2836, %cst_96 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2837 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2839 = tensor.empty() : tensor<1x384x128xf32>
    %2840 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2838, %cst_95 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2839 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3672 = tensor.collapse_shape %2840 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3673 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2841 = tensor.empty() : tensor<128x512xf32>
    %transposed_3674 = linalg.transpose ins(%cst_542 : tensor<512x128xf32>) outs(%2841 : tensor<128x512xf32>) permutation = [1, 0] 
    %2842 = tensor.empty() : tensor<384x512xf32>
    %2843 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_541 : tensor<512xf32>) outs(%2842 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2844 = linalg.matmul ins(%collapsed_3672, %transposed_3674 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2843 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2845 = tensor.empty() : tensor<384x512xf32>
    %2846 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2844 : tensor<384x512xf32>) outs(%2845 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3675 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2847 = tensor.empty() : tensor<512x128xf32>
    %transposed_3676 = linalg.transpose ins(%cst_540 : tensor<128x512xf32>) outs(%2847 : tensor<512x128xf32>) permutation = [1, 0] 
    %2848 = tensor.empty() : tensor<384x128xf32>
    %2849 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_539 : tensor<128xf32>) outs(%2848 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2850 = linalg.matmul ins(%2846, %transposed_3676 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2849 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3677 = tensor.expand_shape %2850 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2851 = tensor.empty() : tensor<1x384x128xf32>
    %2852 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3677, %2840 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2851 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2853 = tensor.empty() : tensor<1x384x128xf32>
    %2854 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2852, %cst_94 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2853 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2855 = tensor.empty() : tensor<1x384x128xf32>
    %2856 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2854, %cst_93 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2855 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3678 = tensor.collapse_shape %2856 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3679 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2857 = tensor.empty() : tensor<128x512xf32>
    %transposed_3680 = linalg.transpose ins(%cst_538 : tensor<512x128xf32>) outs(%2857 : tensor<128x512xf32>) permutation = [1, 0] 
    %2858 = tensor.empty() : tensor<384x512xf32>
    %2859 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_537 : tensor<512xf32>) outs(%2858 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2860 = linalg.matmul ins(%collapsed_3678, %transposed_3680 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2859 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2861 = tensor.empty() : tensor<384x512xf32>
    %2862 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2860 : tensor<384x512xf32>) outs(%2861 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3681 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2863 = tensor.empty() : tensor<512x128xf32>
    %transposed_3682 = linalg.transpose ins(%cst_536 : tensor<128x512xf32>) outs(%2863 : tensor<512x128xf32>) permutation = [1, 0] 
    %2864 = tensor.empty() : tensor<384x128xf32>
    %2865 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_535 : tensor<128xf32>) outs(%2864 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2866 = linalg.matmul ins(%2862, %transposed_3682 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2865 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3683 = tensor.expand_shape %2866 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2867 = tensor.empty() : tensor<1x384x128xf32>
    %2868 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3683, %2856 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2867 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2869 = tensor.empty() : tensor<1x384x128xf32>
    %2870 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2868, %cst_92 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2869 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2871 = tensor.empty() : tensor<1x384x128xf32>
    %2872 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2870, %cst_91 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2871 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3684 = tensor.collapse_shape %2872 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3685 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2873 = tensor.empty() : tensor<128x512xf32>
    %transposed_3686 = linalg.transpose ins(%cst_534 : tensor<512x128xf32>) outs(%2873 : tensor<128x512xf32>) permutation = [1, 0] 
    %2874 = tensor.empty() : tensor<384x512xf32>
    %2875 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_533 : tensor<512xf32>) outs(%2874 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2876 = linalg.matmul ins(%collapsed_3684, %transposed_3686 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2875 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2877 = tensor.empty() : tensor<384x512xf32>
    %2878 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2876 : tensor<384x512xf32>) outs(%2877 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3687 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2879 = tensor.empty() : tensor<512x128xf32>
    %transposed_3688 = linalg.transpose ins(%cst_532 : tensor<128x512xf32>) outs(%2879 : tensor<512x128xf32>) permutation = [1, 0] 
    %2880 = tensor.empty() : tensor<384x128xf32>
    %2881 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_531 : tensor<128xf32>) outs(%2880 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2882 = linalg.matmul ins(%2878, %transposed_3688 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2881 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3689 = tensor.expand_shape %2882 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2883 = tensor.empty() : tensor<1x384x128xf32>
    %2884 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3689, %2872 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2883 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2885 = tensor.empty() : tensor<1x384x128xf32>
    %2886 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2884, %cst_90 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2885 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2887 = tensor.empty() : tensor<1x384x128xf32>
    %2888 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2886, %cst_89 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2887 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3690 = tensor.collapse_shape %2888 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3691 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2889 = tensor.empty() : tensor<128x512xf32>
    %transposed_3692 = linalg.transpose ins(%cst_530 : tensor<512x128xf32>) outs(%2889 : tensor<128x512xf32>) permutation = [1, 0] 
    %2890 = tensor.empty() : tensor<384x512xf32>
    %2891 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_529 : tensor<512xf32>) outs(%2890 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2892 = linalg.matmul ins(%collapsed_3690, %transposed_3692 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2891 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %2893 = tensor.empty() : tensor<384x512xf32>
    %2894 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%2892 : tensor<384x512xf32>) outs(%2893 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3693 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2895 = tensor.empty() : tensor<512x128xf32>
    %transposed_3694 = linalg.transpose ins(%cst_528 : tensor<128x512xf32>) outs(%2895 : tensor<512x128xf32>) permutation = [1, 0] 
    %2896 = tensor.empty() : tensor<384x128xf32>
    %2897 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_527 : tensor<128xf32>) outs(%2896 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2898 = linalg.matmul ins(%2894, %transposed_3694 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2897 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3695 = tensor.expand_shape %2898 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %2899 = tensor.empty() : tensor<1x384x128xf32>
    %2900 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3695, %2888 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%2899 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2901 = tensor.empty() : tensor<1x384x128xf32>
    %2902 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2900, %cst_88 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2901 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %2903 = tensor.empty() : tensor<1x384x128xf32>
    %2904 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2902, %cst_87 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%2903 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3696 = tensor.collapse_shape %2904 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3697 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2905 = tensor.empty() : tensor<128x512xf32>
    %transposed_3698 = linalg.transpose ins(%cst_526 : tensor<512x128xf32>) outs(%2905 : tensor<128x512xf32>) permutation = [1, 0] 
    %2906 = tensor.empty() : tensor<384x512xf32>
    %2907 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_525 : tensor<512xf32>) outs(%2906 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %2908 = linalg.matmul ins(%collapsed_3696, %transposed_3698 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%2907 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_3699 = tensor.expand_shape %2908 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %2909 = tensor.empty() : tensor<1x384x512xf32>
    %2910 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3699, %2744 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%2909 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2911 = tensor.empty() : tensor<1x384x512xf32>
    %2912 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2910, %cst_86 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2911 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %2913 = tensor.empty() : tensor<1x384x512xf32>
    %2914 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2912, %cst_85 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%2913 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_3700 = tensor.collapse_shape %2914 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3701 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2915 = tensor.empty() : tensor<512x128xf32>
    %transposed_3702 = linalg.transpose ins(%cst_524 : tensor<128x512xf32>) outs(%2915 : tensor<512x128xf32>) permutation = [1, 0] 
    %2916 = tensor.empty() : tensor<384x128xf32>
    %2917 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_523 : tensor<128xf32>) outs(%2916 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2918 = linalg.matmul ins(%collapsed_3700, %transposed_3702 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2917 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3703 = tensor.collapse_shape %2914 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3704 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2919 = tensor.empty() : tensor<512x128xf32>
    %transposed_3705 = linalg.transpose ins(%cst_522 : tensor<128x512xf32>) outs(%2919 : tensor<512x128xf32>) permutation = [1, 0] 
    %2920 = tensor.empty() : tensor<384x128xf32>
    %2921 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_521 : tensor<128xf32>) outs(%2920 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2922 = linalg.matmul ins(%collapsed_3703, %transposed_3705 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2921 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3706 = tensor.collapse_shape %2914 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3707 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2923 = tensor.empty() : tensor<512x128xf32>
    %transposed_3708 = linalg.transpose ins(%cst_520 : tensor<128x512xf32>) outs(%2923 : tensor<512x128xf32>) permutation = [1, 0] 
    %2924 = tensor.empty() : tensor<384x128xf32>
    %2925 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_519 : tensor<128xf32>) outs(%2924 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2926 = linalg.matmul ins(%collapsed_3706, %transposed_3708 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%2925 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3709 = tensor.expand_shape %2918 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_3710 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2927 = tensor.empty() : tensor<128x128xf32>
    %transposed_3711 = linalg.transpose ins(%cst_518 : tensor<128x128xf32>) outs(%2927 : tensor<128x128xf32>) permutation = [1, 0] 
    %2928 = tensor.empty() : tensor<384x128xf32>
    %2929 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_517 : tensor<128xf32>) outs(%2928 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2930 = linalg.matmul ins(%2922, %transposed_3711 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2929 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3712 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2931 = tensor.empty() : tensor<128x128xf32>
    %transposed_3713 = linalg.transpose ins(%cst_516 : tensor<128x128xf32>) outs(%2931 : tensor<128x128xf32>) permutation = [1, 0] 
    %2932 = tensor.empty() : tensor<384x128xf32>
    %2933 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_515 : tensor<128xf32>) outs(%2932 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2934 = linalg.matmul ins(%2922, %transposed_3713 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2933 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3714 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2935 = tensor.empty() : tensor<128x128xf32>
    %transposed_3715 = linalg.transpose ins(%cst_514 : tensor<128x128xf32>) outs(%2935 : tensor<128x128xf32>) permutation = [1, 0] 
    %2936 = tensor.empty() : tensor<384x128xf32>
    %2937 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_513 : tensor<128xf32>) outs(%2936 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %2938 = linalg.matmul ins(%2926, %transposed_3715 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%2937 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3716 = tensor.expand_shape %2930 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3717 = tensor.expand_shape %2934 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3718 = tensor.expand_shape %2938 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %2939 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3719 = linalg.transpose ins(%expanded_3716 : tensor<1x384x4x32xf32>) outs(%2939 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2940 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3720 = linalg.transpose ins(%expanded_3718 : tensor<1x384x4x32xf32>) outs(%2940 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %2941 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_3721 = linalg.transpose ins(%expanded_3717 : tensor<1x384x4x32xf32>) outs(%2941 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_3722 = tensor.collapse_shape %transposed_3719 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3723 = tensor.extract_slice %collapsed_3722[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3724 = tensor.extract_slice %collapsed_3722[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3725 = tensor.extract_slice %collapsed_3722[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3726 = tensor.extract_slice %collapsed_3722[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_3727 = tensor.collapse_shape %transposed_3721 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_3728 = tensor.extract_slice %collapsed_3727[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2942 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3729 = linalg.transpose ins(%extracted_slice_3728 : tensor<1x32x384xf32>) outs(%2942 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3730 = tensor.extract_slice %collapsed_3727[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2943 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3731 = linalg.transpose ins(%extracted_slice_3730 : tensor<1x32x384xf32>) outs(%2943 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3732 = tensor.extract_slice %collapsed_3727[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2944 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3733 = linalg.transpose ins(%extracted_slice_3732 : tensor<1x32x384xf32>) outs(%2944 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3734 = tensor.extract_slice %collapsed_3727[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %2945 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3735 = linalg.transpose ins(%extracted_slice_3734 : tensor<1x32x384xf32>) outs(%2945 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3736 = tensor.collapse_shape %transposed_3729 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3737 = tensor.collapse_shape %extracted_slice_3723 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3738 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2946 = tensor.empty() : tensor<32x384xf32>
    %transposed_3739 = linalg.transpose ins(%collapsed_3736 : tensor<384x32xf32>) outs(%2946 : tensor<32x384xf32>) permutation = [1, 0] 
    %2947 = tensor.empty() : tensor<384x384xf32>
    %2948 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2947 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2949 = linalg.matmul ins(%collapsed_3737, %transposed_3739 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2948 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3740 = tensor.collapse_shape %transposed_3731 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3741 = tensor.collapse_shape %extracted_slice_3724 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3742 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2950 = tensor.empty() : tensor<32x384xf32>
    %transposed_3743 = linalg.transpose ins(%collapsed_3740 : tensor<384x32xf32>) outs(%2950 : tensor<32x384xf32>) permutation = [1, 0] 
    %2951 = tensor.empty() : tensor<384x384xf32>
    %2952 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2951 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2953 = linalg.matmul ins(%collapsed_3741, %transposed_3743 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2952 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3744 = tensor.collapse_shape %transposed_3733 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3745 = tensor.collapse_shape %extracted_slice_3725 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3746 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2954 = tensor.empty() : tensor<32x384xf32>
    %transposed_3747 = linalg.transpose ins(%collapsed_3744 : tensor<384x32xf32>) outs(%2954 : tensor<32x384xf32>) permutation = [1, 0] 
    %2955 = tensor.empty() : tensor<384x384xf32>
    %2956 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2955 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2957 = linalg.matmul ins(%collapsed_3745, %transposed_3747 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2956 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3748 = tensor.collapse_shape %transposed_3735 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3749 = tensor.collapse_shape %extracted_slice_3726 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3750 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2958 = tensor.empty() : tensor<32x384xf32>
    %transposed_3751 = linalg.transpose ins(%collapsed_3748 : tensor<384x32xf32>) outs(%2958 : tensor<32x384xf32>) permutation = [1, 0] 
    %2959 = tensor.empty() : tensor<384x384xf32>
    %2960 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%2959 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %2961 = linalg.matmul ins(%collapsed_3749, %transposed_3751 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%2960 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_3752 = arith.constant 0 : index
    %c384_3753 = arith.constant 384 : index
    %c384_3754 = arith.constant 384 : index
    %c768_3755 = arith.constant 768 : index
    %c384_3756 = arith.constant 384 : index
    %c768_3757 = arith.constant 768 : index
    %c1152_3758 = arith.constant 1152 : index
    %c384_3759 = arith.constant 384 : index
    %c1152_3760 = arith.constant 1152 : index
    %c1536_3761 = arith.constant 1536 : index
    %2962 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3762 = tensor.insert_slice %2949 into %2962[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3763 = tensor.insert_slice %2953 into %inserted_slice_3762[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3764 = tensor.insert_slice %2957 into %inserted_slice_3763[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3765 = tensor.insert_slice %2961 into %inserted_slice_3764[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3766 = tensor.expand_shape %inserted_slice_3765 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %2963 = tensor.empty() : tensor<4x384x384xf32>
    %2964 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3766, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%2963 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3767 = tensor.expand_shape %2964 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %2965 = tensor.empty() : tensor<1x4x384x384xf32>
    %2966 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3767, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%2965 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2967 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3768 = arith.constant -3.40282347E+38 : f32
    %2968 = linalg.fill ins(%cst_3768 : f32) outs(%2967 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3769 = linalg.reduce ins(%2966 : tensor<1x4x384x384xf32>) outs(%2968 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3770 = tensor.expand_shape %reduced_3769 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2969 = tensor.empty() : tensor<1x4x384x384xf32>
    %2970 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2966, %expanded_3770 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2969 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2971 = tensor.empty() : tensor<1x4x384x384xf32>
    %2972 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2970 : tensor<1x4x384x384xf32>) outs(%2971 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %2973 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3771 = arith.constant 0.000000e+00 : f32
    %2974 = linalg.fill ins(%cst_3771 : f32) outs(%2973 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3772 = linalg.reduce ins(%2972 : tensor<1x4x384x384xf32>) outs(%2974 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3773 = tensor.expand_shape %reduced_3772 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %2975 = tensor.empty() : tensor<1x4x384x1xf32>
    %2976 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3773 : tensor<1x4x384x1xf32>) outs(%2975 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %2977 = tensor.empty() : tensor<1x4x384x384xf32>
    %2978 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2972, %2976 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%2977 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3774 = tensor.collapse_shape %2978 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3775 = tensor.extract_slice %collapsed_3774[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3776 = tensor.extract_slice %collapsed_3774[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3777 = tensor.extract_slice %collapsed_3774[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3778 = tensor.extract_slice %collapsed_3774[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3779 = tensor.collapse_shape %transposed_3720 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3780 = tensor.extract_slice %collapsed_3779[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2979 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3781 = linalg.transpose ins(%extracted_slice_3780 : tensor<1x384x32xf32>) outs(%2979 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3782 = tensor.extract_slice %collapsed_3779[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2980 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3783 = linalg.transpose ins(%extracted_slice_3782 : tensor<1x384x32xf32>) outs(%2980 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3784 = tensor.extract_slice %collapsed_3779[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2981 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3785 = linalg.transpose ins(%extracted_slice_3784 : tensor<1x384x32xf32>) outs(%2981 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3786 = tensor.extract_slice %collapsed_3779[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %2982 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3787 = linalg.transpose ins(%extracted_slice_3786 : tensor<1x384x32xf32>) outs(%2982 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3788 = tensor.collapse_shape %transposed_3781 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3789 = tensor.collapse_shape %extracted_slice_3775 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3790 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2983 = tensor.empty() : tensor<384x32xf32>
    %transposed_3791 = linalg.transpose ins(%collapsed_3788 : tensor<32x384xf32>) outs(%2983 : tensor<384x32xf32>) permutation = [1, 0] 
    %2984 = tensor.empty() : tensor<384x32xf32>
    %2985 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2984 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2986 = linalg.matmul ins(%collapsed_3789, %transposed_3791 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2985 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3792 = tensor.collapse_shape %transposed_3783 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3793 = tensor.collapse_shape %extracted_slice_3776 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3794 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2987 = tensor.empty() : tensor<384x32xf32>
    %transposed_3795 = linalg.transpose ins(%collapsed_3792 : tensor<32x384xf32>) outs(%2987 : tensor<384x32xf32>) permutation = [1, 0] 
    %2988 = tensor.empty() : tensor<384x32xf32>
    %2989 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2988 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2990 = linalg.matmul ins(%collapsed_3793, %transposed_3795 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2989 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3796 = tensor.collapse_shape %transposed_3785 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3797 = tensor.collapse_shape %extracted_slice_3777 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3798 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2991 = tensor.empty() : tensor<384x32xf32>
    %transposed_3799 = linalg.transpose ins(%collapsed_3796 : tensor<32x384xf32>) outs(%2991 : tensor<384x32xf32>) permutation = [1, 0] 
    %2992 = tensor.empty() : tensor<384x32xf32>
    %2993 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2992 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2994 = linalg.matmul ins(%collapsed_3797, %transposed_3799 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2993 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3800 = tensor.collapse_shape %transposed_3787 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3801 = tensor.collapse_shape %extracted_slice_3778 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3802 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %2995 = tensor.empty() : tensor<384x32xf32>
    %transposed_3803 = linalg.transpose ins(%collapsed_3800 : tensor<32x384xf32>) outs(%2995 : tensor<384x32xf32>) permutation = [1, 0] 
    %2996 = tensor.empty() : tensor<384x32xf32>
    %2997 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%2996 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %2998 = linalg.matmul ins(%collapsed_3801, %transposed_3803 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%2997 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3804 = arith.constant 0 : index
    %c384_3805 = arith.constant 384 : index
    %c384_3806 = arith.constant 384 : index
    %c768_3807 = arith.constant 768 : index
    %c384_3808 = arith.constant 384 : index
    %c768_3809 = arith.constant 768 : index
    %c1152_3810 = arith.constant 1152 : index
    %c384_3811 = arith.constant 384 : index
    %c1152_3812 = arith.constant 1152 : index
    %c1536_3813 = arith.constant 1536 : index
    %2999 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3814 = tensor.insert_slice %2986 into %2999[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3815 = tensor.insert_slice %2990 into %inserted_slice_3814[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3816 = tensor.insert_slice %2994 into %inserted_slice_3815[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3817 = tensor.insert_slice %2998 into %inserted_slice_3816[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3818 = tensor.expand_shape %inserted_slice_3817 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %3000 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3819 = linalg.transpose ins(%expanded_3818 : tensor<4x384x32xf32>) outs(%3000 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3820 = tensor.collapse_shape %transposed_3819 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3821 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3001 = tensor.empty() : tensor<128x128xf32>
    %transposed_3822 = linalg.transpose ins(%cst_512 : tensor<128x128xf32>) outs(%3001 : tensor<128x128xf32>) permutation = [1, 0] 
    %3002 = tensor.empty() : tensor<384x128xf32>
    %3003 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_511 : tensor<128xf32>) outs(%3002 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3004 = linalg.matmul ins(%collapsed_3820, %transposed_3822 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3003 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3823 = tensor.expand_shape %3004 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3005 = tensor.empty() : tensor<1x384x128xf32>
    %3006 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3823, %expanded_3709 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3005 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3007 = tensor.empty() : tensor<1x384x128xf32>
    %3008 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3006, %cst_84 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3007 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3009 = tensor.empty() : tensor<1x384x128xf32>
    %3010 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3008, %cst_83 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3009 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3824 = tensor.collapse_shape %3010 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3825 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3011 = tensor.empty() : tensor<128x512xf32>
    %transposed_3826 = linalg.transpose ins(%cst_510 : tensor<512x128xf32>) outs(%3011 : tensor<128x512xf32>) permutation = [1, 0] 
    %3012 = tensor.empty() : tensor<384x512xf32>
    %3013 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_509 : tensor<512xf32>) outs(%3012 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3014 = linalg.matmul ins(%collapsed_3824, %transposed_3826 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3013 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3015 = tensor.empty() : tensor<384x512xf32>
    %3016 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3014 : tensor<384x512xf32>) outs(%3015 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3827 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3017 = tensor.empty() : tensor<512x128xf32>
    %transposed_3828 = linalg.transpose ins(%cst_508 : tensor<128x512xf32>) outs(%3017 : tensor<512x128xf32>) permutation = [1, 0] 
    %3018 = tensor.empty() : tensor<384x128xf32>
    %3019 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_507 : tensor<128xf32>) outs(%3018 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3020 = linalg.matmul ins(%3016, %transposed_3828 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3019 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3829 = tensor.expand_shape %3020 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3021 = tensor.empty() : tensor<1x384x128xf32>
    %3022 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3829, %3010 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3021 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3023 = tensor.empty() : tensor<1x384x128xf32>
    %3024 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3022, %cst_82 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3023 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3025 = tensor.empty() : tensor<1x384x128xf32>
    %3026 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3024, %cst_81 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3025 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3830 = tensor.collapse_shape %3026 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3831 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3027 = tensor.empty() : tensor<128x512xf32>
    %transposed_3832 = linalg.transpose ins(%cst_506 : tensor<512x128xf32>) outs(%3027 : tensor<128x512xf32>) permutation = [1, 0] 
    %3028 = tensor.empty() : tensor<384x512xf32>
    %3029 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_505 : tensor<512xf32>) outs(%3028 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3030 = linalg.matmul ins(%collapsed_3830, %transposed_3832 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3029 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3031 = tensor.empty() : tensor<384x512xf32>
    %3032 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3030 : tensor<384x512xf32>) outs(%3031 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3833 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3033 = tensor.empty() : tensor<512x128xf32>
    %transposed_3834 = linalg.transpose ins(%cst_504 : tensor<128x512xf32>) outs(%3033 : tensor<512x128xf32>) permutation = [1, 0] 
    %3034 = tensor.empty() : tensor<384x128xf32>
    %3035 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_503 : tensor<128xf32>) outs(%3034 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3036 = linalg.matmul ins(%3032, %transposed_3834 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3035 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3835 = tensor.expand_shape %3036 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3037 = tensor.empty() : tensor<1x384x128xf32>
    %3038 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3835, %3026 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3037 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3039 = tensor.empty() : tensor<1x384x128xf32>
    %3040 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3038, %cst_80 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3039 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3041 = tensor.empty() : tensor<1x384x128xf32>
    %3042 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3040, %cst_79 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3041 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3836 = tensor.collapse_shape %3042 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3837 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3043 = tensor.empty() : tensor<128x512xf32>
    %transposed_3838 = linalg.transpose ins(%cst_502 : tensor<512x128xf32>) outs(%3043 : tensor<128x512xf32>) permutation = [1, 0] 
    %3044 = tensor.empty() : tensor<384x512xf32>
    %3045 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_501 : tensor<512xf32>) outs(%3044 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3046 = linalg.matmul ins(%collapsed_3836, %transposed_3838 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3045 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3047 = tensor.empty() : tensor<384x512xf32>
    %3048 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3046 : tensor<384x512xf32>) outs(%3047 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3839 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3049 = tensor.empty() : tensor<512x128xf32>
    %transposed_3840 = linalg.transpose ins(%cst_500 : tensor<128x512xf32>) outs(%3049 : tensor<512x128xf32>) permutation = [1, 0] 
    %3050 = tensor.empty() : tensor<384x128xf32>
    %3051 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_499 : tensor<128xf32>) outs(%3050 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3052 = linalg.matmul ins(%3048, %transposed_3840 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3051 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3841 = tensor.expand_shape %3052 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3053 = tensor.empty() : tensor<1x384x128xf32>
    %3054 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3841, %3042 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3053 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3055 = tensor.empty() : tensor<1x384x128xf32>
    %3056 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3054, %cst_78 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3055 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3057 = tensor.empty() : tensor<1x384x128xf32>
    %3058 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3056, %cst_77 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3057 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3842 = tensor.collapse_shape %3058 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3843 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3059 = tensor.empty() : tensor<128x512xf32>
    %transposed_3844 = linalg.transpose ins(%cst_498 : tensor<512x128xf32>) outs(%3059 : tensor<128x512xf32>) permutation = [1, 0] 
    %3060 = tensor.empty() : tensor<384x512xf32>
    %3061 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_497 : tensor<512xf32>) outs(%3060 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3062 = linalg.matmul ins(%collapsed_3842, %transposed_3844 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3061 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3063 = tensor.empty() : tensor<384x512xf32>
    %3064 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3062 : tensor<384x512xf32>) outs(%3063 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3845 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3065 = tensor.empty() : tensor<512x128xf32>
    %transposed_3846 = linalg.transpose ins(%cst_496 : tensor<128x512xf32>) outs(%3065 : tensor<512x128xf32>) permutation = [1, 0] 
    %3066 = tensor.empty() : tensor<384x128xf32>
    %3067 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_495 : tensor<128xf32>) outs(%3066 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3068 = linalg.matmul ins(%3064, %transposed_3846 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3067 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3847 = tensor.expand_shape %3068 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3069 = tensor.empty() : tensor<1x384x128xf32>
    %3070 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3847, %3058 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3069 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3071 = tensor.empty() : tensor<1x384x128xf32>
    %3072 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3070, %cst_76 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3071 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3073 = tensor.empty() : tensor<1x384x128xf32>
    %3074 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3072, %cst_75 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3073 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3848 = tensor.collapse_shape %3074 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3849 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3075 = tensor.empty() : tensor<128x512xf32>
    %transposed_3850 = linalg.transpose ins(%cst_494 : tensor<512x128xf32>) outs(%3075 : tensor<128x512xf32>) permutation = [1, 0] 
    %3076 = tensor.empty() : tensor<384x512xf32>
    %3077 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_493 : tensor<512xf32>) outs(%3076 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3078 = linalg.matmul ins(%collapsed_3848, %transposed_3850 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3077 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_3851 = tensor.expand_shape %3078 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3079 = tensor.empty() : tensor<1x384x512xf32>
    %3080 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3851, %2914 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3079 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3081 = tensor.empty() : tensor<1x384x512xf32>
    %3082 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3080, %cst_74 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3081 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3083 = tensor.empty() : tensor<1x384x512xf32>
    %3084 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3082, %cst_73 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3083 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_3852 = tensor.collapse_shape %3084 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3853 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3085 = tensor.empty() : tensor<512x128xf32>
    %transposed_3854 = linalg.transpose ins(%cst_492 : tensor<128x512xf32>) outs(%3085 : tensor<512x128xf32>) permutation = [1, 0] 
    %3086 = tensor.empty() : tensor<384x128xf32>
    %3087 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_491 : tensor<128xf32>) outs(%3086 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3088 = linalg.matmul ins(%collapsed_3852, %transposed_3854 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3087 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3855 = tensor.collapse_shape %3084 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3856 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3089 = tensor.empty() : tensor<512x128xf32>
    %transposed_3857 = linalg.transpose ins(%cst_490 : tensor<128x512xf32>) outs(%3089 : tensor<512x128xf32>) permutation = [1, 0] 
    %3090 = tensor.empty() : tensor<384x128xf32>
    %3091 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_489 : tensor<128xf32>) outs(%3090 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3092 = linalg.matmul ins(%collapsed_3855, %transposed_3857 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3091 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_3858 = tensor.collapse_shape %3084 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_3859 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3093 = tensor.empty() : tensor<512x128xf32>
    %transposed_3860 = linalg.transpose ins(%cst_488 : tensor<128x512xf32>) outs(%3093 : tensor<512x128xf32>) permutation = [1, 0] 
    %3094 = tensor.empty() : tensor<384x128xf32>
    %3095 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_487 : tensor<128xf32>) outs(%3094 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3096 = linalg.matmul ins(%collapsed_3858, %transposed_3860 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3095 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3861 = tensor.expand_shape %3088 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_3862 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3097 = tensor.empty() : tensor<128x128xf32>
    %transposed_3863 = linalg.transpose ins(%cst_486 : tensor<128x128xf32>) outs(%3097 : tensor<128x128xf32>) permutation = [1, 0] 
    %3098 = tensor.empty() : tensor<384x128xf32>
    %3099 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_485 : tensor<128xf32>) outs(%3098 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3100 = linalg.matmul ins(%3092, %transposed_3863 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3099 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3864 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3101 = tensor.empty() : tensor<128x128xf32>
    %transposed_3865 = linalg.transpose ins(%cst_484 : tensor<128x128xf32>) outs(%3101 : tensor<128x128xf32>) permutation = [1, 0] 
    %3102 = tensor.empty() : tensor<384x128xf32>
    %3103 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_483 : tensor<128xf32>) outs(%3102 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3104 = linalg.matmul ins(%3092, %transposed_3865 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3103 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_3866 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3105 = tensor.empty() : tensor<128x128xf32>
    %transposed_3867 = linalg.transpose ins(%cst_482 : tensor<128x128xf32>) outs(%3105 : tensor<128x128xf32>) permutation = [1, 0] 
    %3106 = tensor.empty() : tensor<384x128xf32>
    %3107 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_481 : tensor<128xf32>) outs(%3106 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3108 = linalg.matmul ins(%3096, %transposed_3867 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3107 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3868 = tensor.expand_shape %3100 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3869 = tensor.expand_shape %3104 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_3870 = tensor.expand_shape %3108 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3109 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3871 = linalg.transpose ins(%expanded_3868 : tensor<1x384x4x32xf32>) outs(%3109 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3110 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_3872 = linalg.transpose ins(%expanded_3870 : tensor<1x384x4x32xf32>) outs(%3110 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3111 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_3873 = linalg.transpose ins(%expanded_3869 : tensor<1x384x4x32xf32>) outs(%3111 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_3874 = tensor.collapse_shape %transposed_3871 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3875 = tensor.extract_slice %collapsed_3874[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3876 = tensor.extract_slice %collapsed_3874[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3877 = tensor.extract_slice %collapsed_3874[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_3878 = tensor.extract_slice %collapsed_3874[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_3879 = tensor.collapse_shape %transposed_3873 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_3880 = tensor.extract_slice %collapsed_3879[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3112 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3881 = linalg.transpose ins(%extracted_slice_3880 : tensor<1x32x384xf32>) outs(%3112 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3882 = tensor.extract_slice %collapsed_3879[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3113 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3883 = linalg.transpose ins(%extracted_slice_3882 : tensor<1x32x384xf32>) outs(%3113 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3884 = tensor.extract_slice %collapsed_3879[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3114 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3885 = linalg.transpose ins(%extracted_slice_3884 : tensor<1x32x384xf32>) outs(%3114 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3886 = tensor.extract_slice %collapsed_3879[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3115 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_3887 = linalg.transpose ins(%extracted_slice_3886 : tensor<1x32x384xf32>) outs(%3115 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3888 = tensor.collapse_shape %transposed_3881 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3889 = tensor.collapse_shape %extracted_slice_3875 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3890 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3116 = tensor.empty() : tensor<32x384xf32>
    %transposed_3891 = linalg.transpose ins(%collapsed_3888 : tensor<384x32xf32>) outs(%3116 : tensor<32x384xf32>) permutation = [1, 0] 
    %3117 = tensor.empty() : tensor<384x384xf32>
    %3118 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3117 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3119 = linalg.matmul ins(%collapsed_3889, %transposed_3891 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3118 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3892 = tensor.collapse_shape %transposed_3883 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3893 = tensor.collapse_shape %extracted_slice_3876 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3894 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3120 = tensor.empty() : tensor<32x384xf32>
    %transposed_3895 = linalg.transpose ins(%collapsed_3892 : tensor<384x32xf32>) outs(%3120 : tensor<32x384xf32>) permutation = [1, 0] 
    %3121 = tensor.empty() : tensor<384x384xf32>
    %3122 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3121 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3123 = linalg.matmul ins(%collapsed_3893, %transposed_3895 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3122 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3896 = tensor.collapse_shape %transposed_3885 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3897 = tensor.collapse_shape %extracted_slice_3877 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3898 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3124 = tensor.empty() : tensor<32x384xf32>
    %transposed_3899 = linalg.transpose ins(%collapsed_3896 : tensor<384x32xf32>) outs(%3124 : tensor<32x384xf32>) permutation = [1, 0] 
    %3125 = tensor.empty() : tensor<384x384xf32>
    %3126 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3125 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3127 = linalg.matmul ins(%collapsed_3897, %transposed_3899 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3126 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_3900 = tensor.collapse_shape %transposed_3887 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_3901 = tensor.collapse_shape %extracted_slice_3878 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_3902 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3128 = tensor.empty() : tensor<32x384xf32>
    %transposed_3903 = linalg.transpose ins(%collapsed_3900 : tensor<384x32xf32>) outs(%3128 : tensor<32x384xf32>) permutation = [1, 0] 
    %3129 = tensor.empty() : tensor<384x384xf32>
    %3130 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3129 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3131 = linalg.matmul ins(%collapsed_3901, %transposed_3903 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3130 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_3904 = arith.constant 0 : index
    %c384_3905 = arith.constant 384 : index
    %c384_3906 = arith.constant 384 : index
    %c768_3907 = arith.constant 768 : index
    %c384_3908 = arith.constant 384 : index
    %c768_3909 = arith.constant 768 : index
    %c1152_3910 = arith.constant 1152 : index
    %c384_3911 = arith.constant 384 : index
    %c1152_3912 = arith.constant 1152 : index
    %c1536_3913 = arith.constant 1536 : index
    %3132 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_3914 = tensor.insert_slice %3119 into %3132[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3915 = tensor.insert_slice %3123 into %inserted_slice_3914[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3916 = tensor.insert_slice %3127 into %inserted_slice_3915[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_3917 = tensor.insert_slice %3131 into %inserted_slice_3916[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_3918 = tensor.expand_shape %inserted_slice_3917 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %3133 = tensor.empty() : tensor<4x384x384xf32>
    %3134 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3918, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%3133 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_3919 = tensor.expand_shape %3134 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %3135 = tensor.empty() : tensor<1x4x384x384xf32>
    %3136 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3919, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%3135 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3137 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3920 = arith.constant -3.40282347E+38 : f32
    %3138 = linalg.fill ins(%cst_3920 : f32) outs(%3137 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3921 = linalg.reduce ins(%3136 : tensor<1x4x384x384xf32>) outs(%3138 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3922 = tensor.expand_shape %reduced_3921 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3139 = tensor.empty() : tensor<1x4x384x384xf32>
    %3140 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3136, %expanded_3922 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3139 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3141 = tensor.empty() : tensor<1x4x384x384xf32>
    %3142 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3140 : tensor<1x4x384x384xf32>) outs(%3141 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3143 = tensor.empty() : tensor<1x4x384xf32>
    %cst_3923 = arith.constant 0.000000e+00 : f32
    %3144 = linalg.fill ins(%cst_3923 : f32) outs(%3143 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_3924 = linalg.reduce ins(%3142 : tensor<1x4x384x384xf32>) outs(%3144 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_3925 = tensor.expand_shape %reduced_3924 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3145 = tensor.empty() : tensor<1x4x384x1xf32>
    %3146 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_3925 : tensor<1x4x384x1xf32>) outs(%3145 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %3147 = tensor.empty() : tensor<1x4x384x384xf32>
    %3148 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3142, %3146 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3147 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_3926 = tensor.collapse_shape %3148 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_3927 = tensor.extract_slice %collapsed_3926[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3928 = tensor.extract_slice %collapsed_3926[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3929 = tensor.extract_slice %collapsed_3926[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_3930 = tensor.extract_slice %collapsed_3926[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_3931 = tensor.collapse_shape %transposed_3872 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_3932 = tensor.extract_slice %collapsed_3931[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3149 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3933 = linalg.transpose ins(%extracted_slice_3932 : tensor<1x384x32xf32>) outs(%3149 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3934 = tensor.extract_slice %collapsed_3931[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3150 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3935 = linalg.transpose ins(%extracted_slice_3934 : tensor<1x384x32xf32>) outs(%3150 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3936 = tensor.extract_slice %collapsed_3931[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3151 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3937 = linalg.transpose ins(%extracted_slice_3936 : tensor<1x384x32xf32>) outs(%3151 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_3938 = tensor.extract_slice %collapsed_3931[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3152 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_3939 = linalg.transpose ins(%extracted_slice_3938 : tensor<1x384x32xf32>) outs(%3152 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_3940 = tensor.collapse_shape %transposed_3933 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3941 = tensor.collapse_shape %extracted_slice_3927 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3942 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3153 = tensor.empty() : tensor<384x32xf32>
    %transposed_3943 = linalg.transpose ins(%collapsed_3940 : tensor<32x384xf32>) outs(%3153 : tensor<384x32xf32>) permutation = [1, 0] 
    %3154 = tensor.empty() : tensor<384x32xf32>
    %3155 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3154 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3156 = linalg.matmul ins(%collapsed_3941, %transposed_3943 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3155 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3944 = tensor.collapse_shape %transposed_3935 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3945 = tensor.collapse_shape %extracted_slice_3928 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3946 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3157 = tensor.empty() : tensor<384x32xf32>
    %transposed_3947 = linalg.transpose ins(%collapsed_3944 : tensor<32x384xf32>) outs(%3157 : tensor<384x32xf32>) permutation = [1, 0] 
    %3158 = tensor.empty() : tensor<384x32xf32>
    %3159 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3158 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3160 = linalg.matmul ins(%collapsed_3945, %transposed_3947 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3159 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3948 = tensor.collapse_shape %transposed_3937 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3949 = tensor.collapse_shape %extracted_slice_3929 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3950 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3161 = tensor.empty() : tensor<384x32xf32>
    %transposed_3951 = linalg.transpose ins(%collapsed_3948 : tensor<32x384xf32>) outs(%3161 : tensor<384x32xf32>) permutation = [1, 0] 
    %3162 = tensor.empty() : tensor<384x32xf32>
    %3163 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3162 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3164 = linalg.matmul ins(%collapsed_3949, %transposed_3951 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3163 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_3952 = tensor.collapse_shape %transposed_3939 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_3953 = tensor.collapse_shape %extracted_slice_3930 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_3954 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3165 = tensor.empty() : tensor<384x32xf32>
    %transposed_3955 = linalg.transpose ins(%collapsed_3952 : tensor<32x384xf32>) outs(%3165 : tensor<384x32xf32>) permutation = [1, 0] 
    %3166 = tensor.empty() : tensor<384x32xf32>
    %3167 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3166 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3168 = linalg.matmul ins(%collapsed_3953, %transposed_3955 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3167 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_3956 = arith.constant 0 : index
    %c384_3957 = arith.constant 384 : index
    %c384_3958 = arith.constant 384 : index
    %c768_3959 = arith.constant 768 : index
    %c384_3960 = arith.constant 384 : index
    %c768_3961 = arith.constant 768 : index
    %c1152_3962 = arith.constant 1152 : index
    %c384_3963 = arith.constant 384 : index
    %c1152_3964 = arith.constant 1152 : index
    %c1536_3965 = arith.constant 1536 : index
    %3169 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_3966 = tensor.insert_slice %3156 into %3169[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3967 = tensor.insert_slice %3160 into %inserted_slice_3966[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3968 = tensor.insert_slice %3164 into %inserted_slice_3967[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_3969 = tensor.insert_slice %3168 into %inserted_slice_3968[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_3970 = tensor.expand_shape %inserted_slice_3969 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %3170 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_3971 = linalg.transpose ins(%expanded_3970 : tensor<4x384x32xf32>) outs(%3170 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_3972 = tensor.collapse_shape %transposed_3971 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_3973 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3171 = tensor.empty() : tensor<128x128xf32>
    %transposed_3974 = linalg.transpose ins(%cst_480 : tensor<128x128xf32>) outs(%3171 : tensor<128x128xf32>) permutation = [1, 0] 
    %3172 = tensor.empty() : tensor<384x128xf32>
    %3173 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_479 : tensor<128xf32>) outs(%3172 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3174 = linalg.matmul ins(%collapsed_3972, %transposed_3974 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3173 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3975 = tensor.expand_shape %3174 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3175 = tensor.empty() : tensor<1x384x128xf32>
    %3176 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3975, %expanded_3861 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3175 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3177 = tensor.empty() : tensor<1x384x128xf32>
    %3178 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3176, %cst_72 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3177 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3179 = tensor.empty() : tensor<1x384x128xf32>
    %3180 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3178, %cst_71 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3179 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3976 = tensor.collapse_shape %3180 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3977 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3181 = tensor.empty() : tensor<128x512xf32>
    %transposed_3978 = linalg.transpose ins(%cst_478 : tensor<512x128xf32>) outs(%3181 : tensor<128x512xf32>) permutation = [1, 0] 
    %3182 = tensor.empty() : tensor<384x512xf32>
    %3183 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_477 : tensor<512xf32>) outs(%3182 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3184 = linalg.matmul ins(%collapsed_3976, %transposed_3978 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3183 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3185 = tensor.empty() : tensor<384x512xf32>
    %3186 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3184 : tensor<384x512xf32>) outs(%3185 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3979 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3187 = tensor.empty() : tensor<512x128xf32>
    %transposed_3980 = linalg.transpose ins(%cst_476 : tensor<128x512xf32>) outs(%3187 : tensor<512x128xf32>) permutation = [1, 0] 
    %3188 = tensor.empty() : tensor<384x128xf32>
    %3189 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_475 : tensor<128xf32>) outs(%3188 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3190 = linalg.matmul ins(%3186, %transposed_3980 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3189 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3981 = tensor.expand_shape %3190 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3191 = tensor.empty() : tensor<1x384x128xf32>
    %3192 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3981, %3180 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3191 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3193 = tensor.empty() : tensor<1x384x128xf32>
    %3194 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3192, %cst_70 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3193 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3195 = tensor.empty() : tensor<1x384x128xf32>
    %3196 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3194, %cst_69 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3195 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3982 = tensor.collapse_shape %3196 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3983 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3197 = tensor.empty() : tensor<128x512xf32>
    %transposed_3984 = linalg.transpose ins(%cst_474 : tensor<512x128xf32>) outs(%3197 : tensor<128x512xf32>) permutation = [1, 0] 
    %3198 = tensor.empty() : tensor<384x512xf32>
    %3199 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_473 : tensor<512xf32>) outs(%3198 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3200 = linalg.matmul ins(%collapsed_3982, %transposed_3984 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3199 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3201 = tensor.empty() : tensor<384x512xf32>
    %3202 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3200 : tensor<384x512xf32>) outs(%3201 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3985 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3203 = tensor.empty() : tensor<512x128xf32>
    %transposed_3986 = linalg.transpose ins(%cst_472 : tensor<128x512xf32>) outs(%3203 : tensor<512x128xf32>) permutation = [1, 0] 
    %3204 = tensor.empty() : tensor<384x128xf32>
    %3205 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_471 : tensor<128xf32>) outs(%3204 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3206 = linalg.matmul ins(%3202, %transposed_3986 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3205 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3987 = tensor.expand_shape %3206 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3207 = tensor.empty() : tensor<1x384x128xf32>
    %3208 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3987, %3196 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3207 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3209 = tensor.empty() : tensor<1x384x128xf32>
    %3210 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3208, %cst_68 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3209 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3211 = tensor.empty() : tensor<1x384x128xf32>
    %3212 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3210, %cst_67 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3211 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3988 = tensor.collapse_shape %3212 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3989 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3213 = tensor.empty() : tensor<128x512xf32>
    %transposed_3990 = linalg.transpose ins(%cst_470 : tensor<512x128xf32>) outs(%3213 : tensor<128x512xf32>) permutation = [1, 0] 
    %3214 = tensor.empty() : tensor<384x512xf32>
    %3215 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_469 : tensor<512xf32>) outs(%3214 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3216 = linalg.matmul ins(%collapsed_3988, %transposed_3990 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3215 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3217 = tensor.empty() : tensor<384x512xf32>
    %3218 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3216 : tensor<384x512xf32>) outs(%3217 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3991 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3219 = tensor.empty() : tensor<512x128xf32>
    %transposed_3992 = linalg.transpose ins(%cst_468 : tensor<128x512xf32>) outs(%3219 : tensor<512x128xf32>) permutation = [1, 0] 
    %3220 = tensor.empty() : tensor<384x128xf32>
    %3221 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_467 : tensor<128xf32>) outs(%3220 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3222 = linalg.matmul ins(%3218, %transposed_3992 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3221 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3993 = tensor.expand_shape %3222 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3223 = tensor.empty() : tensor<1x384x128xf32>
    %3224 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3993, %3212 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3223 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3225 = tensor.empty() : tensor<1x384x128xf32>
    %3226 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3224, %cst_66 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3225 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3227 = tensor.empty() : tensor<1x384x128xf32>
    %3228 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3226, %cst_65 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3227 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_3994 = tensor.collapse_shape %3228 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_3995 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3229 = tensor.empty() : tensor<128x512xf32>
    %transposed_3996 = linalg.transpose ins(%cst_466 : tensor<512x128xf32>) outs(%3229 : tensor<128x512xf32>) permutation = [1, 0] 
    %3230 = tensor.empty() : tensor<384x512xf32>
    %3231 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_465 : tensor<512xf32>) outs(%3230 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3232 = linalg.matmul ins(%collapsed_3994, %transposed_3996 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3231 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3233 = tensor.empty() : tensor<384x512xf32>
    %3234 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3232 : tensor<384x512xf32>) outs(%3233 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_3997 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3235 = tensor.empty() : tensor<512x128xf32>
    %transposed_3998 = linalg.transpose ins(%cst_464 : tensor<128x512xf32>) outs(%3235 : tensor<512x128xf32>) permutation = [1, 0] 
    %3236 = tensor.empty() : tensor<384x128xf32>
    %3237 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_463 : tensor<128xf32>) outs(%3236 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3238 = linalg.matmul ins(%3234, %transposed_3998 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3237 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_3999 = tensor.expand_shape %3238 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3239 = tensor.empty() : tensor<1x384x128xf32>
    %3240 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_3999, %3228 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3239 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3241 = tensor.empty() : tensor<1x384x128xf32>
    %3242 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3240, %cst_64 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3241 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3243 = tensor.empty() : tensor<1x384x128xf32>
    %3244 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3242, %cst_63 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3243 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4000 = tensor.collapse_shape %3244 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4001 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3245 = tensor.empty() : tensor<128x512xf32>
    %transposed_4002 = linalg.transpose ins(%cst_462 : tensor<512x128xf32>) outs(%3245 : tensor<128x512xf32>) permutation = [1, 0] 
    %3246 = tensor.empty() : tensor<384x512xf32>
    %3247 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_461 : tensor<512xf32>) outs(%3246 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3248 = linalg.matmul ins(%collapsed_4000, %transposed_4002 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3247 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_4003 = tensor.expand_shape %3248 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3249 = tensor.empty() : tensor<1x384x512xf32>
    %3250 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4003, %3084 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3249 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3251 = tensor.empty() : tensor<1x384x512xf32>
    %3252 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3250, %cst_62 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3251 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3253 = tensor.empty() : tensor<1x384x512xf32>
    %3254 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3252, %cst_61 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3253 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_4004 = tensor.collapse_shape %3254 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4005 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3255 = tensor.empty() : tensor<512x128xf32>
    %transposed_4006 = linalg.transpose ins(%cst_460 : tensor<128x512xf32>) outs(%3255 : tensor<512x128xf32>) permutation = [1, 0] 
    %3256 = tensor.empty() : tensor<384x128xf32>
    %3257 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_459 : tensor<128xf32>) outs(%3256 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3258 = linalg.matmul ins(%collapsed_4004, %transposed_4006 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3257 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4007 = tensor.collapse_shape %3254 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4008 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3259 = tensor.empty() : tensor<512x128xf32>
    %transposed_4009 = linalg.transpose ins(%cst_458 : tensor<128x512xf32>) outs(%3259 : tensor<512x128xf32>) permutation = [1, 0] 
    %3260 = tensor.empty() : tensor<384x128xf32>
    %3261 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_457 : tensor<128xf32>) outs(%3260 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3262 = linalg.matmul ins(%collapsed_4007, %transposed_4009 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3261 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4010 = tensor.collapse_shape %3254 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4011 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3263 = tensor.empty() : tensor<512x128xf32>
    %transposed_4012 = linalg.transpose ins(%cst_456 : tensor<128x512xf32>) outs(%3263 : tensor<512x128xf32>) permutation = [1, 0] 
    %3264 = tensor.empty() : tensor<384x128xf32>
    %3265 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_455 : tensor<128xf32>) outs(%3264 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3266 = linalg.matmul ins(%collapsed_4010, %transposed_4012 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3265 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4013 = tensor.expand_shape %3258 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_4014 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3267 = tensor.empty() : tensor<128x128xf32>
    %transposed_4015 = linalg.transpose ins(%cst_454 : tensor<128x128xf32>) outs(%3267 : tensor<128x128xf32>) permutation = [1, 0] 
    %3268 = tensor.empty() : tensor<384x128xf32>
    %3269 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_453 : tensor<128xf32>) outs(%3268 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3270 = linalg.matmul ins(%3262, %transposed_4015 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3269 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4016 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3271 = tensor.empty() : tensor<128x128xf32>
    %transposed_4017 = linalg.transpose ins(%cst_452 : tensor<128x128xf32>) outs(%3271 : tensor<128x128xf32>) permutation = [1, 0] 
    %3272 = tensor.empty() : tensor<384x128xf32>
    %3273 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_451 : tensor<128xf32>) outs(%3272 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3274 = linalg.matmul ins(%3262, %transposed_4017 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3273 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4018 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3275 = tensor.empty() : tensor<128x128xf32>
    %transposed_4019 = linalg.transpose ins(%cst_450 : tensor<128x128xf32>) outs(%3275 : tensor<128x128xf32>) permutation = [1, 0] 
    %3276 = tensor.empty() : tensor<384x128xf32>
    %3277 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_449 : tensor<128xf32>) outs(%3276 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3278 = linalg.matmul ins(%3266, %transposed_4019 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3277 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4020 = tensor.expand_shape %3270 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4021 = tensor.expand_shape %3274 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4022 = tensor.expand_shape %3278 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3279 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4023 = linalg.transpose ins(%expanded_4020 : tensor<1x384x4x32xf32>) outs(%3279 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3280 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4024 = linalg.transpose ins(%expanded_4022 : tensor<1x384x4x32xf32>) outs(%3280 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3281 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_4025 = linalg.transpose ins(%expanded_4021 : tensor<1x384x4x32xf32>) outs(%3281 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_4026 = tensor.collapse_shape %transposed_4023 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4027 = tensor.extract_slice %collapsed_4026[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4028 = tensor.extract_slice %collapsed_4026[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4029 = tensor.extract_slice %collapsed_4026[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4030 = tensor.extract_slice %collapsed_4026[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_4031 = tensor.collapse_shape %transposed_4025 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_4032 = tensor.extract_slice %collapsed_4031[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3282 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4033 = linalg.transpose ins(%extracted_slice_4032 : tensor<1x32x384xf32>) outs(%3282 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4034 = tensor.extract_slice %collapsed_4031[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3283 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4035 = linalg.transpose ins(%extracted_slice_4034 : tensor<1x32x384xf32>) outs(%3283 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4036 = tensor.extract_slice %collapsed_4031[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3284 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4037 = linalg.transpose ins(%extracted_slice_4036 : tensor<1x32x384xf32>) outs(%3284 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4038 = tensor.extract_slice %collapsed_4031[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3285 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4039 = linalg.transpose ins(%extracted_slice_4038 : tensor<1x32x384xf32>) outs(%3285 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4040 = tensor.collapse_shape %transposed_4033 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4041 = tensor.collapse_shape %extracted_slice_4027 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4042 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3286 = tensor.empty() : tensor<32x384xf32>
    %transposed_4043 = linalg.transpose ins(%collapsed_4040 : tensor<384x32xf32>) outs(%3286 : tensor<32x384xf32>) permutation = [1, 0] 
    %3287 = tensor.empty() : tensor<384x384xf32>
    %3288 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3287 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3289 = linalg.matmul ins(%collapsed_4041, %transposed_4043 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3288 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4044 = tensor.collapse_shape %transposed_4035 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4045 = tensor.collapse_shape %extracted_slice_4028 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4046 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3290 = tensor.empty() : tensor<32x384xf32>
    %transposed_4047 = linalg.transpose ins(%collapsed_4044 : tensor<384x32xf32>) outs(%3290 : tensor<32x384xf32>) permutation = [1, 0] 
    %3291 = tensor.empty() : tensor<384x384xf32>
    %3292 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3291 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3293 = linalg.matmul ins(%collapsed_4045, %transposed_4047 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3292 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4048 = tensor.collapse_shape %transposed_4037 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4049 = tensor.collapse_shape %extracted_slice_4029 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4050 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3294 = tensor.empty() : tensor<32x384xf32>
    %transposed_4051 = linalg.transpose ins(%collapsed_4048 : tensor<384x32xf32>) outs(%3294 : tensor<32x384xf32>) permutation = [1, 0] 
    %3295 = tensor.empty() : tensor<384x384xf32>
    %3296 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3295 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3297 = linalg.matmul ins(%collapsed_4049, %transposed_4051 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3296 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4052 = tensor.collapse_shape %transposed_4039 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4053 = tensor.collapse_shape %extracted_slice_4030 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4054 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3298 = tensor.empty() : tensor<32x384xf32>
    %transposed_4055 = linalg.transpose ins(%collapsed_4052 : tensor<384x32xf32>) outs(%3298 : tensor<32x384xf32>) permutation = [1, 0] 
    %3299 = tensor.empty() : tensor<384x384xf32>
    %3300 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3299 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3301 = linalg.matmul ins(%collapsed_4053, %transposed_4055 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3300 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_4056 = arith.constant 0 : index
    %c384_4057 = arith.constant 384 : index
    %c384_4058 = arith.constant 384 : index
    %c768_4059 = arith.constant 768 : index
    %c384_4060 = arith.constant 384 : index
    %c768_4061 = arith.constant 768 : index
    %c1152_4062 = arith.constant 1152 : index
    %c384_4063 = arith.constant 384 : index
    %c1152_4064 = arith.constant 1152 : index
    %c1536_4065 = arith.constant 1536 : index
    %3302 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_4066 = tensor.insert_slice %3289 into %3302[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4067 = tensor.insert_slice %3293 into %inserted_slice_4066[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4068 = tensor.insert_slice %3297 into %inserted_slice_4067[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4069 = tensor.insert_slice %3301 into %inserted_slice_4068[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_4070 = tensor.expand_shape %inserted_slice_4069 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %3303 = tensor.empty() : tensor<4x384x384xf32>
    %3304 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4070, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%3303 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_4071 = tensor.expand_shape %3304 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %3305 = tensor.empty() : tensor<1x4x384x384xf32>
    %3306 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4071, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%3305 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3307 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4072 = arith.constant -3.40282347E+38 : f32
    %3308 = linalg.fill ins(%cst_4072 : f32) outs(%3307 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4073 = linalg.reduce ins(%3306 : tensor<1x4x384x384xf32>) outs(%3308 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4074 = tensor.expand_shape %reduced_4073 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3309 = tensor.empty() : tensor<1x4x384x384xf32>
    %3310 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3306, %expanded_4074 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3309 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3311 = tensor.empty() : tensor<1x4x384x384xf32>
    %3312 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3310 : tensor<1x4x384x384xf32>) outs(%3311 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3313 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4075 = arith.constant 0.000000e+00 : f32
    %3314 = linalg.fill ins(%cst_4075 : f32) outs(%3313 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4076 = linalg.reduce ins(%3312 : tensor<1x4x384x384xf32>) outs(%3314 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4077 = tensor.expand_shape %reduced_4076 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3315 = tensor.empty() : tensor<1x4x384x1xf32>
    %3316 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4077 : tensor<1x4x384x1xf32>) outs(%3315 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %3317 = tensor.empty() : tensor<1x4x384x384xf32>
    %3318 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3312, %3316 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3317 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_4078 = tensor.collapse_shape %3318 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_4079 = tensor.extract_slice %collapsed_4078[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4080 = tensor.extract_slice %collapsed_4078[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4081 = tensor.extract_slice %collapsed_4078[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4082 = tensor.extract_slice %collapsed_4078[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_4083 = tensor.collapse_shape %transposed_4024 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4084 = tensor.extract_slice %collapsed_4083[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3319 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4085 = linalg.transpose ins(%extracted_slice_4084 : tensor<1x384x32xf32>) outs(%3319 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4086 = tensor.extract_slice %collapsed_4083[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3320 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4087 = linalg.transpose ins(%extracted_slice_4086 : tensor<1x384x32xf32>) outs(%3320 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4088 = tensor.extract_slice %collapsed_4083[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3321 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4089 = linalg.transpose ins(%extracted_slice_4088 : tensor<1x384x32xf32>) outs(%3321 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4090 = tensor.extract_slice %collapsed_4083[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3322 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4091 = linalg.transpose ins(%extracted_slice_4090 : tensor<1x384x32xf32>) outs(%3322 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4092 = tensor.collapse_shape %transposed_4085 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4093 = tensor.collapse_shape %extracted_slice_4079 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4094 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3323 = tensor.empty() : tensor<384x32xf32>
    %transposed_4095 = linalg.transpose ins(%collapsed_4092 : tensor<32x384xf32>) outs(%3323 : tensor<384x32xf32>) permutation = [1, 0] 
    %3324 = tensor.empty() : tensor<384x32xf32>
    %3325 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3324 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3326 = linalg.matmul ins(%collapsed_4093, %transposed_4095 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3325 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4096 = tensor.collapse_shape %transposed_4087 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4097 = tensor.collapse_shape %extracted_slice_4080 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4098 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3327 = tensor.empty() : tensor<384x32xf32>
    %transposed_4099 = linalg.transpose ins(%collapsed_4096 : tensor<32x384xf32>) outs(%3327 : tensor<384x32xf32>) permutation = [1, 0] 
    %3328 = tensor.empty() : tensor<384x32xf32>
    %3329 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3328 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3330 = linalg.matmul ins(%collapsed_4097, %transposed_4099 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3329 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4100 = tensor.collapse_shape %transposed_4089 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4101 = tensor.collapse_shape %extracted_slice_4081 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4102 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3331 = tensor.empty() : tensor<384x32xf32>
    %transposed_4103 = linalg.transpose ins(%collapsed_4100 : tensor<32x384xf32>) outs(%3331 : tensor<384x32xf32>) permutation = [1, 0] 
    %3332 = tensor.empty() : tensor<384x32xf32>
    %3333 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3332 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3334 = linalg.matmul ins(%collapsed_4101, %transposed_4103 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3333 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4104 = tensor.collapse_shape %transposed_4091 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4105 = tensor.collapse_shape %extracted_slice_4082 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4106 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3335 = tensor.empty() : tensor<384x32xf32>
    %transposed_4107 = linalg.transpose ins(%collapsed_4104 : tensor<32x384xf32>) outs(%3335 : tensor<384x32xf32>) permutation = [1, 0] 
    %3336 = tensor.empty() : tensor<384x32xf32>
    %3337 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3336 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3338 = linalg.matmul ins(%collapsed_4105, %transposed_4107 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3337 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_4108 = arith.constant 0 : index
    %c384_4109 = arith.constant 384 : index
    %c384_4110 = arith.constant 384 : index
    %c768_4111 = arith.constant 768 : index
    %c384_4112 = arith.constant 384 : index
    %c768_4113 = arith.constant 768 : index
    %c1152_4114 = arith.constant 1152 : index
    %c384_4115 = arith.constant 384 : index
    %c1152_4116 = arith.constant 1152 : index
    %c1536_4117 = arith.constant 1536 : index
    %3339 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_4118 = tensor.insert_slice %3326 into %3339[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4119 = tensor.insert_slice %3330 into %inserted_slice_4118[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4120 = tensor.insert_slice %3334 into %inserted_slice_4119[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4121 = tensor.insert_slice %3338 into %inserted_slice_4120[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_4122 = tensor.expand_shape %inserted_slice_4121 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %3340 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_4123 = linalg.transpose ins(%expanded_4122 : tensor<4x384x32xf32>) outs(%3340 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_4124 = tensor.collapse_shape %transposed_4123 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_4125 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3341 = tensor.empty() : tensor<128x128xf32>
    %transposed_4126 = linalg.transpose ins(%cst_448 : tensor<128x128xf32>) outs(%3341 : tensor<128x128xf32>) permutation = [1, 0] 
    %3342 = tensor.empty() : tensor<384x128xf32>
    %3343 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_447 : tensor<128xf32>) outs(%3342 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3344 = linalg.matmul ins(%collapsed_4124, %transposed_4126 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3343 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4127 = tensor.expand_shape %3344 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3345 = tensor.empty() : tensor<1x384x128xf32>
    %3346 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4127, %expanded_4013 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3345 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3347 = tensor.empty() : tensor<1x384x128xf32>
    %3348 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3346, %cst_60 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3347 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3349 = tensor.empty() : tensor<1x384x128xf32>
    %3350 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3348, %cst_59 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3349 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4128 = tensor.collapse_shape %3350 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4129 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3351 = tensor.empty() : tensor<128x512xf32>
    %transposed_4130 = linalg.transpose ins(%cst_446 : tensor<512x128xf32>) outs(%3351 : tensor<128x512xf32>) permutation = [1, 0] 
    %3352 = tensor.empty() : tensor<384x512xf32>
    %3353 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_445 : tensor<512xf32>) outs(%3352 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3354 = linalg.matmul ins(%collapsed_4128, %transposed_4130 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3353 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3355 = tensor.empty() : tensor<384x512xf32>
    %3356 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3354 : tensor<384x512xf32>) outs(%3355 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4131 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3357 = tensor.empty() : tensor<512x128xf32>
    %transposed_4132 = linalg.transpose ins(%cst_444 : tensor<128x512xf32>) outs(%3357 : tensor<512x128xf32>) permutation = [1, 0] 
    %3358 = tensor.empty() : tensor<384x128xf32>
    %3359 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_443 : tensor<128xf32>) outs(%3358 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3360 = linalg.matmul ins(%3356, %transposed_4132 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3359 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4133 = tensor.expand_shape %3360 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3361 = tensor.empty() : tensor<1x384x128xf32>
    %3362 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4133, %3350 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3361 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3363 = tensor.empty() : tensor<1x384x128xf32>
    %3364 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3362, %cst_58 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3363 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3365 = tensor.empty() : tensor<1x384x128xf32>
    %3366 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3364, %cst_57 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3365 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4134 = tensor.collapse_shape %3366 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4135 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3367 = tensor.empty() : tensor<128x512xf32>
    %transposed_4136 = linalg.transpose ins(%cst_442 : tensor<512x128xf32>) outs(%3367 : tensor<128x512xf32>) permutation = [1, 0] 
    %3368 = tensor.empty() : tensor<384x512xf32>
    %3369 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_441 : tensor<512xf32>) outs(%3368 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3370 = linalg.matmul ins(%collapsed_4134, %transposed_4136 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3369 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3371 = tensor.empty() : tensor<384x512xf32>
    %3372 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3370 : tensor<384x512xf32>) outs(%3371 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4137 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3373 = tensor.empty() : tensor<512x128xf32>
    %transposed_4138 = linalg.transpose ins(%cst_440 : tensor<128x512xf32>) outs(%3373 : tensor<512x128xf32>) permutation = [1, 0] 
    %3374 = tensor.empty() : tensor<384x128xf32>
    %3375 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_439 : tensor<128xf32>) outs(%3374 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3376 = linalg.matmul ins(%3372, %transposed_4138 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3375 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4139 = tensor.expand_shape %3376 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3377 = tensor.empty() : tensor<1x384x128xf32>
    %3378 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4139, %3366 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3377 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3379 = tensor.empty() : tensor<1x384x128xf32>
    %3380 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3378, %cst_56 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3379 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3381 = tensor.empty() : tensor<1x384x128xf32>
    %3382 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3380, %cst_55 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3381 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4140 = tensor.collapse_shape %3382 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4141 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3383 = tensor.empty() : tensor<128x512xf32>
    %transposed_4142 = linalg.transpose ins(%cst_438 : tensor<512x128xf32>) outs(%3383 : tensor<128x512xf32>) permutation = [1, 0] 
    %3384 = tensor.empty() : tensor<384x512xf32>
    %3385 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_437 : tensor<512xf32>) outs(%3384 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3386 = linalg.matmul ins(%collapsed_4140, %transposed_4142 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3385 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3387 = tensor.empty() : tensor<384x512xf32>
    %3388 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3386 : tensor<384x512xf32>) outs(%3387 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4143 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3389 = tensor.empty() : tensor<512x128xf32>
    %transposed_4144 = linalg.transpose ins(%cst_436 : tensor<128x512xf32>) outs(%3389 : tensor<512x128xf32>) permutation = [1, 0] 
    %3390 = tensor.empty() : tensor<384x128xf32>
    %3391 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_435 : tensor<128xf32>) outs(%3390 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3392 = linalg.matmul ins(%3388, %transposed_4144 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3391 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4145 = tensor.expand_shape %3392 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3393 = tensor.empty() : tensor<1x384x128xf32>
    %3394 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4145, %3382 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3393 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3395 = tensor.empty() : tensor<1x384x128xf32>
    %3396 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3394, %cst_54 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3395 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3397 = tensor.empty() : tensor<1x384x128xf32>
    %3398 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3396, %cst_53 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3397 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4146 = tensor.collapse_shape %3398 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4147 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3399 = tensor.empty() : tensor<128x512xf32>
    %transposed_4148 = linalg.transpose ins(%cst_434 : tensor<512x128xf32>) outs(%3399 : tensor<128x512xf32>) permutation = [1, 0] 
    %3400 = tensor.empty() : tensor<384x512xf32>
    %3401 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_433 : tensor<512xf32>) outs(%3400 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3402 = linalg.matmul ins(%collapsed_4146, %transposed_4148 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3401 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3403 = tensor.empty() : tensor<384x512xf32>
    %3404 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3402 : tensor<384x512xf32>) outs(%3403 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4149 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3405 = tensor.empty() : tensor<512x128xf32>
    %transposed_4150 = linalg.transpose ins(%cst_432 : tensor<128x512xf32>) outs(%3405 : tensor<512x128xf32>) permutation = [1, 0] 
    %3406 = tensor.empty() : tensor<384x128xf32>
    %3407 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_431 : tensor<128xf32>) outs(%3406 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3408 = linalg.matmul ins(%3404, %transposed_4150 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3407 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4151 = tensor.expand_shape %3408 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3409 = tensor.empty() : tensor<1x384x128xf32>
    %3410 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4151, %3398 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3409 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3411 = tensor.empty() : tensor<1x384x128xf32>
    %3412 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3410, %cst_52 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3411 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3413 = tensor.empty() : tensor<1x384x128xf32>
    %3414 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3412, %cst_51 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3413 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4152 = tensor.collapse_shape %3414 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4153 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3415 = tensor.empty() : tensor<128x512xf32>
    %transposed_4154 = linalg.transpose ins(%cst_430 : tensor<512x128xf32>) outs(%3415 : tensor<128x512xf32>) permutation = [1, 0] 
    %3416 = tensor.empty() : tensor<384x512xf32>
    %3417 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_429 : tensor<512xf32>) outs(%3416 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3418 = linalg.matmul ins(%collapsed_4152, %transposed_4154 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3417 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_4155 = tensor.expand_shape %3418 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3419 = tensor.empty() : tensor<1x384x512xf32>
    %3420 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4155, %3254 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3419 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3421 = tensor.empty() : tensor<1x384x512xf32>
    %3422 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3420, %cst_50 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3421 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3423 = tensor.empty() : tensor<1x384x512xf32>
    %3424 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3422, %cst_49 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3423 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_4156 = tensor.collapse_shape %3424 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4157 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3425 = tensor.empty() : tensor<512x128xf32>
    %transposed_4158 = linalg.transpose ins(%cst_428 : tensor<128x512xf32>) outs(%3425 : tensor<512x128xf32>) permutation = [1, 0] 
    %3426 = tensor.empty() : tensor<384x128xf32>
    %3427 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_427 : tensor<128xf32>) outs(%3426 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3428 = linalg.matmul ins(%collapsed_4156, %transposed_4158 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3427 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4159 = tensor.collapse_shape %3424 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4160 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3429 = tensor.empty() : tensor<512x128xf32>
    %transposed_4161 = linalg.transpose ins(%cst_426 : tensor<128x512xf32>) outs(%3429 : tensor<512x128xf32>) permutation = [1, 0] 
    %3430 = tensor.empty() : tensor<384x128xf32>
    %3431 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_425 : tensor<128xf32>) outs(%3430 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3432 = linalg.matmul ins(%collapsed_4159, %transposed_4161 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3431 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4162 = tensor.collapse_shape %3424 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4163 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3433 = tensor.empty() : tensor<512x128xf32>
    %transposed_4164 = linalg.transpose ins(%cst_424 : tensor<128x512xf32>) outs(%3433 : tensor<512x128xf32>) permutation = [1, 0] 
    %3434 = tensor.empty() : tensor<384x128xf32>
    %3435 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_423 : tensor<128xf32>) outs(%3434 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3436 = linalg.matmul ins(%collapsed_4162, %transposed_4164 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3435 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4165 = tensor.expand_shape %3428 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_4166 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3437 = tensor.empty() : tensor<128x128xf32>
    %transposed_4167 = linalg.transpose ins(%cst_422 : tensor<128x128xf32>) outs(%3437 : tensor<128x128xf32>) permutation = [1, 0] 
    %3438 = tensor.empty() : tensor<384x128xf32>
    %3439 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_421 : tensor<128xf32>) outs(%3438 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3440 = linalg.matmul ins(%3432, %transposed_4167 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3439 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4168 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3441 = tensor.empty() : tensor<128x128xf32>
    %transposed_4169 = linalg.transpose ins(%cst_420 : tensor<128x128xf32>) outs(%3441 : tensor<128x128xf32>) permutation = [1, 0] 
    %3442 = tensor.empty() : tensor<384x128xf32>
    %3443 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_419 : tensor<128xf32>) outs(%3442 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3444 = linalg.matmul ins(%3432, %transposed_4169 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3443 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4170 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3445 = tensor.empty() : tensor<128x128xf32>
    %transposed_4171 = linalg.transpose ins(%cst_418 : tensor<128x128xf32>) outs(%3445 : tensor<128x128xf32>) permutation = [1, 0] 
    %3446 = tensor.empty() : tensor<384x128xf32>
    %3447 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_417 : tensor<128xf32>) outs(%3446 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3448 = linalg.matmul ins(%3436, %transposed_4171 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3447 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4172 = tensor.expand_shape %3440 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4173 = tensor.expand_shape %3444 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4174 = tensor.expand_shape %3448 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3449 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4175 = linalg.transpose ins(%expanded_4172 : tensor<1x384x4x32xf32>) outs(%3449 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3450 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4176 = linalg.transpose ins(%expanded_4174 : tensor<1x384x4x32xf32>) outs(%3450 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3451 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_4177 = linalg.transpose ins(%expanded_4173 : tensor<1x384x4x32xf32>) outs(%3451 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_4178 = tensor.collapse_shape %transposed_4175 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4179 = tensor.extract_slice %collapsed_4178[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4180 = tensor.extract_slice %collapsed_4178[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4181 = tensor.extract_slice %collapsed_4178[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4182 = tensor.extract_slice %collapsed_4178[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_4183 = tensor.collapse_shape %transposed_4177 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_4184 = tensor.extract_slice %collapsed_4183[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3452 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4185 = linalg.transpose ins(%extracted_slice_4184 : tensor<1x32x384xf32>) outs(%3452 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4186 = tensor.extract_slice %collapsed_4183[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3453 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4187 = linalg.transpose ins(%extracted_slice_4186 : tensor<1x32x384xf32>) outs(%3453 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4188 = tensor.extract_slice %collapsed_4183[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3454 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4189 = linalg.transpose ins(%extracted_slice_4188 : tensor<1x32x384xf32>) outs(%3454 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4190 = tensor.extract_slice %collapsed_4183[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3455 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4191 = linalg.transpose ins(%extracted_slice_4190 : tensor<1x32x384xf32>) outs(%3455 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4192 = tensor.collapse_shape %transposed_4185 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4193 = tensor.collapse_shape %extracted_slice_4179 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4194 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3456 = tensor.empty() : tensor<32x384xf32>
    %transposed_4195 = linalg.transpose ins(%collapsed_4192 : tensor<384x32xf32>) outs(%3456 : tensor<32x384xf32>) permutation = [1, 0] 
    %3457 = tensor.empty() : tensor<384x384xf32>
    %3458 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3457 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3459 = linalg.matmul ins(%collapsed_4193, %transposed_4195 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3458 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4196 = tensor.collapse_shape %transposed_4187 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4197 = tensor.collapse_shape %extracted_slice_4180 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4198 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3460 = tensor.empty() : tensor<32x384xf32>
    %transposed_4199 = linalg.transpose ins(%collapsed_4196 : tensor<384x32xf32>) outs(%3460 : tensor<32x384xf32>) permutation = [1, 0] 
    %3461 = tensor.empty() : tensor<384x384xf32>
    %3462 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3461 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3463 = linalg.matmul ins(%collapsed_4197, %transposed_4199 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3462 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4200 = tensor.collapse_shape %transposed_4189 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4201 = tensor.collapse_shape %extracted_slice_4181 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4202 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3464 = tensor.empty() : tensor<32x384xf32>
    %transposed_4203 = linalg.transpose ins(%collapsed_4200 : tensor<384x32xf32>) outs(%3464 : tensor<32x384xf32>) permutation = [1, 0] 
    %3465 = tensor.empty() : tensor<384x384xf32>
    %3466 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3465 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3467 = linalg.matmul ins(%collapsed_4201, %transposed_4203 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3466 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4204 = tensor.collapse_shape %transposed_4191 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4205 = tensor.collapse_shape %extracted_slice_4182 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4206 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3468 = tensor.empty() : tensor<32x384xf32>
    %transposed_4207 = linalg.transpose ins(%collapsed_4204 : tensor<384x32xf32>) outs(%3468 : tensor<32x384xf32>) permutation = [1, 0] 
    %3469 = tensor.empty() : tensor<384x384xf32>
    %3470 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3469 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3471 = linalg.matmul ins(%collapsed_4205, %transposed_4207 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3470 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_4208 = arith.constant 0 : index
    %c384_4209 = arith.constant 384 : index
    %c384_4210 = arith.constant 384 : index
    %c768_4211 = arith.constant 768 : index
    %c384_4212 = arith.constant 384 : index
    %c768_4213 = arith.constant 768 : index
    %c1152_4214 = arith.constant 1152 : index
    %c384_4215 = arith.constant 384 : index
    %c1152_4216 = arith.constant 1152 : index
    %c1536_4217 = arith.constant 1536 : index
    %3472 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_4218 = tensor.insert_slice %3459 into %3472[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4219 = tensor.insert_slice %3463 into %inserted_slice_4218[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4220 = tensor.insert_slice %3467 into %inserted_slice_4219[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4221 = tensor.insert_slice %3471 into %inserted_slice_4220[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_4222 = tensor.expand_shape %inserted_slice_4221 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %3473 = tensor.empty() : tensor<4x384x384xf32>
    %3474 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4222, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%3473 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_4223 = tensor.expand_shape %3474 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %3475 = tensor.empty() : tensor<1x4x384x384xf32>
    %3476 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4223, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%3475 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3477 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4224 = arith.constant -3.40282347E+38 : f32
    %3478 = linalg.fill ins(%cst_4224 : f32) outs(%3477 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4225 = linalg.reduce ins(%3476 : tensor<1x4x384x384xf32>) outs(%3478 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4226 = tensor.expand_shape %reduced_4225 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3479 = tensor.empty() : tensor<1x4x384x384xf32>
    %3480 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3476, %expanded_4226 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3479 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3481 = tensor.empty() : tensor<1x4x384x384xf32>
    %3482 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3480 : tensor<1x4x384x384xf32>) outs(%3481 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3483 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4227 = arith.constant 0.000000e+00 : f32
    %3484 = linalg.fill ins(%cst_4227 : f32) outs(%3483 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4228 = linalg.reduce ins(%3482 : tensor<1x4x384x384xf32>) outs(%3484 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4229 = tensor.expand_shape %reduced_4228 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3485 = tensor.empty() : tensor<1x4x384x1xf32>
    %3486 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4229 : tensor<1x4x384x1xf32>) outs(%3485 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %3487 = tensor.empty() : tensor<1x4x384x384xf32>
    %3488 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3482, %3486 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3487 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_4230 = tensor.collapse_shape %3488 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_4231 = tensor.extract_slice %collapsed_4230[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4232 = tensor.extract_slice %collapsed_4230[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4233 = tensor.extract_slice %collapsed_4230[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4234 = tensor.extract_slice %collapsed_4230[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_4235 = tensor.collapse_shape %transposed_4176 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4236 = tensor.extract_slice %collapsed_4235[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3489 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4237 = linalg.transpose ins(%extracted_slice_4236 : tensor<1x384x32xf32>) outs(%3489 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4238 = tensor.extract_slice %collapsed_4235[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3490 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4239 = linalg.transpose ins(%extracted_slice_4238 : tensor<1x384x32xf32>) outs(%3490 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4240 = tensor.extract_slice %collapsed_4235[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3491 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4241 = linalg.transpose ins(%extracted_slice_4240 : tensor<1x384x32xf32>) outs(%3491 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4242 = tensor.extract_slice %collapsed_4235[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3492 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4243 = linalg.transpose ins(%extracted_slice_4242 : tensor<1x384x32xf32>) outs(%3492 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4244 = tensor.collapse_shape %transposed_4237 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4245 = tensor.collapse_shape %extracted_slice_4231 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4246 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3493 = tensor.empty() : tensor<384x32xf32>
    %transposed_4247 = linalg.transpose ins(%collapsed_4244 : tensor<32x384xf32>) outs(%3493 : tensor<384x32xf32>) permutation = [1, 0] 
    %3494 = tensor.empty() : tensor<384x32xf32>
    %3495 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3494 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3496 = linalg.matmul ins(%collapsed_4245, %transposed_4247 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3495 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4248 = tensor.collapse_shape %transposed_4239 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4249 = tensor.collapse_shape %extracted_slice_4232 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4250 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3497 = tensor.empty() : tensor<384x32xf32>
    %transposed_4251 = linalg.transpose ins(%collapsed_4248 : tensor<32x384xf32>) outs(%3497 : tensor<384x32xf32>) permutation = [1, 0] 
    %3498 = tensor.empty() : tensor<384x32xf32>
    %3499 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3498 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3500 = linalg.matmul ins(%collapsed_4249, %transposed_4251 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3499 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4252 = tensor.collapse_shape %transposed_4241 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4253 = tensor.collapse_shape %extracted_slice_4233 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4254 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3501 = tensor.empty() : tensor<384x32xf32>
    %transposed_4255 = linalg.transpose ins(%collapsed_4252 : tensor<32x384xf32>) outs(%3501 : tensor<384x32xf32>) permutation = [1, 0] 
    %3502 = tensor.empty() : tensor<384x32xf32>
    %3503 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3502 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3504 = linalg.matmul ins(%collapsed_4253, %transposed_4255 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3503 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4256 = tensor.collapse_shape %transposed_4243 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4257 = tensor.collapse_shape %extracted_slice_4234 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4258 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3505 = tensor.empty() : tensor<384x32xf32>
    %transposed_4259 = linalg.transpose ins(%collapsed_4256 : tensor<32x384xf32>) outs(%3505 : tensor<384x32xf32>) permutation = [1, 0] 
    %3506 = tensor.empty() : tensor<384x32xf32>
    %3507 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3506 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3508 = linalg.matmul ins(%collapsed_4257, %transposed_4259 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3507 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_4260 = arith.constant 0 : index
    %c384_4261 = arith.constant 384 : index
    %c384_4262 = arith.constant 384 : index
    %c768_4263 = arith.constant 768 : index
    %c384_4264 = arith.constant 384 : index
    %c768_4265 = arith.constant 768 : index
    %c1152_4266 = arith.constant 1152 : index
    %c384_4267 = arith.constant 384 : index
    %c1152_4268 = arith.constant 1152 : index
    %c1536_4269 = arith.constant 1536 : index
    %3509 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_4270 = tensor.insert_slice %3496 into %3509[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4271 = tensor.insert_slice %3500 into %inserted_slice_4270[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4272 = tensor.insert_slice %3504 into %inserted_slice_4271[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4273 = tensor.insert_slice %3508 into %inserted_slice_4272[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_4274 = tensor.expand_shape %inserted_slice_4273 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %3510 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_4275 = linalg.transpose ins(%expanded_4274 : tensor<4x384x32xf32>) outs(%3510 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_4276 = tensor.collapse_shape %transposed_4275 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_4277 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3511 = tensor.empty() : tensor<128x128xf32>
    %transposed_4278 = linalg.transpose ins(%cst_416 : tensor<128x128xf32>) outs(%3511 : tensor<128x128xf32>) permutation = [1, 0] 
    %3512 = tensor.empty() : tensor<384x128xf32>
    %3513 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_415 : tensor<128xf32>) outs(%3512 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3514 = linalg.matmul ins(%collapsed_4276, %transposed_4278 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3513 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4279 = tensor.expand_shape %3514 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3515 = tensor.empty() : tensor<1x384x128xf32>
    %3516 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4279, %expanded_4165 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3515 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3517 = tensor.empty() : tensor<1x384x128xf32>
    %3518 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3516, %cst_48 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3517 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3519 = tensor.empty() : tensor<1x384x128xf32>
    %3520 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3518, %cst_47 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3519 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4280 = tensor.collapse_shape %3520 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4281 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3521 = tensor.empty() : tensor<128x512xf32>
    %transposed_4282 = linalg.transpose ins(%cst_414 : tensor<512x128xf32>) outs(%3521 : tensor<128x512xf32>) permutation = [1, 0] 
    %3522 = tensor.empty() : tensor<384x512xf32>
    %3523 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_413 : tensor<512xf32>) outs(%3522 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3524 = linalg.matmul ins(%collapsed_4280, %transposed_4282 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3523 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3525 = tensor.empty() : tensor<384x512xf32>
    %3526 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3524 : tensor<384x512xf32>) outs(%3525 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4283 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3527 = tensor.empty() : tensor<512x128xf32>
    %transposed_4284 = linalg.transpose ins(%cst_412 : tensor<128x512xf32>) outs(%3527 : tensor<512x128xf32>) permutation = [1, 0] 
    %3528 = tensor.empty() : tensor<384x128xf32>
    %3529 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_411 : tensor<128xf32>) outs(%3528 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3530 = linalg.matmul ins(%3526, %transposed_4284 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3529 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4285 = tensor.expand_shape %3530 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3531 = tensor.empty() : tensor<1x384x128xf32>
    %3532 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4285, %3520 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3531 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3533 = tensor.empty() : tensor<1x384x128xf32>
    %3534 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3532, %cst_46 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3533 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3535 = tensor.empty() : tensor<1x384x128xf32>
    %3536 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3534, %cst_45 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3535 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4286 = tensor.collapse_shape %3536 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4287 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3537 = tensor.empty() : tensor<128x512xf32>
    %transposed_4288 = linalg.transpose ins(%cst_410 : tensor<512x128xf32>) outs(%3537 : tensor<128x512xf32>) permutation = [1, 0] 
    %3538 = tensor.empty() : tensor<384x512xf32>
    %3539 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_409 : tensor<512xf32>) outs(%3538 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3540 = linalg.matmul ins(%collapsed_4286, %transposed_4288 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3539 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3541 = tensor.empty() : tensor<384x512xf32>
    %3542 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3540 : tensor<384x512xf32>) outs(%3541 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4289 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3543 = tensor.empty() : tensor<512x128xf32>
    %transposed_4290 = linalg.transpose ins(%cst_408 : tensor<128x512xf32>) outs(%3543 : tensor<512x128xf32>) permutation = [1, 0] 
    %3544 = tensor.empty() : tensor<384x128xf32>
    %3545 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_407 : tensor<128xf32>) outs(%3544 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3546 = linalg.matmul ins(%3542, %transposed_4290 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3545 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4291 = tensor.expand_shape %3546 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3547 = tensor.empty() : tensor<1x384x128xf32>
    %3548 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4291, %3536 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3547 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3549 = tensor.empty() : tensor<1x384x128xf32>
    %3550 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3548, %cst_44 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3549 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3551 = tensor.empty() : tensor<1x384x128xf32>
    %3552 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3550, %cst_43 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3551 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4292 = tensor.collapse_shape %3552 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4293 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3553 = tensor.empty() : tensor<128x512xf32>
    %transposed_4294 = linalg.transpose ins(%cst_406 : tensor<512x128xf32>) outs(%3553 : tensor<128x512xf32>) permutation = [1, 0] 
    %3554 = tensor.empty() : tensor<384x512xf32>
    %3555 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_405 : tensor<512xf32>) outs(%3554 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3556 = linalg.matmul ins(%collapsed_4292, %transposed_4294 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3555 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3557 = tensor.empty() : tensor<384x512xf32>
    %3558 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3556 : tensor<384x512xf32>) outs(%3557 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4295 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3559 = tensor.empty() : tensor<512x128xf32>
    %transposed_4296 = linalg.transpose ins(%cst_404 : tensor<128x512xf32>) outs(%3559 : tensor<512x128xf32>) permutation = [1, 0] 
    %3560 = tensor.empty() : tensor<384x128xf32>
    %3561 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_403 : tensor<128xf32>) outs(%3560 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3562 = linalg.matmul ins(%3558, %transposed_4296 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3561 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4297 = tensor.expand_shape %3562 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3563 = tensor.empty() : tensor<1x384x128xf32>
    %3564 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4297, %3552 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3563 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3565 = tensor.empty() : tensor<1x384x128xf32>
    %3566 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3564, %cst_42 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3565 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3567 = tensor.empty() : tensor<1x384x128xf32>
    %3568 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3566, %cst_41 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3567 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4298 = tensor.collapse_shape %3568 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4299 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3569 = tensor.empty() : tensor<128x512xf32>
    %transposed_4300 = linalg.transpose ins(%cst_402 : tensor<512x128xf32>) outs(%3569 : tensor<128x512xf32>) permutation = [1, 0] 
    %3570 = tensor.empty() : tensor<384x512xf32>
    %3571 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_401 : tensor<512xf32>) outs(%3570 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3572 = linalg.matmul ins(%collapsed_4298, %transposed_4300 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3571 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3573 = tensor.empty() : tensor<384x512xf32>
    %3574 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3572 : tensor<384x512xf32>) outs(%3573 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4301 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3575 = tensor.empty() : tensor<512x128xf32>
    %transposed_4302 = linalg.transpose ins(%cst_400 : tensor<128x512xf32>) outs(%3575 : tensor<512x128xf32>) permutation = [1, 0] 
    %3576 = tensor.empty() : tensor<384x128xf32>
    %3577 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_399 : tensor<128xf32>) outs(%3576 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3578 = linalg.matmul ins(%3574, %transposed_4302 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3577 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4303 = tensor.expand_shape %3578 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3579 = tensor.empty() : tensor<1x384x128xf32>
    %3580 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4303, %3568 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3579 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3581 = tensor.empty() : tensor<1x384x128xf32>
    %3582 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3580, %cst_40 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3581 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3583 = tensor.empty() : tensor<1x384x128xf32>
    %3584 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3582, %cst_39 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3583 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4304 = tensor.collapse_shape %3584 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4305 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3585 = tensor.empty() : tensor<128x512xf32>
    %transposed_4306 = linalg.transpose ins(%cst_398 : tensor<512x128xf32>) outs(%3585 : tensor<128x512xf32>) permutation = [1, 0] 
    %3586 = tensor.empty() : tensor<384x512xf32>
    %3587 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_397 : tensor<512xf32>) outs(%3586 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3588 = linalg.matmul ins(%collapsed_4304, %transposed_4306 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3587 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_4307 = tensor.expand_shape %3588 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3589 = tensor.empty() : tensor<1x384x512xf32>
    %3590 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4307, %3424 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3589 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3591 = tensor.empty() : tensor<1x384x512xf32>
    %3592 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3590, %cst_38 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3591 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3593 = tensor.empty() : tensor<1x384x512xf32>
    %3594 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3592, %cst_37 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3593 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_4308 = tensor.collapse_shape %3594 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4309 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3595 = tensor.empty() : tensor<512x128xf32>
    %transposed_4310 = linalg.transpose ins(%cst_396 : tensor<128x512xf32>) outs(%3595 : tensor<512x128xf32>) permutation = [1, 0] 
    %3596 = tensor.empty() : tensor<384x128xf32>
    %3597 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_395 : tensor<128xf32>) outs(%3596 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3598 = linalg.matmul ins(%collapsed_4308, %transposed_4310 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3597 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4311 = tensor.collapse_shape %3594 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4312 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3599 = tensor.empty() : tensor<512x128xf32>
    %transposed_4313 = linalg.transpose ins(%cst_394 : tensor<128x512xf32>) outs(%3599 : tensor<512x128xf32>) permutation = [1, 0] 
    %3600 = tensor.empty() : tensor<384x128xf32>
    %3601 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_393 : tensor<128xf32>) outs(%3600 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3602 = linalg.matmul ins(%collapsed_4311, %transposed_4313 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3601 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4314 = tensor.collapse_shape %3594 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4315 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3603 = tensor.empty() : tensor<512x128xf32>
    %transposed_4316 = linalg.transpose ins(%cst_392 : tensor<128x512xf32>) outs(%3603 : tensor<512x128xf32>) permutation = [1, 0] 
    %3604 = tensor.empty() : tensor<384x128xf32>
    %3605 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_391 : tensor<128xf32>) outs(%3604 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3606 = linalg.matmul ins(%collapsed_4314, %transposed_4316 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3605 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4317 = tensor.expand_shape %3598 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_4318 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3607 = tensor.empty() : tensor<128x128xf32>
    %transposed_4319 = linalg.transpose ins(%cst_390 : tensor<128x128xf32>) outs(%3607 : tensor<128x128xf32>) permutation = [1, 0] 
    %3608 = tensor.empty() : tensor<384x128xf32>
    %3609 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_389 : tensor<128xf32>) outs(%3608 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3610 = linalg.matmul ins(%3602, %transposed_4319 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3609 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4320 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3611 = tensor.empty() : tensor<128x128xf32>
    %transposed_4321 = linalg.transpose ins(%cst_388 : tensor<128x128xf32>) outs(%3611 : tensor<128x128xf32>) permutation = [1, 0] 
    %3612 = tensor.empty() : tensor<384x128xf32>
    %3613 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_387 : tensor<128xf32>) outs(%3612 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3614 = linalg.matmul ins(%3602, %transposed_4321 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3613 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4322 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3615 = tensor.empty() : tensor<128x128xf32>
    %transposed_4323 = linalg.transpose ins(%cst_386 : tensor<128x128xf32>) outs(%3615 : tensor<128x128xf32>) permutation = [1, 0] 
    %3616 = tensor.empty() : tensor<384x128xf32>
    %3617 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_385 : tensor<128xf32>) outs(%3616 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3618 = linalg.matmul ins(%3606, %transposed_4323 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3617 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4324 = tensor.expand_shape %3610 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4325 = tensor.expand_shape %3614 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4326 = tensor.expand_shape %3618 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3619 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4327 = linalg.transpose ins(%expanded_4324 : tensor<1x384x4x32xf32>) outs(%3619 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3620 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4328 = linalg.transpose ins(%expanded_4326 : tensor<1x384x4x32xf32>) outs(%3620 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3621 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_4329 = linalg.transpose ins(%expanded_4325 : tensor<1x384x4x32xf32>) outs(%3621 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_4330 = tensor.collapse_shape %transposed_4327 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4331 = tensor.extract_slice %collapsed_4330[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4332 = tensor.extract_slice %collapsed_4330[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4333 = tensor.extract_slice %collapsed_4330[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4334 = tensor.extract_slice %collapsed_4330[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_4335 = tensor.collapse_shape %transposed_4329 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_4336 = tensor.extract_slice %collapsed_4335[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3622 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4337 = linalg.transpose ins(%extracted_slice_4336 : tensor<1x32x384xf32>) outs(%3622 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4338 = tensor.extract_slice %collapsed_4335[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3623 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4339 = linalg.transpose ins(%extracted_slice_4338 : tensor<1x32x384xf32>) outs(%3623 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4340 = tensor.extract_slice %collapsed_4335[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3624 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4341 = linalg.transpose ins(%extracted_slice_4340 : tensor<1x32x384xf32>) outs(%3624 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4342 = tensor.extract_slice %collapsed_4335[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3625 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4343 = linalg.transpose ins(%extracted_slice_4342 : tensor<1x32x384xf32>) outs(%3625 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4344 = tensor.collapse_shape %transposed_4337 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4345 = tensor.collapse_shape %extracted_slice_4331 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4346 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3626 = tensor.empty() : tensor<32x384xf32>
    %transposed_4347 = linalg.transpose ins(%collapsed_4344 : tensor<384x32xf32>) outs(%3626 : tensor<32x384xf32>) permutation = [1, 0] 
    %3627 = tensor.empty() : tensor<384x384xf32>
    %3628 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3627 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3629 = linalg.matmul ins(%collapsed_4345, %transposed_4347 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3628 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4348 = tensor.collapse_shape %transposed_4339 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4349 = tensor.collapse_shape %extracted_slice_4332 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4350 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3630 = tensor.empty() : tensor<32x384xf32>
    %transposed_4351 = linalg.transpose ins(%collapsed_4348 : tensor<384x32xf32>) outs(%3630 : tensor<32x384xf32>) permutation = [1, 0] 
    %3631 = tensor.empty() : tensor<384x384xf32>
    %3632 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3631 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3633 = linalg.matmul ins(%collapsed_4349, %transposed_4351 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3632 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4352 = tensor.collapse_shape %transposed_4341 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4353 = tensor.collapse_shape %extracted_slice_4333 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4354 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3634 = tensor.empty() : tensor<32x384xf32>
    %transposed_4355 = linalg.transpose ins(%collapsed_4352 : tensor<384x32xf32>) outs(%3634 : tensor<32x384xf32>) permutation = [1, 0] 
    %3635 = tensor.empty() : tensor<384x384xf32>
    %3636 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3635 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3637 = linalg.matmul ins(%collapsed_4353, %transposed_4355 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3636 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4356 = tensor.collapse_shape %transposed_4343 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4357 = tensor.collapse_shape %extracted_slice_4334 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4358 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3638 = tensor.empty() : tensor<32x384xf32>
    %transposed_4359 = linalg.transpose ins(%collapsed_4356 : tensor<384x32xf32>) outs(%3638 : tensor<32x384xf32>) permutation = [1, 0] 
    %3639 = tensor.empty() : tensor<384x384xf32>
    %3640 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3639 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3641 = linalg.matmul ins(%collapsed_4357, %transposed_4359 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3640 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_4360 = arith.constant 0 : index
    %c384_4361 = arith.constant 384 : index
    %c384_4362 = arith.constant 384 : index
    %c768_4363 = arith.constant 768 : index
    %c384_4364 = arith.constant 384 : index
    %c768_4365 = arith.constant 768 : index
    %c1152_4366 = arith.constant 1152 : index
    %c384_4367 = arith.constant 384 : index
    %c1152_4368 = arith.constant 1152 : index
    %c1536_4369 = arith.constant 1536 : index
    %3642 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_4370 = tensor.insert_slice %3629 into %3642[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4371 = tensor.insert_slice %3633 into %inserted_slice_4370[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4372 = tensor.insert_slice %3637 into %inserted_slice_4371[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4373 = tensor.insert_slice %3641 into %inserted_slice_4372[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_4374 = tensor.expand_shape %inserted_slice_4373 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %3643 = tensor.empty() : tensor<4x384x384xf32>
    %3644 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4374, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%3643 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_4375 = tensor.expand_shape %3644 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %3645 = tensor.empty() : tensor<1x4x384x384xf32>
    %3646 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4375, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%3645 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3647 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4376 = arith.constant -3.40282347E+38 : f32
    %3648 = linalg.fill ins(%cst_4376 : f32) outs(%3647 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4377 = linalg.reduce ins(%3646 : tensor<1x4x384x384xf32>) outs(%3648 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4378 = tensor.expand_shape %reduced_4377 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3649 = tensor.empty() : tensor<1x4x384x384xf32>
    %3650 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3646, %expanded_4378 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3649 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3651 = tensor.empty() : tensor<1x4x384x384xf32>
    %3652 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3650 : tensor<1x4x384x384xf32>) outs(%3651 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3653 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4379 = arith.constant 0.000000e+00 : f32
    %3654 = linalg.fill ins(%cst_4379 : f32) outs(%3653 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4380 = linalg.reduce ins(%3652 : tensor<1x4x384x384xf32>) outs(%3654 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4381 = tensor.expand_shape %reduced_4380 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3655 = tensor.empty() : tensor<1x4x384x1xf32>
    %3656 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4381 : tensor<1x4x384x1xf32>) outs(%3655 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %3657 = tensor.empty() : tensor<1x4x384x384xf32>
    %3658 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3652, %3656 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3657 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_4382 = tensor.collapse_shape %3658 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_4383 = tensor.extract_slice %collapsed_4382[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4384 = tensor.extract_slice %collapsed_4382[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4385 = tensor.extract_slice %collapsed_4382[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4386 = tensor.extract_slice %collapsed_4382[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_4387 = tensor.collapse_shape %transposed_4328 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4388 = tensor.extract_slice %collapsed_4387[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3659 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4389 = linalg.transpose ins(%extracted_slice_4388 : tensor<1x384x32xf32>) outs(%3659 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4390 = tensor.extract_slice %collapsed_4387[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3660 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4391 = linalg.transpose ins(%extracted_slice_4390 : tensor<1x384x32xf32>) outs(%3660 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4392 = tensor.extract_slice %collapsed_4387[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3661 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4393 = linalg.transpose ins(%extracted_slice_4392 : tensor<1x384x32xf32>) outs(%3661 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4394 = tensor.extract_slice %collapsed_4387[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3662 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4395 = linalg.transpose ins(%extracted_slice_4394 : tensor<1x384x32xf32>) outs(%3662 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4396 = tensor.collapse_shape %transposed_4389 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4397 = tensor.collapse_shape %extracted_slice_4383 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4398 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3663 = tensor.empty() : tensor<384x32xf32>
    %transposed_4399 = linalg.transpose ins(%collapsed_4396 : tensor<32x384xf32>) outs(%3663 : tensor<384x32xf32>) permutation = [1, 0] 
    %3664 = tensor.empty() : tensor<384x32xf32>
    %3665 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3664 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3666 = linalg.matmul ins(%collapsed_4397, %transposed_4399 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3665 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4400 = tensor.collapse_shape %transposed_4391 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4401 = tensor.collapse_shape %extracted_slice_4384 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4402 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3667 = tensor.empty() : tensor<384x32xf32>
    %transposed_4403 = linalg.transpose ins(%collapsed_4400 : tensor<32x384xf32>) outs(%3667 : tensor<384x32xf32>) permutation = [1, 0] 
    %3668 = tensor.empty() : tensor<384x32xf32>
    %3669 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3668 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3670 = linalg.matmul ins(%collapsed_4401, %transposed_4403 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3669 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4404 = tensor.collapse_shape %transposed_4393 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4405 = tensor.collapse_shape %extracted_slice_4385 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4406 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3671 = tensor.empty() : tensor<384x32xf32>
    %transposed_4407 = linalg.transpose ins(%collapsed_4404 : tensor<32x384xf32>) outs(%3671 : tensor<384x32xf32>) permutation = [1, 0] 
    %3672 = tensor.empty() : tensor<384x32xf32>
    %3673 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3672 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3674 = linalg.matmul ins(%collapsed_4405, %transposed_4407 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3673 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4408 = tensor.collapse_shape %transposed_4395 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4409 = tensor.collapse_shape %extracted_slice_4386 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4410 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3675 = tensor.empty() : tensor<384x32xf32>
    %transposed_4411 = linalg.transpose ins(%collapsed_4408 : tensor<32x384xf32>) outs(%3675 : tensor<384x32xf32>) permutation = [1, 0] 
    %3676 = tensor.empty() : tensor<384x32xf32>
    %3677 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3676 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3678 = linalg.matmul ins(%collapsed_4409, %transposed_4411 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3677 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_4412 = arith.constant 0 : index
    %c384_4413 = arith.constant 384 : index
    %c384_4414 = arith.constant 384 : index
    %c768_4415 = arith.constant 768 : index
    %c384_4416 = arith.constant 384 : index
    %c768_4417 = arith.constant 768 : index
    %c1152_4418 = arith.constant 1152 : index
    %c384_4419 = arith.constant 384 : index
    %c1152_4420 = arith.constant 1152 : index
    %c1536_4421 = arith.constant 1536 : index
    %3679 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_4422 = tensor.insert_slice %3666 into %3679[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4423 = tensor.insert_slice %3670 into %inserted_slice_4422[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4424 = tensor.insert_slice %3674 into %inserted_slice_4423[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4425 = tensor.insert_slice %3678 into %inserted_slice_4424[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_4426 = tensor.expand_shape %inserted_slice_4425 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %3680 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_4427 = linalg.transpose ins(%expanded_4426 : tensor<4x384x32xf32>) outs(%3680 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_4428 = tensor.collapse_shape %transposed_4427 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_4429 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3681 = tensor.empty() : tensor<128x128xf32>
    %transposed_4430 = linalg.transpose ins(%cst_384 : tensor<128x128xf32>) outs(%3681 : tensor<128x128xf32>) permutation = [1, 0] 
    %3682 = tensor.empty() : tensor<384x128xf32>
    %3683 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_383 : tensor<128xf32>) outs(%3682 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3684 = linalg.matmul ins(%collapsed_4428, %transposed_4430 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3683 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4431 = tensor.expand_shape %3684 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3685 = tensor.empty() : tensor<1x384x128xf32>
    %3686 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4431, %expanded_4317 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3685 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3687 = tensor.empty() : tensor<1x384x128xf32>
    %3688 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3686, %cst_36 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3687 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3689 = tensor.empty() : tensor<1x384x128xf32>
    %3690 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3688, %cst_35 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3689 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4432 = tensor.collapse_shape %3690 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4433 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3691 = tensor.empty() : tensor<128x512xf32>
    %transposed_4434 = linalg.transpose ins(%cst_382 : tensor<512x128xf32>) outs(%3691 : tensor<128x512xf32>) permutation = [1, 0] 
    %3692 = tensor.empty() : tensor<384x512xf32>
    %3693 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_381 : tensor<512xf32>) outs(%3692 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3694 = linalg.matmul ins(%collapsed_4432, %transposed_4434 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3693 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3695 = tensor.empty() : tensor<384x512xf32>
    %3696 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3694 : tensor<384x512xf32>) outs(%3695 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4435 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3697 = tensor.empty() : tensor<512x128xf32>
    %transposed_4436 = linalg.transpose ins(%cst_380 : tensor<128x512xf32>) outs(%3697 : tensor<512x128xf32>) permutation = [1, 0] 
    %3698 = tensor.empty() : tensor<384x128xf32>
    %3699 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_379 : tensor<128xf32>) outs(%3698 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3700 = linalg.matmul ins(%3696, %transposed_4436 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3699 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4437 = tensor.expand_shape %3700 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3701 = tensor.empty() : tensor<1x384x128xf32>
    %3702 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4437, %3690 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3701 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3703 = tensor.empty() : tensor<1x384x128xf32>
    %3704 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3702, %cst_34 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3703 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3705 = tensor.empty() : tensor<1x384x128xf32>
    %3706 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3704, %cst_33 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3705 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4438 = tensor.collapse_shape %3706 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4439 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3707 = tensor.empty() : tensor<128x512xf32>
    %transposed_4440 = linalg.transpose ins(%cst_378 : tensor<512x128xf32>) outs(%3707 : tensor<128x512xf32>) permutation = [1, 0] 
    %3708 = tensor.empty() : tensor<384x512xf32>
    %3709 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_377 : tensor<512xf32>) outs(%3708 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3710 = linalg.matmul ins(%collapsed_4438, %transposed_4440 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3709 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3711 = tensor.empty() : tensor<384x512xf32>
    %3712 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3710 : tensor<384x512xf32>) outs(%3711 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4441 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3713 = tensor.empty() : tensor<512x128xf32>
    %transposed_4442 = linalg.transpose ins(%cst_376 : tensor<128x512xf32>) outs(%3713 : tensor<512x128xf32>) permutation = [1, 0] 
    %3714 = tensor.empty() : tensor<384x128xf32>
    %3715 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_375 : tensor<128xf32>) outs(%3714 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3716 = linalg.matmul ins(%3712, %transposed_4442 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3715 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4443 = tensor.expand_shape %3716 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3717 = tensor.empty() : tensor<1x384x128xf32>
    %3718 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4443, %3706 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3717 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3719 = tensor.empty() : tensor<1x384x128xf32>
    %3720 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3718, %cst_32 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3719 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3721 = tensor.empty() : tensor<1x384x128xf32>
    %3722 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3720, %cst_31 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3721 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4444 = tensor.collapse_shape %3722 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4445 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3723 = tensor.empty() : tensor<128x512xf32>
    %transposed_4446 = linalg.transpose ins(%cst_374 : tensor<512x128xf32>) outs(%3723 : tensor<128x512xf32>) permutation = [1, 0] 
    %3724 = tensor.empty() : tensor<384x512xf32>
    %3725 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_373 : tensor<512xf32>) outs(%3724 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3726 = linalg.matmul ins(%collapsed_4444, %transposed_4446 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3725 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3727 = tensor.empty() : tensor<384x512xf32>
    %3728 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3726 : tensor<384x512xf32>) outs(%3727 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4447 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3729 = tensor.empty() : tensor<512x128xf32>
    %transposed_4448 = linalg.transpose ins(%cst_372 : tensor<128x512xf32>) outs(%3729 : tensor<512x128xf32>) permutation = [1, 0] 
    %3730 = tensor.empty() : tensor<384x128xf32>
    %3731 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_371 : tensor<128xf32>) outs(%3730 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3732 = linalg.matmul ins(%3728, %transposed_4448 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3731 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4449 = tensor.expand_shape %3732 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3733 = tensor.empty() : tensor<1x384x128xf32>
    %3734 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4449, %3722 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3733 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3735 = tensor.empty() : tensor<1x384x128xf32>
    %3736 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3734, %cst_30 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3735 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3737 = tensor.empty() : tensor<1x384x128xf32>
    %3738 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3736, %cst_29 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3737 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4450 = tensor.collapse_shape %3738 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4451 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3739 = tensor.empty() : tensor<128x512xf32>
    %transposed_4452 = linalg.transpose ins(%cst_370 : tensor<512x128xf32>) outs(%3739 : tensor<128x512xf32>) permutation = [1, 0] 
    %3740 = tensor.empty() : tensor<384x512xf32>
    %3741 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_369 : tensor<512xf32>) outs(%3740 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3742 = linalg.matmul ins(%collapsed_4450, %transposed_4452 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3741 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3743 = tensor.empty() : tensor<384x512xf32>
    %3744 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3742 : tensor<384x512xf32>) outs(%3743 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4453 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3745 = tensor.empty() : tensor<512x128xf32>
    %transposed_4454 = linalg.transpose ins(%cst_368 : tensor<128x512xf32>) outs(%3745 : tensor<512x128xf32>) permutation = [1, 0] 
    %3746 = tensor.empty() : tensor<384x128xf32>
    %3747 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_367 : tensor<128xf32>) outs(%3746 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3748 = linalg.matmul ins(%3744, %transposed_4454 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3747 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4455 = tensor.expand_shape %3748 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3749 = tensor.empty() : tensor<1x384x128xf32>
    %3750 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4455, %3738 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3749 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3751 = tensor.empty() : tensor<1x384x128xf32>
    %3752 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3750, %cst_28 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3751 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3753 = tensor.empty() : tensor<1x384x128xf32>
    %3754 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3752, %cst_27 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3753 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4456 = tensor.collapse_shape %3754 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4457 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3755 = tensor.empty() : tensor<128x512xf32>
    %transposed_4458 = linalg.transpose ins(%cst_366 : tensor<512x128xf32>) outs(%3755 : tensor<128x512xf32>) permutation = [1, 0] 
    %3756 = tensor.empty() : tensor<384x512xf32>
    %3757 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_365 : tensor<512xf32>) outs(%3756 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3758 = linalg.matmul ins(%collapsed_4456, %transposed_4458 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3757 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_4459 = tensor.expand_shape %3758 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3759 = tensor.empty() : tensor<1x384x512xf32>
    %3760 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4459, %3594 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3759 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3761 = tensor.empty() : tensor<1x384x512xf32>
    %3762 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3760, %cst_26 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3761 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3763 = tensor.empty() : tensor<1x384x512xf32>
    %3764 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3762, %cst_25 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3763 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_4460 = tensor.collapse_shape %3764 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4461 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3765 = tensor.empty() : tensor<512x128xf32>
    %transposed_4462 = linalg.transpose ins(%cst_364 : tensor<128x512xf32>) outs(%3765 : tensor<512x128xf32>) permutation = [1, 0] 
    %3766 = tensor.empty() : tensor<384x128xf32>
    %3767 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_363 : tensor<128xf32>) outs(%3766 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3768 = linalg.matmul ins(%collapsed_4460, %transposed_4462 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3767 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4463 = tensor.collapse_shape %3764 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4464 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3769 = tensor.empty() : tensor<512x128xf32>
    %transposed_4465 = linalg.transpose ins(%cst_362 : tensor<128x512xf32>) outs(%3769 : tensor<512x128xf32>) permutation = [1, 0] 
    %3770 = tensor.empty() : tensor<384x128xf32>
    %3771 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_361 : tensor<128xf32>) outs(%3770 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3772 = linalg.matmul ins(%collapsed_4463, %transposed_4465 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3771 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4466 = tensor.collapse_shape %3764 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4467 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3773 = tensor.empty() : tensor<512x128xf32>
    %transposed_4468 = linalg.transpose ins(%cst_360 : tensor<128x512xf32>) outs(%3773 : tensor<512x128xf32>) permutation = [1, 0] 
    %3774 = tensor.empty() : tensor<384x128xf32>
    %3775 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_359 : tensor<128xf32>) outs(%3774 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3776 = linalg.matmul ins(%collapsed_4466, %transposed_4468 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3775 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4469 = tensor.expand_shape %3768 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_4470 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3777 = tensor.empty() : tensor<128x128xf32>
    %transposed_4471 = linalg.transpose ins(%cst_358 : tensor<128x128xf32>) outs(%3777 : tensor<128x128xf32>) permutation = [1, 0] 
    %3778 = tensor.empty() : tensor<384x128xf32>
    %3779 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_357 : tensor<128xf32>) outs(%3778 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3780 = linalg.matmul ins(%3772, %transposed_4471 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3779 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4472 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3781 = tensor.empty() : tensor<128x128xf32>
    %transposed_4473 = linalg.transpose ins(%cst_356 : tensor<128x128xf32>) outs(%3781 : tensor<128x128xf32>) permutation = [1, 0] 
    %3782 = tensor.empty() : tensor<384x128xf32>
    %3783 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_355 : tensor<128xf32>) outs(%3782 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3784 = linalg.matmul ins(%3772, %transposed_4473 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3783 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4474 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3785 = tensor.empty() : tensor<128x128xf32>
    %transposed_4475 = linalg.transpose ins(%cst_354 : tensor<128x128xf32>) outs(%3785 : tensor<128x128xf32>) permutation = [1, 0] 
    %3786 = tensor.empty() : tensor<384x128xf32>
    %3787 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_353 : tensor<128xf32>) outs(%3786 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3788 = linalg.matmul ins(%3776, %transposed_4475 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3787 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4476 = tensor.expand_shape %3780 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4477 = tensor.expand_shape %3784 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4478 = tensor.expand_shape %3788 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3789 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4479 = linalg.transpose ins(%expanded_4476 : tensor<1x384x4x32xf32>) outs(%3789 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3790 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4480 = linalg.transpose ins(%expanded_4478 : tensor<1x384x4x32xf32>) outs(%3790 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3791 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_4481 = linalg.transpose ins(%expanded_4477 : tensor<1x384x4x32xf32>) outs(%3791 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_4482 = tensor.collapse_shape %transposed_4479 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4483 = tensor.extract_slice %collapsed_4482[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4484 = tensor.extract_slice %collapsed_4482[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4485 = tensor.extract_slice %collapsed_4482[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4486 = tensor.extract_slice %collapsed_4482[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_4487 = tensor.collapse_shape %transposed_4481 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_4488 = tensor.extract_slice %collapsed_4487[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3792 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4489 = linalg.transpose ins(%extracted_slice_4488 : tensor<1x32x384xf32>) outs(%3792 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4490 = tensor.extract_slice %collapsed_4487[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3793 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4491 = linalg.transpose ins(%extracted_slice_4490 : tensor<1x32x384xf32>) outs(%3793 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4492 = tensor.extract_slice %collapsed_4487[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3794 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4493 = linalg.transpose ins(%extracted_slice_4492 : tensor<1x32x384xf32>) outs(%3794 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4494 = tensor.extract_slice %collapsed_4487[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3795 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4495 = linalg.transpose ins(%extracted_slice_4494 : tensor<1x32x384xf32>) outs(%3795 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4496 = tensor.collapse_shape %transposed_4489 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4497 = tensor.collapse_shape %extracted_slice_4483 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4498 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3796 = tensor.empty() : tensor<32x384xf32>
    %transposed_4499 = linalg.transpose ins(%collapsed_4496 : tensor<384x32xf32>) outs(%3796 : tensor<32x384xf32>) permutation = [1, 0] 
    %3797 = tensor.empty() : tensor<384x384xf32>
    %3798 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3797 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3799 = linalg.matmul ins(%collapsed_4497, %transposed_4499 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3798 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4500 = tensor.collapse_shape %transposed_4491 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4501 = tensor.collapse_shape %extracted_slice_4484 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4502 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3800 = tensor.empty() : tensor<32x384xf32>
    %transposed_4503 = linalg.transpose ins(%collapsed_4500 : tensor<384x32xf32>) outs(%3800 : tensor<32x384xf32>) permutation = [1, 0] 
    %3801 = tensor.empty() : tensor<384x384xf32>
    %3802 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3801 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3803 = linalg.matmul ins(%collapsed_4501, %transposed_4503 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3802 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4504 = tensor.collapse_shape %transposed_4493 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4505 = tensor.collapse_shape %extracted_slice_4485 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4506 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3804 = tensor.empty() : tensor<32x384xf32>
    %transposed_4507 = linalg.transpose ins(%collapsed_4504 : tensor<384x32xf32>) outs(%3804 : tensor<32x384xf32>) permutation = [1, 0] 
    %3805 = tensor.empty() : tensor<384x384xf32>
    %3806 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3805 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3807 = linalg.matmul ins(%collapsed_4505, %transposed_4507 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3806 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4508 = tensor.collapse_shape %transposed_4495 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4509 = tensor.collapse_shape %extracted_slice_4486 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4510 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3808 = tensor.empty() : tensor<32x384xf32>
    %transposed_4511 = linalg.transpose ins(%collapsed_4508 : tensor<384x32xf32>) outs(%3808 : tensor<32x384xf32>) permutation = [1, 0] 
    %3809 = tensor.empty() : tensor<384x384xf32>
    %3810 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3809 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3811 = linalg.matmul ins(%collapsed_4509, %transposed_4511 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3810 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_4512 = arith.constant 0 : index
    %c384_4513 = arith.constant 384 : index
    %c384_4514 = arith.constant 384 : index
    %c768_4515 = arith.constant 768 : index
    %c384_4516 = arith.constant 384 : index
    %c768_4517 = arith.constant 768 : index
    %c1152_4518 = arith.constant 1152 : index
    %c384_4519 = arith.constant 384 : index
    %c1152_4520 = arith.constant 1152 : index
    %c1536_4521 = arith.constant 1536 : index
    %3812 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_4522 = tensor.insert_slice %3799 into %3812[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4523 = tensor.insert_slice %3803 into %inserted_slice_4522[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4524 = tensor.insert_slice %3807 into %inserted_slice_4523[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4525 = tensor.insert_slice %3811 into %inserted_slice_4524[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_4526 = tensor.expand_shape %inserted_slice_4525 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %3813 = tensor.empty() : tensor<4x384x384xf32>
    %3814 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4526, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%3813 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_4527 = tensor.expand_shape %3814 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %3815 = tensor.empty() : tensor<1x4x384x384xf32>
    %3816 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4527, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%3815 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3817 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4528 = arith.constant -3.40282347E+38 : f32
    %3818 = linalg.fill ins(%cst_4528 : f32) outs(%3817 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4529 = linalg.reduce ins(%3816 : tensor<1x4x384x384xf32>) outs(%3818 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4530 = tensor.expand_shape %reduced_4529 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3819 = tensor.empty() : tensor<1x4x384x384xf32>
    %3820 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3816, %expanded_4530 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3819 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3821 = tensor.empty() : tensor<1x4x384x384xf32>
    %3822 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3820 : tensor<1x4x384x384xf32>) outs(%3821 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3823 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4531 = arith.constant 0.000000e+00 : f32
    %3824 = linalg.fill ins(%cst_4531 : f32) outs(%3823 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4532 = linalg.reduce ins(%3822 : tensor<1x4x384x384xf32>) outs(%3824 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4533 = tensor.expand_shape %reduced_4532 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3825 = tensor.empty() : tensor<1x4x384x1xf32>
    %3826 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4533 : tensor<1x4x384x1xf32>) outs(%3825 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %3827 = tensor.empty() : tensor<1x4x384x384xf32>
    %3828 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3822, %3826 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3827 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_4534 = tensor.collapse_shape %3828 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_4535 = tensor.extract_slice %collapsed_4534[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4536 = tensor.extract_slice %collapsed_4534[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4537 = tensor.extract_slice %collapsed_4534[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4538 = tensor.extract_slice %collapsed_4534[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_4539 = tensor.collapse_shape %transposed_4480 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4540 = tensor.extract_slice %collapsed_4539[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3829 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4541 = linalg.transpose ins(%extracted_slice_4540 : tensor<1x384x32xf32>) outs(%3829 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4542 = tensor.extract_slice %collapsed_4539[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3830 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4543 = linalg.transpose ins(%extracted_slice_4542 : tensor<1x384x32xf32>) outs(%3830 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4544 = tensor.extract_slice %collapsed_4539[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3831 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4545 = linalg.transpose ins(%extracted_slice_4544 : tensor<1x384x32xf32>) outs(%3831 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4546 = tensor.extract_slice %collapsed_4539[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3832 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4547 = linalg.transpose ins(%extracted_slice_4546 : tensor<1x384x32xf32>) outs(%3832 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4548 = tensor.collapse_shape %transposed_4541 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4549 = tensor.collapse_shape %extracted_slice_4535 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4550 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3833 = tensor.empty() : tensor<384x32xf32>
    %transposed_4551 = linalg.transpose ins(%collapsed_4548 : tensor<32x384xf32>) outs(%3833 : tensor<384x32xf32>) permutation = [1, 0] 
    %3834 = tensor.empty() : tensor<384x32xf32>
    %3835 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3834 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3836 = linalg.matmul ins(%collapsed_4549, %transposed_4551 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3835 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4552 = tensor.collapse_shape %transposed_4543 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4553 = tensor.collapse_shape %extracted_slice_4536 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4554 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3837 = tensor.empty() : tensor<384x32xf32>
    %transposed_4555 = linalg.transpose ins(%collapsed_4552 : tensor<32x384xf32>) outs(%3837 : tensor<384x32xf32>) permutation = [1, 0] 
    %3838 = tensor.empty() : tensor<384x32xf32>
    %3839 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3838 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3840 = linalg.matmul ins(%collapsed_4553, %transposed_4555 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3839 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4556 = tensor.collapse_shape %transposed_4545 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4557 = tensor.collapse_shape %extracted_slice_4537 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4558 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3841 = tensor.empty() : tensor<384x32xf32>
    %transposed_4559 = linalg.transpose ins(%collapsed_4556 : tensor<32x384xf32>) outs(%3841 : tensor<384x32xf32>) permutation = [1, 0] 
    %3842 = tensor.empty() : tensor<384x32xf32>
    %3843 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3842 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3844 = linalg.matmul ins(%collapsed_4557, %transposed_4559 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3843 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4560 = tensor.collapse_shape %transposed_4547 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4561 = tensor.collapse_shape %extracted_slice_4538 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4562 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3845 = tensor.empty() : tensor<384x32xf32>
    %transposed_4563 = linalg.transpose ins(%collapsed_4560 : tensor<32x384xf32>) outs(%3845 : tensor<384x32xf32>) permutation = [1, 0] 
    %3846 = tensor.empty() : tensor<384x32xf32>
    %3847 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%3846 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %3848 = linalg.matmul ins(%collapsed_4561, %transposed_4563 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%3847 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_4564 = arith.constant 0 : index
    %c384_4565 = arith.constant 384 : index
    %c384_4566 = arith.constant 384 : index
    %c768_4567 = arith.constant 768 : index
    %c384_4568 = arith.constant 384 : index
    %c768_4569 = arith.constant 768 : index
    %c1152_4570 = arith.constant 1152 : index
    %c384_4571 = arith.constant 384 : index
    %c1152_4572 = arith.constant 1152 : index
    %c1536_4573 = arith.constant 1536 : index
    %3849 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_4574 = tensor.insert_slice %3836 into %3849[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4575 = tensor.insert_slice %3840 into %inserted_slice_4574[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4576 = tensor.insert_slice %3844 into %inserted_slice_4575[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4577 = tensor.insert_slice %3848 into %inserted_slice_4576[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_4578 = tensor.expand_shape %inserted_slice_4577 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %3850 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_4579 = linalg.transpose ins(%expanded_4578 : tensor<4x384x32xf32>) outs(%3850 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_4580 = tensor.collapse_shape %transposed_4579 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_4581 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3851 = tensor.empty() : tensor<128x128xf32>
    %transposed_4582 = linalg.transpose ins(%cst_352 : tensor<128x128xf32>) outs(%3851 : tensor<128x128xf32>) permutation = [1, 0] 
    %3852 = tensor.empty() : tensor<384x128xf32>
    %3853 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_351 : tensor<128xf32>) outs(%3852 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3854 = linalg.matmul ins(%collapsed_4580, %transposed_4582 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3853 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4583 = tensor.expand_shape %3854 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3855 = tensor.empty() : tensor<1x384x128xf32>
    %3856 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4583, %expanded_4469 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3855 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3857 = tensor.empty() : tensor<1x384x128xf32>
    %3858 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3856, %cst_24 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3857 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3859 = tensor.empty() : tensor<1x384x128xf32>
    %3860 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3858, %cst_23 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3859 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4584 = tensor.collapse_shape %3860 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4585 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3861 = tensor.empty() : tensor<128x512xf32>
    %transposed_4586 = linalg.transpose ins(%cst_350 : tensor<512x128xf32>) outs(%3861 : tensor<128x512xf32>) permutation = [1, 0] 
    %3862 = tensor.empty() : tensor<384x512xf32>
    %3863 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_349 : tensor<512xf32>) outs(%3862 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3864 = linalg.matmul ins(%collapsed_4584, %transposed_4586 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3863 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3865 = tensor.empty() : tensor<384x512xf32>
    %3866 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3864 : tensor<384x512xf32>) outs(%3865 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4587 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3867 = tensor.empty() : tensor<512x128xf32>
    %transposed_4588 = linalg.transpose ins(%cst_348 : tensor<128x512xf32>) outs(%3867 : tensor<512x128xf32>) permutation = [1, 0] 
    %3868 = tensor.empty() : tensor<384x128xf32>
    %3869 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_347 : tensor<128xf32>) outs(%3868 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3870 = linalg.matmul ins(%3866, %transposed_4588 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3869 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4589 = tensor.expand_shape %3870 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3871 = tensor.empty() : tensor<1x384x128xf32>
    %3872 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4589, %3860 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3871 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3873 = tensor.empty() : tensor<1x384x128xf32>
    %3874 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3872, %cst_22 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3873 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3875 = tensor.empty() : tensor<1x384x128xf32>
    %3876 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3874, %cst_21 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3875 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4590 = tensor.collapse_shape %3876 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4591 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3877 = tensor.empty() : tensor<128x512xf32>
    %transposed_4592 = linalg.transpose ins(%cst_346 : tensor<512x128xf32>) outs(%3877 : tensor<128x512xf32>) permutation = [1, 0] 
    %3878 = tensor.empty() : tensor<384x512xf32>
    %3879 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_345 : tensor<512xf32>) outs(%3878 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3880 = linalg.matmul ins(%collapsed_4590, %transposed_4592 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3879 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3881 = tensor.empty() : tensor<384x512xf32>
    %3882 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3880 : tensor<384x512xf32>) outs(%3881 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4593 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3883 = tensor.empty() : tensor<512x128xf32>
    %transposed_4594 = linalg.transpose ins(%cst_344 : tensor<128x512xf32>) outs(%3883 : tensor<512x128xf32>) permutation = [1, 0] 
    %3884 = tensor.empty() : tensor<384x128xf32>
    %3885 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_343 : tensor<128xf32>) outs(%3884 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3886 = linalg.matmul ins(%3882, %transposed_4594 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3885 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4595 = tensor.expand_shape %3886 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3887 = tensor.empty() : tensor<1x384x128xf32>
    %3888 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4595, %3876 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3887 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3889 = tensor.empty() : tensor<1x384x128xf32>
    %3890 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3888, %cst_20 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3889 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3891 = tensor.empty() : tensor<1x384x128xf32>
    %3892 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3890, %cst_19 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3891 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4596 = tensor.collapse_shape %3892 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4597 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3893 = tensor.empty() : tensor<128x512xf32>
    %transposed_4598 = linalg.transpose ins(%cst_342 : tensor<512x128xf32>) outs(%3893 : tensor<128x512xf32>) permutation = [1, 0] 
    %3894 = tensor.empty() : tensor<384x512xf32>
    %3895 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_341 : tensor<512xf32>) outs(%3894 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3896 = linalg.matmul ins(%collapsed_4596, %transposed_4598 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3895 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3897 = tensor.empty() : tensor<384x512xf32>
    %3898 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3896 : tensor<384x512xf32>) outs(%3897 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4599 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3899 = tensor.empty() : tensor<512x128xf32>
    %transposed_4600 = linalg.transpose ins(%cst_340 : tensor<128x512xf32>) outs(%3899 : tensor<512x128xf32>) permutation = [1, 0] 
    %3900 = tensor.empty() : tensor<384x128xf32>
    %3901 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_339 : tensor<128xf32>) outs(%3900 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3902 = linalg.matmul ins(%3898, %transposed_4600 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3901 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4601 = tensor.expand_shape %3902 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3903 = tensor.empty() : tensor<1x384x128xf32>
    %3904 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4601, %3892 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3903 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3905 = tensor.empty() : tensor<1x384x128xf32>
    %3906 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3904, %cst_18 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3905 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3907 = tensor.empty() : tensor<1x384x128xf32>
    %3908 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3906, %cst_17 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3907 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4602 = tensor.collapse_shape %3908 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4603 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3909 = tensor.empty() : tensor<128x512xf32>
    %transposed_4604 = linalg.transpose ins(%cst_338 : tensor<512x128xf32>) outs(%3909 : tensor<128x512xf32>) permutation = [1, 0] 
    %3910 = tensor.empty() : tensor<384x512xf32>
    %3911 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_337 : tensor<512xf32>) outs(%3910 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3912 = linalg.matmul ins(%collapsed_4602, %transposed_4604 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3911 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %3913 = tensor.empty() : tensor<384x512xf32>
    %3914 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%3912 : tensor<384x512xf32>) outs(%3913 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4605 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3915 = tensor.empty() : tensor<512x128xf32>
    %transposed_4606 = linalg.transpose ins(%cst_336 : tensor<128x512xf32>) outs(%3915 : tensor<512x128xf32>) permutation = [1, 0] 
    %3916 = tensor.empty() : tensor<384x128xf32>
    %3917 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_335 : tensor<128xf32>) outs(%3916 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3918 = linalg.matmul ins(%3914, %transposed_4606 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3917 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4607 = tensor.expand_shape %3918 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %3919 = tensor.empty() : tensor<1x384x128xf32>
    %3920 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4607, %3908 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%3919 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3921 = tensor.empty() : tensor<1x384x128xf32>
    %3922 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3920, %cst_16 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3921 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %3923 = tensor.empty() : tensor<1x384x128xf32>
    %3924 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3922, %cst_15 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%3923 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4608 = tensor.collapse_shape %3924 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4609 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3925 = tensor.empty() : tensor<128x512xf32>
    %transposed_4610 = linalg.transpose ins(%cst_334 : tensor<512x128xf32>) outs(%3925 : tensor<128x512xf32>) permutation = [1, 0] 
    %3926 = tensor.empty() : tensor<384x512xf32>
    %3927 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_333 : tensor<512xf32>) outs(%3926 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %3928 = linalg.matmul ins(%collapsed_4608, %transposed_4610 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%3927 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_4611 = tensor.expand_shape %3928 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %3929 = tensor.empty() : tensor<1x384x512xf32>
    %3930 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4611, %3764 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%3929 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3931 = tensor.empty() : tensor<1x384x512xf32>
    %3932 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3930, %cst_14 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3931 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %3933 = tensor.empty() : tensor<1x384x512xf32>
    %3934 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3932, %cst_13 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%3933 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_4612 = tensor.collapse_shape %3934 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4613 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3935 = tensor.empty() : tensor<512x128xf32>
    %transposed_4614 = linalg.transpose ins(%cst_332 : tensor<128x512xf32>) outs(%3935 : tensor<512x128xf32>) permutation = [1, 0] 
    %3936 = tensor.empty() : tensor<384x128xf32>
    %3937 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_331 : tensor<128xf32>) outs(%3936 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3938 = linalg.matmul ins(%collapsed_4612, %transposed_4614 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3937 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4615 = tensor.collapse_shape %3934 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4616 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3939 = tensor.empty() : tensor<512x128xf32>
    %transposed_4617 = linalg.transpose ins(%cst_330 : tensor<128x512xf32>) outs(%3939 : tensor<512x128xf32>) permutation = [1, 0] 
    %3940 = tensor.empty() : tensor<384x128xf32>
    %3941 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_329 : tensor<128xf32>) outs(%3940 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3942 = linalg.matmul ins(%collapsed_4615, %transposed_4617 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3941 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %collapsed_4618 = tensor.collapse_shape %3934 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4619 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3943 = tensor.empty() : tensor<512x128xf32>
    %transposed_4620 = linalg.transpose ins(%cst_328 : tensor<128x512xf32>) outs(%3943 : tensor<512x128xf32>) permutation = [1, 0] 
    %3944 = tensor.empty() : tensor<384x128xf32>
    %3945 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_327 : tensor<128xf32>) outs(%3944 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3946 = linalg.matmul ins(%collapsed_4618, %transposed_4620 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%3945 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4621 = tensor.expand_shape %3938 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %cst_4622 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3947 = tensor.empty() : tensor<128x128xf32>
    %transposed_4623 = linalg.transpose ins(%cst_326 : tensor<128x128xf32>) outs(%3947 : tensor<128x128xf32>) permutation = [1, 0] 
    %3948 = tensor.empty() : tensor<384x128xf32>
    %3949 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_325 : tensor<128xf32>) outs(%3948 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3950 = linalg.matmul ins(%3942, %transposed_4623 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3949 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4624 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3951 = tensor.empty() : tensor<128x128xf32>
    %transposed_4625 = linalg.transpose ins(%cst_324 : tensor<128x128xf32>) outs(%3951 : tensor<128x128xf32>) permutation = [1, 0] 
    %3952 = tensor.empty() : tensor<384x128xf32>
    %3953 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_323 : tensor<128xf32>) outs(%3952 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3954 = linalg.matmul ins(%3942, %transposed_4625 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3953 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %cst_4626 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3955 = tensor.empty() : tensor<128x128xf32>
    %transposed_4627 = linalg.transpose ins(%cst_322 : tensor<128x128xf32>) outs(%3955 : tensor<128x128xf32>) permutation = [1, 0] 
    %3956 = tensor.empty() : tensor<384x128xf32>
    %3957 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_321 : tensor<128xf32>) outs(%3956 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %3958 = linalg.matmul ins(%3946, %transposed_4627 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%3957 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4628 = tensor.expand_shape %3950 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4629 = tensor.expand_shape %3954 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %expanded_4630 = tensor.expand_shape %3958 [[0, 1], [2, 3]] : tensor<384x128xf32> into tensor<1x384x4x32xf32>
    %3959 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4631 = linalg.transpose ins(%expanded_4628 : tensor<1x384x4x32xf32>) outs(%3959 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3960 = tensor.empty() : tensor<1x4x384x32xf32>
    %transposed_4632 = linalg.transpose ins(%expanded_4630 : tensor<1x384x4x32xf32>) outs(%3960 : tensor<1x4x384x32xf32>) permutation = [0, 2, 1, 3] 
    %3961 = tensor.empty() : tensor<1x4x32x384xf32>
    %transposed_4633 = linalg.transpose ins(%expanded_4629 : tensor<1x384x4x32xf32>) outs(%3961 : tensor<1x4x32x384xf32>) permutation = [0, 2, 3, 1] 
    %collapsed_4634 = tensor.collapse_shape %transposed_4631 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4635 = tensor.extract_slice %collapsed_4634[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4636 = tensor.extract_slice %collapsed_4634[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4637 = tensor.extract_slice %collapsed_4634[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %extracted_slice_4638 = tensor.extract_slice %collapsed_4634[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %collapsed_4639 = tensor.collapse_shape %transposed_4633 [[0, 1], [2], [3]] : tensor<1x4x32x384xf32> into tensor<4x32x384xf32>
    %extracted_slice_4640 = tensor.extract_slice %collapsed_4639[0, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3962 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4641 = linalg.transpose ins(%extracted_slice_4640 : tensor<1x32x384xf32>) outs(%3962 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4642 = tensor.extract_slice %collapsed_4639[1, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3963 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4643 = linalg.transpose ins(%extracted_slice_4642 : tensor<1x32x384xf32>) outs(%3963 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4644 = tensor.extract_slice %collapsed_4639[2, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3964 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4645 = linalg.transpose ins(%extracted_slice_4644 : tensor<1x32x384xf32>) outs(%3964 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4646 = tensor.extract_slice %collapsed_4639[3, 0, 0] [1, 32, 384] [1, 1, 1] : tensor<4x32x384xf32> to tensor<1x32x384xf32>
    %3965 = tensor.empty() : tensor<384x32x1xf32>
    %transposed_4647 = linalg.transpose ins(%extracted_slice_4646 : tensor<1x32x384xf32>) outs(%3965 : tensor<384x32x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4648 = tensor.collapse_shape %transposed_4641 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4649 = tensor.collapse_shape %extracted_slice_4635 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4650 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3966 = tensor.empty() : tensor<32x384xf32>
    %transposed_4651 = linalg.transpose ins(%collapsed_4648 : tensor<384x32xf32>) outs(%3966 : tensor<32x384xf32>) permutation = [1, 0] 
    %3967 = tensor.empty() : tensor<384x384xf32>
    %3968 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3967 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3969 = linalg.matmul ins(%collapsed_4649, %transposed_4651 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3968 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4652 = tensor.collapse_shape %transposed_4643 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4653 = tensor.collapse_shape %extracted_slice_4636 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4654 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3970 = tensor.empty() : tensor<32x384xf32>
    %transposed_4655 = linalg.transpose ins(%collapsed_4652 : tensor<384x32xf32>) outs(%3970 : tensor<32x384xf32>) permutation = [1, 0] 
    %3971 = tensor.empty() : tensor<384x384xf32>
    %3972 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3971 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3973 = linalg.matmul ins(%collapsed_4653, %transposed_4655 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3972 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4656 = tensor.collapse_shape %transposed_4645 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4657 = tensor.collapse_shape %extracted_slice_4637 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4658 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3974 = tensor.empty() : tensor<32x384xf32>
    %transposed_4659 = linalg.transpose ins(%collapsed_4656 : tensor<384x32xf32>) outs(%3974 : tensor<32x384xf32>) permutation = [1, 0] 
    %3975 = tensor.empty() : tensor<384x384xf32>
    %3976 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3975 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3977 = linalg.matmul ins(%collapsed_4657, %transposed_4659 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3976 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %collapsed_4660 = tensor.collapse_shape %transposed_4647 [[0], [1, 2]] : tensor<384x32x1xf32> into tensor<384x32xf32>
    %collapsed_4661 = tensor.collapse_shape %extracted_slice_4638 [[0, 1], [2]] : tensor<1x384x32xf32> into tensor<384x32xf32>
    %cst_4662 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %3978 = tensor.empty() : tensor<32x384xf32>
    %transposed_4663 = linalg.transpose ins(%collapsed_4660 : tensor<384x32xf32>) outs(%3978 : tensor<32x384xf32>) permutation = [1, 0] 
    %3979 = tensor.empty() : tensor<384x384xf32>
    %3980 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_295 : tensor<384xf32>) outs(%3979 : tensor<384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x384xf32>
    %3981 = linalg.matmul ins(%collapsed_4661, %transposed_4663 : tensor<384x32xf32>, tensor<32x384xf32>) outs(%3980 : tensor<384x384xf32>) -> tensor<384x384xf32>
    %c0_4664 = arith.constant 0 : index
    %c384_4665 = arith.constant 384 : index
    %c384_4666 = arith.constant 384 : index
    %c768_4667 = arith.constant 768 : index
    %c384_4668 = arith.constant 384 : index
    %c768_4669 = arith.constant 768 : index
    %c1152_4670 = arith.constant 1152 : index
    %c384_4671 = arith.constant 384 : index
    %c1152_4672 = arith.constant 1152 : index
    %c1536_4673 = arith.constant 1536 : index
    %3982 = tensor.empty() : tensor<1536x384xf32>
    %inserted_slice_4674 = tensor.insert_slice %3969 into %3982[0, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4675 = tensor.insert_slice %3973 into %inserted_slice_4674[384, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4676 = tensor.insert_slice %3977 into %inserted_slice_4675[768, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %inserted_slice_4677 = tensor.insert_slice %3981 into %inserted_slice_4676[1152, 0] [384, 384] [1, 1] : tensor<384x384xf32> into tensor<1536x384xf32>
    %expanded_4678 = tensor.expand_shape %inserted_slice_4677 [[0, 1], [2]] : tensor<1536x384xf32> into tensor<4x384x384xf32>
    %3983 = tensor.empty() : tensor<4x384x384xf32>
    %3984 = linalg.generic {indexing_maps = [#map3, #map7, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4678, %cst_289 : tensor<4x384x384xf32>, tensor<1x1x1xf32>) outs(%3983 : tensor<4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<4x384x384xf32>
    %expanded_4679 = tensor.expand_shape %3984 [[0, 1], [2], [3]] : tensor<4x384x384xf32> into tensor<1x4x384x384xf32>
    %3985 = tensor.empty() : tensor<1x4x384x384xf32>
    %3986 = linalg.generic {indexing_maps = [#map9, #map10, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4679, %expanded_1079 : tensor<1x4x384x384xf32>, tensor<1x1x384x384xf32>) outs(%3985 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3987 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4680 = arith.constant -3.40282347E+38 : f32
    %3988 = linalg.fill ins(%cst_4680 : f32) outs(%3987 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4681 = linalg.reduce ins(%3986 : tensor<1x4x384x384xf32>) outs(%3988 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.maximumf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4682 = tensor.expand_shape %reduced_4681 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3989 = tensor.empty() : tensor<1x4x384x384xf32>
    %3990 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3986, %expanded_4682 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3989 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.subf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3991 = tensor.empty() : tensor<1x4x384x384xf32>
    %3992 = linalg.generic {indexing_maps = [#map9, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3990 : tensor<1x4x384x384xf32>) outs(%3991 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %out: f32):
      %4110 = math.exp %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %3993 = tensor.empty() : tensor<1x4x384xf32>
    %cst_4683 = arith.constant 0.000000e+00 : f32
    %3994 = linalg.fill ins(%cst_4683 : f32) outs(%3993 : tensor<1x4x384xf32>) -> tensor<1x4x384xf32>
    %reduced_4684 = linalg.reduce ins(%3992 : tensor<1x4x384x384xf32>) outs(%3994 : tensor<1x4x384xf32>) dimensions = [3] 
      (%in: f32, %init: f32) {
        %4110 = arith.addf %in, %init : f32
        linalg.yield %4110 : f32
      }
    %expanded_4685 = tensor.expand_shape %reduced_4684 [[0], [1], [2, 3]] : tensor<1x4x384xf32> into tensor<1x4x384x1xf32>
    %3995 = tensor.empty() : tensor<1x4x384x1xf32>
    %3996 = linalg.generic {indexing_maps = [#map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_4685 : tensor<1x4x384x1xf32>) outs(%3995 : tensor<1x4x384x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 1.000000e+00 : f32
      %4110 = arith.divf %cst_4773, %in : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x1xf32>
    %3997 = tensor.empty() : tensor<1x4x384x384xf32>
    %3998 = linalg.generic {indexing_maps = [#map9, #map12, #map11], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3992, %3996 : tensor<1x4x384x384xf32>, tensor<1x4x384x1xf32>) outs(%3997 : tensor<1x4x384x384xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x4x384x384xf32>
    %collapsed_4686 = tensor.collapse_shape %3998 [[0, 1], [2], [3]] : tensor<1x4x384x384xf32> into tensor<4x384x384xf32>
    %extracted_slice_4687 = tensor.extract_slice %collapsed_4686[0, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4688 = tensor.extract_slice %collapsed_4686[1, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4689 = tensor.extract_slice %collapsed_4686[2, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %extracted_slice_4690 = tensor.extract_slice %collapsed_4686[3, 0, 0] [1, 384, 384] [1, 1, 1] : tensor<4x384x384xf32> to tensor<1x384x384xf32>
    %collapsed_4691 = tensor.collapse_shape %transposed_4632 [[0, 1], [2], [3]] : tensor<1x4x384x32xf32> into tensor<4x384x32xf32>
    %extracted_slice_4692 = tensor.extract_slice %collapsed_4691[0, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %3999 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4693 = linalg.transpose ins(%extracted_slice_4692 : tensor<1x384x32xf32>) outs(%3999 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4694 = tensor.extract_slice %collapsed_4691[1, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %4000 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4695 = linalg.transpose ins(%extracted_slice_4694 : tensor<1x384x32xf32>) outs(%4000 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4696 = tensor.extract_slice %collapsed_4691[2, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %4001 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4697 = linalg.transpose ins(%extracted_slice_4696 : tensor<1x384x32xf32>) outs(%4001 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %extracted_slice_4698 = tensor.extract_slice %collapsed_4691[3, 0, 0] [1, 384, 32] [1, 1, 1] : tensor<4x384x32xf32> to tensor<1x384x32xf32>
    %4002 = tensor.empty() : tensor<32x384x1xf32>
    %transposed_4699 = linalg.transpose ins(%extracted_slice_4698 : tensor<1x384x32xf32>) outs(%4002 : tensor<32x384x1xf32>) permutation = [2, 1, 0] 
    %collapsed_4700 = tensor.collapse_shape %transposed_4693 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4701 = tensor.collapse_shape %extracted_slice_4687 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4702 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4003 = tensor.empty() : tensor<384x32xf32>
    %transposed_4703 = linalg.transpose ins(%collapsed_4700 : tensor<32x384xf32>) outs(%4003 : tensor<384x32xf32>) permutation = [1, 0] 
    %4004 = tensor.empty() : tensor<384x32xf32>
    %4005 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%4004 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %4006 = linalg.matmul ins(%collapsed_4701, %transposed_4703 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4005 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4704 = tensor.collapse_shape %transposed_4695 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4705 = tensor.collapse_shape %extracted_slice_4688 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4706 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4007 = tensor.empty() : tensor<384x32xf32>
    %transposed_4707 = linalg.transpose ins(%collapsed_4704 : tensor<32x384xf32>) outs(%4007 : tensor<384x32xf32>) permutation = [1, 0] 
    %4008 = tensor.empty() : tensor<384x32xf32>
    %4009 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%4008 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %4010 = linalg.matmul ins(%collapsed_4705, %transposed_4707 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4009 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4708 = tensor.collapse_shape %transposed_4697 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4709 = tensor.collapse_shape %extracted_slice_4689 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4710 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4011 = tensor.empty() : tensor<384x32xf32>
    %transposed_4711 = linalg.transpose ins(%collapsed_4708 : tensor<32x384xf32>) outs(%4011 : tensor<384x32xf32>) permutation = [1, 0] 
    %4012 = tensor.empty() : tensor<384x32xf32>
    %4013 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%4012 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %4014 = linalg.matmul ins(%collapsed_4709, %transposed_4711 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4013 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %collapsed_4712 = tensor.collapse_shape %transposed_4699 [[0], [1, 2]] : tensor<32x384x1xf32> into tensor<32x384xf32>
    %collapsed_4713 = tensor.collapse_shape %extracted_slice_4690 [[0, 1], [2]] : tensor<1x384x384xf32> into tensor<384x384xf32>
    %cst_4714 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4015 = tensor.empty() : tensor<384x32xf32>
    %transposed_4715 = linalg.transpose ins(%collapsed_4712 : tensor<32x384xf32>) outs(%4015 : tensor<384x32xf32>) permutation = [1, 0] 
    %4016 = tensor.empty() : tensor<384x32xf32>
    %4017 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_294 : tensor<32xf32>) outs(%4016 : tensor<384x32xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x32xf32>
    %4018 = linalg.matmul ins(%collapsed_4713, %transposed_4715 : tensor<384x384xf32>, tensor<384x32xf32>) outs(%4017 : tensor<384x32xf32>) -> tensor<384x32xf32>
    %c0_4716 = arith.constant 0 : index
    %c384_4717 = arith.constant 384 : index
    %c384_4718 = arith.constant 384 : index
    %c768_4719 = arith.constant 768 : index
    %c384_4720 = arith.constant 384 : index
    %c768_4721 = arith.constant 768 : index
    %c1152_4722 = arith.constant 1152 : index
    %c384_4723 = arith.constant 384 : index
    %c1152_4724 = arith.constant 1152 : index
    %c1536_4725 = arith.constant 1536 : index
    %4019 = tensor.empty() : tensor<1536x32xf32>
    %inserted_slice_4726 = tensor.insert_slice %4006 into %4019[0, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4727 = tensor.insert_slice %4010 into %inserted_slice_4726[384, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4728 = tensor.insert_slice %4014 into %inserted_slice_4727[768, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %inserted_slice_4729 = tensor.insert_slice %4018 into %inserted_slice_4728[1152, 0] [384, 32] [1, 1] : tensor<384x32xf32> into tensor<1536x32xf32>
    %expanded_4730 = tensor.expand_shape %inserted_slice_4729 [[0, 1], [2]] : tensor<1536x32xf32> into tensor<4x384x32xf32>
    %4020 = tensor.empty() : tensor<384x4x32xf32>
    %transposed_4731 = linalg.transpose ins(%expanded_4730 : tensor<4x384x32xf32>) outs(%4020 : tensor<384x4x32xf32>) permutation = [1, 0, 2] 
    %collapsed_4732 = tensor.collapse_shape %transposed_4731 [[0], [1, 2]] : tensor<384x4x32xf32> into tensor<384x128xf32>
    %cst_4733 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4021 = tensor.empty() : tensor<128x128xf32>
    %transposed_4734 = linalg.transpose ins(%cst_320 : tensor<128x128xf32>) outs(%4021 : tensor<128x128xf32>) permutation = [1, 0] 
    %4022 = tensor.empty() : tensor<384x128xf32>
    %4023 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_319 : tensor<128xf32>) outs(%4022 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %4024 = linalg.matmul ins(%collapsed_4732, %transposed_4734 : tensor<384x128xf32>, tensor<128x128xf32>) outs(%4023 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4735 = tensor.expand_shape %4024 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4025 = tensor.empty() : tensor<1x384x128xf32>
    %4026 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4735, %expanded_4621 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4025 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4027 = tensor.empty() : tensor<1x384x128xf32>
    %4028 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4026, %cst_12 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4027 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4029 = tensor.empty() : tensor<1x384x128xf32>
    %4030 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4028, %cst_11 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4029 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4736 = tensor.collapse_shape %4030 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4737 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4031 = tensor.empty() : tensor<128x512xf32>
    %transposed_4738 = linalg.transpose ins(%cst_318 : tensor<512x128xf32>) outs(%4031 : tensor<128x512xf32>) permutation = [1, 0] 
    %4032 = tensor.empty() : tensor<384x512xf32>
    %4033 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_317 : tensor<512xf32>) outs(%4032 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %4034 = linalg.matmul ins(%collapsed_4736, %transposed_4738 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4033 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4035 = tensor.empty() : tensor<384x512xf32>
    %4036 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%4034 : tensor<384x512xf32>) outs(%4035 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4739 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4037 = tensor.empty() : tensor<512x128xf32>
    %transposed_4740 = linalg.transpose ins(%cst_316 : tensor<128x512xf32>) outs(%4037 : tensor<512x128xf32>) permutation = [1, 0] 
    %4038 = tensor.empty() : tensor<384x128xf32>
    %4039 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_315 : tensor<128xf32>) outs(%4038 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %4040 = linalg.matmul ins(%4036, %transposed_4740 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4039 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4741 = tensor.expand_shape %4040 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4041 = tensor.empty() : tensor<1x384x128xf32>
    %4042 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4741, %4030 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4041 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4043 = tensor.empty() : tensor<1x384x128xf32>
    %4044 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4042, %cst_10 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4043 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4045 = tensor.empty() : tensor<1x384x128xf32>
    %4046 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4044, %cst_9 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4045 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4742 = tensor.collapse_shape %4046 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4743 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4047 = tensor.empty() : tensor<128x512xf32>
    %transposed_4744 = linalg.transpose ins(%cst_314 : tensor<512x128xf32>) outs(%4047 : tensor<128x512xf32>) permutation = [1, 0] 
    %4048 = tensor.empty() : tensor<384x512xf32>
    %4049 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_313 : tensor<512xf32>) outs(%4048 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %4050 = linalg.matmul ins(%collapsed_4742, %transposed_4744 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4049 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4051 = tensor.empty() : tensor<384x512xf32>
    %4052 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%4050 : tensor<384x512xf32>) outs(%4051 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4745 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4053 = tensor.empty() : tensor<512x128xf32>
    %transposed_4746 = linalg.transpose ins(%cst_312 : tensor<128x512xf32>) outs(%4053 : tensor<512x128xf32>) permutation = [1, 0] 
    %4054 = tensor.empty() : tensor<384x128xf32>
    %4055 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_311 : tensor<128xf32>) outs(%4054 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %4056 = linalg.matmul ins(%4052, %transposed_4746 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4055 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4747 = tensor.expand_shape %4056 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4057 = tensor.empty() : tensor<1x384x128xf32>
    %4058 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4747, %4046 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4057 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4059 = tensor.empty() : tensor<1x384x128xf32>
    %4060 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4058, %cst_8 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4059 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4061 = tensor.empty() : tensor<1x384x128xf32>
    %4062 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4060, %cst_7 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4061 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4748 = tensor.collapse_shape %4062 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4749 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4063 = tensor.empty() : tensor<128x512xf32>
    %transposed_4750 = linalg.transpose ins(%cst_310 : tensor<512x128xf32>) outs(%4063 : tensor<128x512xf32>) permutation = [1, 0] 
    %4064 = tensor.empty() : tensor<384x512xf32>
    %4065 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_309 : tensor<512xf32>) outs(%4064 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %4066 = linalg.matmul ins(%collapsed_4748, %transposed_4750 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4065 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4067 = tensor.empty() : tensor<384x512xf32>
    %4068 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%4066 : tensor<384x512xf32>) outs(%4067 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4751 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4069 = tensor.empty() : tensor<512x128xf32>
    %transposed_4752 = linalg.transpose ins(%cst_308 : tensor<128x512xf32>) outs(%4069 : tensor<512x128xf32>) permutation = [1, 0] 
    %4070 = tensor.empty() : tensor<384x128xf32>
    %4071 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_307 : tensor<128xf32>) outs(%4070 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %4072 = linalg.matmul ins(%4068, %transposed_4752 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4071 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4753 = tensor.expand_shape %4072 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4073 = tensor.empty() : tensor<1x384x128xf32>
    %4074 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4753, %4062 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4073 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4075 = tensor.empty() : tensor<1x384x128xf32>
    %4076 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4074, %cst_6 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4075 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4077 = tensor.empty() : tensor<1x384x128xf32>
    %4078 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4076, %cst_5 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4077 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4754 = tensor.collapse_shape %4078 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4755 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4079 = tensor.empty() : tensor<128x512xf32>
    %transposed_4756 = linalg.transpose ins(%cst_306 : tensor<512x128xf32>) outs(%4079 : tensor<128x512xf32>) permutation = [1, 0] 
    %4080 = tensor.empty() : tensor<384x512xf32>
    %4081 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_305 : tensor<512xf32>) outs(%4080 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %4082 = linalg.matmul ins(%collapsed_4754, %transposed_4756 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4081 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %4083 = tensor.empty() : tensor<384x512xf32>
    %4084 = linalg.generic {indexing_maps = [#map1, #map1], iterator_types = ["parallel", "parallel"]} ins(%4082 : tensor<384x512xf32>) outs(%4083 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      %cst_4773 = arith.constant 0.000000e+00 : f32
      %cst_4774 = arith.constant 3.40282347E+38 : f32
      %4110 = arith.minimumf %in, %cst_4774 : f32
      %4111 = arith.maximumf %4110, %cst_4773 : f32
      linalg.yield %4111 : f32
    } -> tensor<384x512xf32>
    %cst_4757 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4085 = tensor.empty() : tensor<512x128xf32>
    %transposed_4758 = linalg.transpose ins(%cst_304 : tensor<128x512xf32>) outs(%4085 : tensor<512x128xf32>) permutation = [1, 0] 
    %4086 = tensor.empty() : tensor<384x128xf32>
    %4087 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_303 : tensor<128xf32>) outs(%4086 : tensor<384x128xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x128xf32>
    %4088 = linalg.matmul ins(%4084, %transposed_4758 : tensor<384x512xf32>, tensor<512x128xf32>) outs(%4087 : tensor<384x128xf32>) -> tensor<384x128xf32>
    %expanded_4759 = tensor.expand_shape %4088 [[0, 1], [2]] : tensor<384x128xf32> into tensor<1x384x128xf32>
    %4089 = tensor.empty() : tensor<1x384x128xf32>
    %4090 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4759, %4078 : tensor<1x384x128xf32>, tensor<1x384x128xf32>) outs(%4089 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4091 = tensor.empty() : tensor<1x384x128xf32>
    %4092 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4090, %cst_4 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4091 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %4093 = tensor.empty() : tensor<1x384x128xf32>
    %4094 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4092, %cst_3 : tensor<1x384x128xf32>, tensor<1x1x128xf32>) outs(%4093 : tensor<1x384x128xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x128xf32>
    %collapsed_4760 = tensor.collapse_shape %4094 [[0, 1], [2]] : tensor<1x384x128xf32> into tensor<384x128xf32>
    %cst_4761 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4095 = tensor.empty() : tensor<128x512xf32>
    %transposed_4762 = linalg.transpose ins(%cst_302 : tensor<512x128xf32>) outs(%4095 : tensor<128x512xf32>) permutation = [1, 0] 
    %4096 = tensor.empty() : tensor<384x512xf32>
    %4097 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_301 : tensor<512xf32>) outs(%4096 : tensor<384x512xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x512xf32>
    %4098 = linalg.matmul ins(%collapsed_4760, %transposed_4762 : tensor<384x128xf32>, tensor<128x512xf32>) outs(%4097 : tensor<384x512xf32>) -> tensor<384x512xf32>
    %expanded_4763 = tensor.expand_shape %4098 [[0, 1], [2]] : tensor<384x512xf32> into tensor<1x384x512xf32>
    %4099 = tensor.empty() : tensor<1x384x512xf32>
    %4100 = linalg.generic {indexing_maps = [#map6, #map6, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_4763, %3934 : tensor<1x384x512xf32>, tensor<1x384x512xf32>) outs(%4099 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %4101 = tensor.empty() : tensor<1x384x512xf32>
    %4102 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4100, %cst_2 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%4101 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.mulf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %4103 = tensor.empty() : tensor<1x384x512xf32>
    %4104 = linalg.generic {indexing_maps = [#map6, #map4, #map3], iterator_types = ["parallel", "parallel", "parallel"]} ins(%4102, %cst_1 : tensor<1x384x512xf32>, tensor<1x1x512xf32>) outs(%4103 : tensor<1x384x512xf32>) {
    ^bb0(%in: f32, %in_4773: f32, %out: f32):
      %4110 = arith.addf %in, %in_4773 : f32
      linalg.yield %4110 : f32
    } -> tensor<1x384x512xf32>
    %collapsed_4764 = tensor.collapse_shape %4104 [[0, 1], [2]] : tensor<1x384x512xf32> into tensor<384x512xf32>
    %cst_4765 = arith.constant dense_resource<__elided__> : tensor<2xi64>
    %4105 = tensor.empty() : tensor<512x2xf32>
    %transposed_4766 = linalg.transpose ins(%cst_300 : tensor<2x512xf32>) outs(%4105 : tensor<512x2xf32>) permutation = [1, 0] 
    %4106 = tensor.empty() : tensor<384x2xf32>
    %4107 = linalg.generic {indexing_maps = [#map8, #map1], iterator_types = ["parallel", "parallel"]} ins(%cst_299 : tensor<2xf32>) outs(%4106 : tensor<384x2xf32>) {
    ^bb0(%in: f32, %out: f32):
      linalg.yield %in : f32
    } -> tensor<384x2xf32>
    %4108 = linalg.matmul ins(%collapsed_4764, %transposed_4766 : tensor<384x512xf32>, tensor<512x2xf32>) outs(%4107 : tensor<384x2xf32>) -> tensor<384x2xf32>
    %4109 = tensor.empty() : tensor<2x384xf32>
    %transposed_4767 = linalg.transpose ins(%4108 : tensor<384x2xf32>) outs(%4109 : tensor<2x384xf32>) permutation = [1, 0] 
    %expanded_4768 = tensor.expand_shape %transposed_4767 [[0, 1], [2]] : tensor<2x384xf32> into tensor<2x1x384xf32>
    %extracted_slice_4769 = tensor.extract_slice %expanded_4768[0, 0, 0] [1, 1, 384] [1, 1, 1] : tensor<2x1x384xf32> to tensor<1x1x384xf32>
    %collapsed_4770 = tensor.collapse_shape %extracted_slice_4769 [[0, 1], [2]] : tensor<1x1x384xf32> into tensor<1x384xf32>
    %extracted_slice_4771 = tensor.extract_slice %expanded_4768[1, 0, 0] [1, 1, 384] [1, 1, 1] : tensor<2x1x384xf32> to tensor<1x1x384xf32>
    %collapsed_4772 = tensor.collapse_shape %extracted_slice_4771 [[0, 1], [2]] : tensor<1x1x384xf32> into tensor<1x384xf32>
    return %collapsed_4772, %collapsed_4770 : tensor<1x384xf32>, tensor<1x384xf32>
  }
}

